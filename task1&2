mehul@Mehuls-MacBook Bitcoin % brew install automake libtool boost pkg-config libevent
Running `brew update --preinstall`...
==> Auto-updated Homebrew!
Updated 5 taps (homebrew/cask-versions, homebrew/core, homebrew/cask, homebrew/services and mongodb/brew).
==> New Formulae
adamstark-audiofile
age-plugin-yubikey
arxiv_latex_cleaner
astro
aws-nuke
aws2-wrap
aztfy
berkeley-db@5
bfgminer
bore-cli
c2rust
cargo-bundle
cargo-crev
cargo-depgraph
cargo-nextest
cargo-udeps
cfonts
chain-bench
circumflex
cpi
cpp-httplib
create-api
cxgo
czg
dart-sdk
datatype99
dbml-cli
docker-buildx
doggo
dooit
dotdrop
dtrx
dump1090-mutability
dumpling
dunamai
dura
editorconfig-checker
eget
enex2notion
erlang@24
evernote-backup
fastnetmon
fclones
felinks
flix
flock
freebayes
gaze
gcc@11
gcem
git-codereview
git-delete-merged-branches
git-sync
git-workspace
glib-utils
glibc@2.13
glider
gnustep-base
go@1.18
goctl
gokart
gold
groestlcoin
gum
hatch
helix
helmify
hwatch
hyx
ijq
install-peerdeps
interface99
iptables
jackett
jaq
jupp
kics
ksh93
kt-connect
leapp-cli
levant
lexicon
lgeneral
libabw
libapplewm
libbpf
libeatmydata
libnetfilter_conntrack
libnftnl
libnl
libobjc2
libpython-tabulate
libxcvt
libxfont2
licensor
livekit
livekit-cli
llvm@13
lndir
lunar-date
mabel
maclaunch
manifest-tool
mariadb@10.7
markdown-toc
mbt
mbw
mcap
meek
mesheryctl
metalang99
minimap2
mkfontscale
mkp224o
mle
mongodb/brew/mongodb-community-shell@4.2
mongodb/brew/mongodb-community-shell@4.4
mongodb/brew/mongodb-community@5.0
mongodb/brew/mongodb-csfle
mongodb/brew/mongodb-enterprise
mongodb/brew/mongodb-enterprise@4.2
mongodb/brew/mongodb-enterprise@4.4
mongodb/brew/mongodb-enterprise@5.0
mongodb/brew/mongodb-mongocryptd@5.0
monika
mprocs
mypaint-brushes
nali
naml
nb
neovide
nftables
nmrpflash
oak
ocl-icd
octosql
ohdear-cli
onlykey-agent
open62541
opencl-headers
opentelemetry-cpp
openvi
pacmc
page
pax
pg_cron
pg_partman
pget
phrase-cli
pint
pipe-rename
pixie
pixiewps
pkcs11-tools
poac
pocl
podman-compose
primecount
protobuf@3
prql-compiler
prr
pymupdf
python-build
qbe
qsv
quran
railway
redis@6.2
release-it
req
sdl2_sound
sftpgo
sgn
sgr
smap
snapcast
snowflake
spr
sse2neon
stanc3
stencil
svt-av1
swtpm
synergy-core
tea
teller
tere
terramate
tinysearch
tlsx
toxcore
tradcpp
treefmt
tremor-runtime
trzsz-go
ttdl
ttmath
tuc
tuntox
tygo
unisonlang
uthash
vectorscan
verapdf
vile
virt-manager
vulkan-loader
webkitgtk
x86_64-linux-gnu-binutils
xcode-kotlin
xdg-ninja
xkbcomp
xpipe
yorkie
zx
==> New Casks
1password7
aethersx2
alfred4
amazon-luna
app-fair
archy
astrofox
audiostellar
avifquicklook
betterandbetter
betterdisplay
bike
bili-downloader
bilibili-official
bing-wallpaper
black-light
black-light-pro
calhash
cardinal
cardpresso
cleaneronepro
cloud189
contour
cro-mag-rally
dcp-o-matic-combiner
dcp-o-matic-disk-writer
dcp-o-matic-playlist-editor
detail
dixa
dmg-canvas
drawpile
duckduckgo
ecamm-live
electrum-grs
elephicon
ferdium
fertigt-slate
fly-key
gama
gama-jdk
gamma-control
groestlcoin-core
gyroflow
hdfview
headlamp
input-source-pro
iqmol
jpc-qlcolorcode
jquake
juice
lemonlime
livebook
localxpose
manila
mbcord
medis
mega
metadatics
miaoyan
miln-movie-splitter
miniwol
mp3tag
mx-power-gadget
nitro-pdf-pro
omegat-latest
opencore-patcher
opera-crypto-developer
orangedrangon-android-messages
orion
oso-cloud
oxwu
phpwebstudy
plex-htpc
plus42-binary
plus42-decimal
podman-desktop
polypad
protokol
psst
qwerty-fr
reverso
roam-research
rockboxutility
rstudio-preview-electron
rustdesk
semeru-jdk17-open
shop-different
sol
sonixd
squash
swiftcord
tailscale
tdr-kotelnikov
tdr-nova
tdr-vos-slickeq
ti-smartview-ce-for-the-ti-84-plus-family
tmpdisk
tomatobar
tqsl
trivial
twitch-studio
ui
ukrainian-typographic-keyboard
universal-android-debloater
v2ray-unofficial
ved
vieb
weektodo
wirecast
workman
wow
xiv-on-mac
xmind8
yandex-music-unofficial
yattee
yousician
yubihsm2-sdk

You have 34 outdated formulae installed.
You can upgrade them with brew upgrade
or list them with brew outdated.

Warning: libtool 2.4.7 is already installed and up-to-date.
To reinstall 2.4.7, run:
  brew reinstall libtool
Warning: pkg-config 0.29.2_3 is already installed and up-to-date.
To reinstall 0.29.2_3, run:
  brew reinstall pkg-config
==> Downloading https://ghcr.io/v2/homebrew/core/automake/manifests/1.16.5
######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/automake/blobs/sha256:f68481d
==> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/
###                                                                        4.3#####################                                                     29.7######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/xz/manifests/5.2.5_1
######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/xz/blobs/sha256:b2f0ff235854d
==> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/
##########                                                                14.5######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/lz4/manifests/1.9.3
######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/lz4/blobs/sha256:d222923849a6
==> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/
############                                                              17.6######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/boost/manifests/1.79.0_1
#######################################                                   55.0######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/boost/blobs/sha256:9005c4f4da
==> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/

==> Downloading https://ghcr.io/v2/homebrew/core/ca-certificates/manifests/202
######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/ca-certificates/blobs/sha256:
==> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/
####################################                                      50.9######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/openssl/1.1/manifests/1.1.1q
######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/openssl/1.1/blobs/sha256:4e7b
==> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/
                                                                           0.8###                                                                        4.9#############                                                             18.5#########################                                                 35.9############################                                              39.6###################################                                       49.4##################################################                        69.8########################################################                  77.8###################################################################       94.4######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/libevent/manifests/2.1.12
######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/libevent/blobs/sha256:4867e07
==> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/
######                                                                     8.8###############################################                           66.3##################################################################        92.7######################################################################## 100.0%
==> Pouring automake--1.16.5.arm64_monterey.bottle.tar.gz
🍺  /opt/homebrew/Cellar/automake/1.16.5: 131 files, 3.5MB
==> Running `brew cleanup automake`...
Disable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP.
Hide these hints with HOMEBREW_NO_ENV_HINTS (see `man brew`).
==> Installing dependencies for boost: xz and lz4
==> Installing boost dependency: xz
==> Pouring xz--5.2.5_1.arm64_monterey.bottle.tar.gz
🍺  /opt/homebrew/Cellar/xz/5.2.5_1: 95 files, 1.4MB
==> Installing boost dependency: lz4
==> Pouring lz4--1.9.3.arm64_monterey.bottle.tar.gz
🍺  /opt/homebrew/Cellar/lz4/1.9.3: 22 files, 620.6KB
==> Installing boost
==> Pouring boost--1.79.0_1.arm64_monterey.bottle.tar.gz
🍺  /opt/homebrew/Cellar/boost/1.79.0_1: 15,462 files, 465.6MB
==> Running `brew cleanup boost`...
==> Installing dependencies for libevent: ca-certificates and openssl@1.1
==> Installing libevent dependency: ca-certificates
==> Pouring ca-certificates--2022-07-19_1.all.bottle.tar.gz
==> Regenerating CA certificate bundle from keychain, this may take a while...
🍺  /opt/homebrew/Cellar/ca-certificates/2022-07-19_1: 3 files, 222.6KB
==> Installing libevent dependency: openssl@1.1
==> Pouring openssl@1.1--1.1.1q.arm64_monterey.bottle.tar.gz
🍺  /opt/homebrew/Cellar/openssl@1.1/1.1.1q: 8,097 files, 18MB
==> Installing libevent
==> Pouring libevent--2.1.12.arm64_monterey.bottle.tar.gz
🍺  /opt/homebrew/Cellar/libevent/2.1.12: 57 files, 2.1MB
==> Running `brew cleanup libevent`...
Warning: The following dependents of upgraded formulae are outdated but will not
be upgraded because they are not bottled:
  mongodb-community
==> Upgrading 10 dependents of upgraded formulae:
Disable this behaviour by setting HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK.
Hide these hints with HOMEBREW_NO_ENV_HINTS (see `man brew`).
curl 7.83.0 -> 7.84.0, freetds 1.3.10 -> 1.3.12, krb5 1.19.3 -> 1.20, libpq 14.2 -> 14.4, node@14 14.19.1 -> 14.20.0, mongosh 1.3.1 -> 1.5.4, openldap 2.6.1 -> 2.6.3, openssl@3 3.0.2 -> 3.0.5, php 8.1.5 -> 8.1.9, pyenv 2.2.5 -> 2.3.3
==> Downloading https://ghcr.io/v2/homebrew/core/openldap/manifests/2.6.3
#########                                                                 12.5######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/openldap/blobs/sha256:d3f0bdb
==> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/
#                                                                          1.5#######                                                                    9.8##############################                                            42.9#####################################################                     74.7######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/openssl/3/manifests/3.0.5
######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/openssl/3/blobs/sha256:d0cc00
==> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/

==> Downloading https://ghcr.io/v2/homebrew/core/krb5/manifests/1.20
###################################                                       49.4######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/krb5/blobs/sha256:ad559a03cc8
==> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/
##                                                                         3.7################                                                          22.3#####################################################                     74.0######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/libpq/manifests/14.4
######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/libpq/blobs/sha256:61472d2665
==> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/

==> Downloading https://ghcr.io/v2/homebrew/core/libidn2/manifests/2.3.3
######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/libidn2/blobs/sha256:e2d5ad35
==> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/
############                                                              17.6###########################################                               60.1######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/libnghttp2/manifests/1.48.0
######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/libnghttp2/blobs/sha256:4378f
==> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/
############                                                              17.8######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/curl/manifests/7.84.0
######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/curl/blobs/sha256:00b2bfb12b8
==> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/
##                                                                         3.5################                                                          23.3########################                                                  33.9###############################                                           44.0###########################################                               60.4########################################################                  78.5######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/libuv/manifests/1.44.2
######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/libuv/blobs/sha256:db15bf8419
==> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/

==> Downloading https://ghcr.io/v2/homebrew/core/node/14/manifests/14.20.0
########################################################                  78.3######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/node/14/blobs/sha256:aa6760fc
==> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/

==> Downloading https://ghcr.io/v2/homebrew/core/pyenv/manifests/2.3.3
##########################################                                58.7######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/pyenv/blobs/sha256:eaaae7b2d7
==> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/
######                                                                     8.3###################                                                       27.1##########################################                                58.9#################################################################         90.7######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/unixodbc/manifests/2.3.11
######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/unixodbc/blobs/sha256:4125211
==> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/
#####                                                                      7.3#########################################                                 57.2######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/freetds/manifests/1.3.12
######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/freetds/blobs/sha256:3a800bf7
==> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/

==> Downloading https://ghcr.io/v2/homebrew/core/node/16/manifests/16.16.0
#######################################################################   99.1######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/node/16/blobs/sha256:5c6ae1e5
==> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/

==> Downloading https://ghcr.io/v2/homebrew/core/mongosh/manifests/1.5.4
########################################################                  78.2######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/mongosh/blobs/sha256:afd60961
==> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/

==> Downloading https://ghcr.io/v2/homebrew/core/freetype/manifests/2.12.1
######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/freetype/blobs/sha256:3e190f2
==> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/
####                                                                       6.3###################################                                       49.5######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/jpeg-turbo/manifests/2.1.3
######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/jpeg-turbo/blobs/sha256:0fe5f
==> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/
####                                                                       6.1################################                                          44.6######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/libtiff/manifests/4.4.0_1
######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/libtiff/blobs/sha256:15921731
==> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/
####                                                                       6.5###########                                                               15.7#################                                                         23.6####################                                                      28.9############################                                              39.4#####################################                                     52.6##################################################                        69.8###############################################################           87.7######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/webp/manifests/1.2.3_1
######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/webp/blobs/sha256:c421bfcdd0b
==> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/
###                                                                        5.5##############################                                            42.3######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/jpeg-xl/manifests/0.6.1_1
######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/jpeg-xl/blobs/sha256:a603bfaf
==> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/
                                                                           0.9####                                                                       6.6#############                                                             19.1######################                                                    30.6################################                                          45.6#############################################                             63.3#####################################################                     75.0################################################################          89.0######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/aom/manifests/3.4.0
######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/aom/blobs/sha256:f16849b3bb16
==> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/
                                                                           1.4######                                                                     9.5#################                                                         24.5##################################                                        47.2#####################################################                     74.2###################################################################       94.1######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/libavif/manifests/0.10.1_1
######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/libavif/blobs/sha256:8a87d1f6
==> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/
############################                                              38.9######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/gd/manifests/2.3.3_3
######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/gd/blobs/sha256:0eda623611efb
==> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/
##########                                                                14.1######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/libzip/manifests/1.9.2
######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/libzip/blobs/sha256:e27a1b53f
==> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/
##########################                                                36.7######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/sqlite/manifests/3.39.2
######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/sqlite/blobs/sha256:a8b1ae9f8
==> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/
##                                                                         2.9################                                                          22.9#####################################################################     96.8######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/php/manifests/8.1.9
########################                                                  34.5#############################################################             85.7######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/php/blobs/sha256:e8701152ee05
==> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/
                                                                           0.3#                                                                          2.0#####                                                                      7.1#######                                                                   11.1##########                                                                14.7#############                                                             18.7################                                                          23.3####################                                                      27.9#######################                                                   32.5#########################                                                 34.9##########################                                                37.3############################                                              39.8##############################                                            42.6################################                                          45.2##################################                                        48.0####################################                                      50.7######################################                                    53.5########################################                                  56.2##########################################                                58.9############################################                              61.9##############################################                            64.8################################################                          67.6##################################################                        70.5####################################################                      73.3######################################################                    76.1########################################################                  79.0##########################################################                81.9#############################################################             84.8###############################################################           88.1#################################################################         90.9###################################################################       93.9#####################################################################     96.7#######################################################################   99.7######################################################################## 100.0%
==> Upgrading openldap
  2.6.1 -> 2.6.3 

==> Pouring openldap--2.6.3.arm64_monterey.bottle.tar.gz
🍺  /opt/homebrew/Cellar/openldap/2.6.3: 340 files, 7.8MB
==> Running `brew cleanup openldap`...
Removing: /opt/homebrew/Cellar/openldap/2.6.1... (340 files, 7.8MB)
==> Upgrading openssl@3
  3.0.2 -> 3.0.5 

==> Pouring openssl@3--3.0.5.arm64_monterey.bottle.tar.gz
==> Caveats
A CA file has been bootstrapped using certificates from the system
keychain. To add additional certificates, place .pem files in
  /opt/homebrew/etc/openssl@3/certs

and run
  /opt/homebrew/opt/openssl@3/bin/c_rehash

openssl@3 is keg-only, which means it was not symlinked into /opt/homebrew,
because macOS provides LibreSSL.

If you need to have openssl@3 first in your PATH, run:
  echo 'export PATH="/opt/homebrew/opt/openssl@3/bin:$PATH"' >> ~/.zshrc

For compilers to find openssl@3 you may need to set:
  export LDFLAGS="-L/opt/homebrew/opt/openssl@3/lib"
  export CPPFLAGS="-I/opt/homebrew/opt/openssl@3/include"

==> Summary
🍺  /opt/homebrew/Cellar/openssl@3/3.0.5: 6,444 files, 27.9MB
==> Running `brew cleanup openssl@3`...
Removing: /opt/homebrew/Cellar/openssl@3/3.0.2... (6,429 files, 27.9MB)
==> Upgrading krb5
  1.19.3 -> 1.20 

==> Pouring krb5--1.20.arm64_monterey.bottle.tar.gz
🍺  /opt/homebrew/Cellar/krb5/1.20: 162 files, 5.6MB
==> Running `brew cleanup krb5`...
Removing: /opt/homebrew/Cellar/krb5/1.19.3... (162 files, 5.6MB)
==> Upgrading libpq
  14.2 -> 14.4 

==> Pouring libpq--14.4.arm64_monterey.bottle.tar.gz
🍺  /opt/homebrew/Cellar/libpq/14.4: 2,338 files, 28.3MB
==> Running `brew cleanup libpq`...
Removing: /opt/homebrew/Cellar/libpq/14.2... (2,336 files, 28.2MB)
==> Upgrading curl
  7.83.0 -> 7.84.0 

==> Installing dependencies for curl: libidn2 and libnghttp2
==> Installing curl dependency: libidn2
==> Pouring libidn2--2.3.3.arm64_monterey.bottle.tar.gz
🍺  /opt/homebrew/Cellar/libidn2/2.3.3: 78 files, 1MB
==> Installing curl dependency: libnghttp2
==> Pouring libnghttp2--1.48.0.arm64_monterey.bottle.tar.gz
🍺  /opt/homebrew/Cellar/libnghttp2/1.48.0: 13 files, 739.5KB
==> Installing curl
==> Pouring curl--7.84.0.arm64_monterey.bottle.tar.gz
🍺  /opt/homebrew/Cellar/curl/7.84.0: 502 files, 4MB
==> Running `brew cleanup curl`...
Removing: /opt/homebrew/Cellar/curl/7.83.0... (500 files, 4MB)
==> Upgrading node@14
  14.19.1 -> 14.20.0 

==> Installing dependencies for node@14: libuv
==> Installing node@14 dependency: libuv
==> Pouring libuv--1.44.2.arm64_monterey.bottle.tar.gz
🍺  /opt/homebrew/Cellar/libuv/1.44.2: 50 files, 3.5MB
==> Installing node@14
==> Pouring node@14--14.20.0.arm64_monterey.bottle.tar.gz
🍺  /opt/homebrew/Cellar/node@14/14.20.0: 3,955 files, 53.3MB
==> Running `brew cleanup node@14`...
Removing: /opt/homebrew/Cellar/node@14/14.19.1... (3,956 files, 53MB)
==> Upgrading pyenv
  2.2.5 -> 2.3.3 

==> Pouring pyenv--2.3.3.arm64_monterey.bottle.tar.gz
🍺  /opt/homebrew/Cellar/pyenv/2.3.3: 932 files, 3MB
==> Running `brew cleanup pyenv`...
Removing: /opt/homebrew/Cellar/pyenv/2.2.5... (877 files, 2.9MB)
==> Upgrading freetds
  1.3.10 -> 1.3.12 

==> Installing dependencies for freetds: unixodbc
==> Installing freetds dependency: unixodbc
==> Pouring unixodbc--2.3.11.arm64_monterey.bottle.tar.gz
🍺  /opt/homebrew/Cellar/unixodbc/2.3.11: 48 files, 2.3MB
==> Installing freetds
==> Pouring freetds--1.3.12.arm64_monterey.bottle.tar.gz
🍺  /opt/homebrew/Cellar/freetds/1.3.12: 1,262 files, 14MB
==> Running `brew cleanup freetds`...
Removing: /opt/homebrew/Cellar/freetds/1.3.10... (1,262 files, 14MB)
==> Upgrading mongosh
  1.3.1 -> 1.5.4 

==> Installing dependencies for mongosh: node@16
==> Installing mongosh dependency: node@16
==> Pouring node@16--16.16.0.arm64_monterey.bottle.tar.gz
🍺  /opt/homebrew/Cellar/node@16/16.16.0: 1,850 files, 45.6MB
==> Installing mongosh
==> Pouring mongosh--1.5.4.arm64_monterey.bottle.tar.gz
🍺  /opt/homebrew/Cellar/mongosh/1.5.4: 5,636 files, 33.4MB
==> Running `brew cleanup mongosh`...
Removing: /opt/homebrew/Cellar/mongosh/1.3.1... (5,694 files, 34.4MB)
==> Upgrading php
  8.1.5 -> 8.1.9 

==> Installing dependencies for php: freetype, jpeg-turbo, libtiff, webp, jpeg-xl, aom, libavif, gd, libzip and sqlite
==> Installing php dependency: freetype
==> Pouring freetype--2.12.1.arm64_monterey.bottle.tar.gz
🍺  /opt/homebrew/Cellar/freetype/2.12.1: 67 files, 2.3MB
==> Installing php dependency: jpeg-turbo
==> Pouring jpeg-turbo--2.1.3.arm64_monterey.bottle.tar.gz
🍺  /opt/homebrew/Cellar/jpeg-turbo/2.1.3: 44 files, 2.5MB
==> Installing php dependency: libtiff
==> Pouring libtiff--4.4.0_1.arm64_monterey.bottle.tar.gz
🍺  /opt/homebrew/Cellar/libtiff/4.4.0_1: 249 files, 4.8MB
==> Installing php dependency: webp
==> Pouring webp--1.2.3_1.arm64_monterey.bottle.tar.gz
🍺  /opt/homebrew/Cellar/webp/1.2.3_1: 41 files, 2.2MB
==> Installing php dependency: jpeg-xl
==> Pouring jpeg-xl--0.6.1_1.arm64_monterey.bottle.tar.gz
🍺  /opt/homebrew/Cellar/jpeg-xl/0.6.1_1: 61 files, 12.3MB
==> Installing php dependency: aom
==> Pouring aom--3.4.0.arm64_monterey.bottle.tar.gz
🍺  /opt/homebrew/Cellar/aom/3.4.0: 23 files, 8.4MB
==> Installing php dependency: libavif
==> Pouring libavif--0.10.1_1.arm64_monterey.bottle.tar.gz
🍺  /opt/homebrew/Cellar/libavif/0.10.1_1: 19 files, 452.7KB
==> Installing php dependency: gd
==> Pouring gd--2.3.3_3.arm64_monterey.bottle.tar.gz
🍺  /opt/homebrew/Cellar/gd/2.3.3_3: 33 files, 1.5MB
==> Installing php dependency: libzip
==> Pouring libzip--1.9.2.arm64_monterey.bottle.tar.gz
🍺  /opt/homebrew/Cellar/libzip/1.9.2: 145 files, 851.7KB
==> Installing php dependency: sqlite
==> Pouring sqlite--3.39.2.arm64_monterey.bottle.tar.gz
🍺  /opt/homebrew/Cellar/sqlite/3.39.2: 11 files, 4.4MB
==> Installing php
==> Pouring php--8.1.9.arm64_monterey.bottle.tar.gz
==> /opt/homebrew/Cellar/php/8.1.9/bin/pear config-set php_ini /opt/homebrew/e
==> /opt/homebrew/Cellar/php/8.1.9/bin/pear config-set php_dir /opt/homebrew/s
==> /opt/homebrew/Cellar/php/8.1.9/bin/pear config-set doc_dir /opt/homebrew/s
==> /opt/homebrew/Cellar/php/8.1.9/bin/pear config-set ext_dir /opt/homebrew/l
==> /opt/homebrew/Cellar/php/8.1.9/bin/pear config-set bin_dir /opt/homebrew/o
==> /opt/homebrew/Cellar/php/8.1.9/bin/pear config-set data_dir /opt/homebrew/
==> /opt/homebrew/Cellar/php/8.1.9/bin/pear config-set cfg_dir /opt/homebrew/s
==> /opt/homebrew/Cellar/php/8.1.9/bin/pear config-set www_dir /opt/homebrew/s
==> /opt/homebrew/Cellar/php/8.1.9/bin/pear config-set man_dir /opt/homebrew/s
==> /opt/homebrew/Cellar/php/8.1.9/bin/pear config-set test_dir /opt/homebrew/
==> /opt/homebrew/Cellar/php/8.1.9/bin/pear config-set php_bin /opt/homebrew/o
==> /opt/homebrew/Cellar/php/8.1.9/bin/pear update-channels
==> Caveats
To enable PHP in Apache add the following to httpd.conf and restart Apache:
    LoadModule php_module /opt/homebrew/opt/php/lib/httpd/modules/libphp.so

    <FilesMatch \.php$>
        SetHandler application/x-httpd-php
    </FilesMatch>

Finally, check DirectoryIndex includes index.php
    DirectoryIndex index.php index.html

The php.ini and php-fpm.ini file can be found in:
    /opt/homebrew/etc/php/8.1/

To restart php after an upgrade:
  brew services restart php
Or, if you don't want/need a background service you can just run:
  /opt/homebrew/opt/php/sbin/php-fpm --nodaemonize
==> Summary
🍺  /opt/homebrew/Cellar/php/8.1.9: 513 files, 81.7MB
==> Running `brew cleanup php`...
Removing: /opt/homebrew/Cellar/php/8.1.5... (513 files, 81.6MB)
==> Checking for dependents of upgraded formulae...
==> No broken dependents found!
==> Caveats
==> openssl@3
A CA file has been bootstrapped using certificates from the system
keychain. To add additional certificates, place .pem files in
  /opt/homebrew/etc/openssl@3/certs

and run
  /opt/homebrew/opt/openssl@3/bin/c_rehash

openssl@3 is keg-only, which means it was not symlinked into /opt/homebrew,
because macOS provides LibreSSL.

If you need to have openssl@3 first in your PATH, run:
  echo 'export PATH="/opt/homebrew/opt/openssl@3/bin:$PATH"' >> ~/.zshrc

For compilers to find openssl@3 you may need to set:
  export LDFLAGS="-L/opt/homebrew/opt/openssl@3/lib"
  export CPPFLAGS="-I/opt/homebrew/opt/openssl@3/include"

==> php
To enable PHP in Apache add the following to httpd.conf and restart Apache:
    LoadModule php_module /opt/homebrew/opt/php/lib/httpd/modules/libphp.so

    <FilesMatch \.php$>
        SetHandler application/x-httpd-php
    </FilesMatch>

Finally, check DirectoryIndex includes index.php
    DirectoryIndex index.php index.html

The php.ini and php-fpm.ini file can be found in:
    /opt/homebrew/etc/php/8.1/

To restart php after an upgrade:
  brew services restart php
Or, if you don't want/need a background service you can just run:
  /opt/homebrew/opt/php/sbin/php-fpm --nodaemonize
mehul@Mehuls-MacBook Bitcoin % git clone https://github.com/bitcoin/bitcoin.git
Cloning into 'bitcoin'...
remote: Enumerating objects: 233999, done.
remote: Total 233999 (delta 0), reused 0 (delta 0), pack-reused 233999
Receiving objects: 100% (233999/233999), 206.53 MiB | 5.87 MiB/s, done.
Resolving deltas: 100% (166384/166384), done.
mehul@Mehuls-MacBook Bitcoin % brew install berkeley-db@4
==> Auto-updated Homebrew!
Updated 1 tap (homebrew/core).

You have 8 outdated formulae installed.
You can upgrade them with brew upgrade
or list them with brew outdated.

==> Downloading https://ghcr.io/v2/homebrew/core/berkeley-db/4/manifests/4.8.3
######################################################################## 100.0%
==> Downloading https://ghcr.io/v2/homebrew/core/berkeley-db/4/blobs/sha256:ec
==> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/

==> Pouring berkeley-db@4--4.8.30.arm64_monterey.bottle.2.tar.gz
==> Caveats
berkeley-db@4 is keg-only, which means it was not symlinked into /opt/homebrew,
because this is an alternate version of another formula.

If you need to have berkeley-db@4 first in your PATH, run:
  echo 'export PATH="/opt/homebrew/opt/berkeley-db@4/bin:$PATH"' >> ~/.zshrc

For compilers to find berkeley-db@4 you may need to set:
  export LDFLAGS="-L/opt/homebrew/opt/berkeley-db@4/lib"
  export CPPFLAGS="-I/opt/homebrew/opt/berkeley-db@4/include"

==> Summary
🍺  /opt/homebrew/Cellar/berkeley-db@4/4.8.30: 4,596 files, 78.0MB
==> Running `brew cleanup berkeley-db@4`...
Disable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP.
Hide these hints with HOMEBREW_NO_ENV_HINTS (see `man brew`).
mehul@Mehuls-MacBook Bitcoin % cd bitcoin
mehul@Mehuls-MacBook bitcoin % ./autogen.sh
./configure --with-gui=no
glibtoolize: putting auxiliary files in AC_CONFIG_AUX_DIR, 'build-aux'.
glibtoolize: copying file 'build-aux/ltmain.sh'
glibtoolize: putting macros in AC_CONFIG_MACRO_DIRS, 'build-aux/m4'.
glibtoolize: copying file 'build-aux/m4/libtool.m4'
glibtoolize: copying file 'build-aux/m4/ltoptions.m4'
glibtoolize: copying file 'build-aux/m4/ltsugar.m4'
glibtoolize: copying file 'build-aux/m4/ltversion.m4'
glibtoolize: copying file 'build-aux/m4/lt~obsolete.m4'
configure.ac:40: installing 'build-aux/ar-lib'
configure.ac:35: installing 'build-aux/compile'
configure.ac:24: installing 'build-aux/config.guess'
configure.ac:24: installing 'build-aux/config.sub'
configure.ac:30: installing 'build-aux/install-sh'
configure.ac:30: installing 'build-aux/missing'
Makefile.am: installing 'build-aux/depcomp'
parallel-tests: installing 'build-aux/test-driver'
glibtoolize: putting auxiliary files in AC_CONFIG_AUX_DIR, 'build-aux'.
glibtoolize: copying file 'build-aux/ltmain.sh'
glibtoolize: putting macros in AC_CONFIG_MACRO_DIRS, 'build-aux/m4'.
glibtoolize: copying file 'build-aux/m4/libtool.m4'
glibtoolize: copying file 'build-aux/m4/ltoptions.m4'
glibtoolize: copying file 'build-aux/m4/ltsugar.m4'
glibtoolize: copying file 'build-aux/m4/ltversion.m4'
glibtoolize: copying file 'build-aux/m4/lt~obsolete.m4'
configure.ac:115: installing 'build-aux/compile'
configure.ac:50: installing 'build-aux/config.guess'
configure.ac:50: installing 'build-aux/config.sub'
configure.ac:57: installing 'build-aux/install-sh'
configure.ac:57: installing 'build-aux/missing'
src/Makefile.bench.include:97: warning: %.raw.h was already defined in condition TRUE, which includes condition ENABLE_BENCH ...
src/Makefile.am:1079:   'src/Makefile.bench.include' included from here
src/Makefile.test.include:419: ... '%.raw.h' previously defined here
src/Makefile.am:1076:   'src/Makefile.test.include' included from here
src/Makefile.am: installing 'build-aux/depcomp'
parallel-tests: installing 'build-aux/test-driver'
checking for pkg-config... /opt/homebrew/bin/pkg-config
checking pkg-config is at least version 0.9.0... yes
checking build system type... aarch64-apple-darwin21.6.0
checking host system type... aarch64-apple-darwin21.6.0
checking for a BSD-compatible install... /opt/homebrew/bin/ginstall -c
checking whether build environment is sane... yes
checking for a race-free mkdir -p... /opt/homebrew/bin/gmkdir -p
checking for gawk... no
checking for mawk... no
checking for nawk... no
checking for awk... awk
checking whether make sets $(MAKE)... yes
checking whether make supports nested variables... yes
checking whether to enable maintainer-specific portions of Makefiles... yes
checking whether make supports nested variables... (cached) yes
checking for g++... g++
checking whether the C++ compiler works... yes
checking for C++ compiler default output file name... a.out
checking for suffix of executables... 
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether the compiler supports GNU C++... yes
checking whether g++ accepts -g... yes
checking for g++ option to enable C++11 features... none needed
checking whether make supports the include directive... yes (GNU style)
checking dependency style of g++... gcc3
checking whether g++ supports C++17 features with -std=c++17... yes
checking whether std::filesystem can be used without link library... yes
checking whether the compiler supports GNU Objective C++... yes
checking whether g++ -std=c++17 accepts -g... yes
checking dependency style of g++ -std=c++17... gcc3
checking how to print strings... printf
checking for gcc... gcc
checking whether the compiler supports GNU C... yes
checking whether gcc accepts -g... yes
checking for gcc option to enable C11 features... none needed
checking whether gcc understands -c and -o together... yes
checking dependency style of gcc... gcc3
checking for a sed that does not truncate output... /usr/bin/sed
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for fgrep... /usr/bin/grep -F
checking for ld used by gcc... /usr/bin/ld
checking if the linker (/usr/bin/ld) is GNU ld... no
checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B
checking the name lister (/usr/bin/nm -B) interface... BSD nm
checking whether ln -s works... yes
checking the maximum length of command line arguments... 786432
checking how to convert aarch64-apple-darwin21.6.0 file names to aarch64-apple-darwin21.6.0 format... func_convert_file_noop
checking how to convert aarch64-apple-darwin21.6.0 file names to toolchain format... func_convert_file_noop
checking for /usr/bin/ld option to reload object files... -r
checking for file... file
checking for objdump... objdump
checking how to recognize dependent libraries... pass_all
checking for dlltool... no
checking how to associate runtime and link libraries... printf %s\n
checking for ar... ar
checking for archiver @FILE support... no
checking for strip... strip
checking for ranlib... ranlib
checking command to parse /usr/bin/nm -B output from gcc object... ok
checking for sysroot... no
checking for a working dd... /bin/dd
checking how to truncate binary pipes... /bin/dd bs=4096 count=1
checking for mt... no
checking if : is a manifest tool... no
checking for dsymutil... dsymutil
checking for nmedit... nmedit
checking for lipo... lipo
checking for otool... otool
checking for otool64... no
checking for -single_module linker flag... yes
checking for -exported_symbols_list linker flag... yes
checking for -force_load linker flag... yes
checking for stdio.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for strings.h... yes
checking for sys/stat.h... yes
checking for sys/types.h... yes
checking for unistd.h... yes
checking for dlfcn.h... yes
checking for objdir... .libs
checking if gcc supports -fno-rtti -fno-exceptions... no
checking for gcc option to produce PIC... -fno-common -DPIC
checking if gcc PIC flag -fno-common -DPIC works... yes
checking if gcc static flag -static works... no
checking if gcc supports -c -o file.o... yes
checking if gcc supports -c -o file.o... (cached) yes
checking whether the gcc linker (/usr/bin/ld) supports shared libraries... yes
checking dynamic linker characteristics... darwin21.6.0 dyld
checking how to hardcode library paths into programs... immediate
checking whether stripping libraries is possible... yes
checking if libtool supports shared libraries... yes
checking whether to build shared libraries... yes
checking whether to build static libraries... yes
checking how to run the C++ preprocessor... g++ -std=c++17 -E
checking for ld used by g++ -std=c++17... /usr/bin/ld
checking if the linker (/usr/bin/ld) is GNU ld... no
checking whether the g++ -std=c++17 linker (/usr/bin/ld) supports shared libraries... yes
checking for g++ -std=c++17 option to produce PIC... -fno-common -DPIC
checking if g++ -std=c++17 PIC flag -fno-common -DPIC works... yes
checking if g++ -std=c++17 static flag -static works... no
checking if g++ -std=c++17 supports -c -o file.o... yes
checking if g++ -std=c++17 supports -c -o file.o... (cached) yes
checking whether the g++ -std=c++17 linker (/usr/bin/ld) supports shared libraries... yes
checking dynamic linker characteristics... darwin21.6.0 dyld
checking how to hardcode library paths into programs... immediate
checking for ar... /usr/bin/ar
checking for gcov... /usr/bin/gcov
checking for llvm-cov... no
checking for lcov... no
checking for python3.6... no
checking for python3.7... no
checking for python3.8... no
checking for python3.9... no
checking for python3.10... no
checking for python3.11... no
checking for python3... /usr/bin/python3
checking for genhtml... no
checking for git... /opt/homebrew/bin/git
checking for ccache... no
checking for xgettext... /opt/homebrew/bin/xgettext
checking for hexdump... /usr/bin/hexdump
checking for objcopy... no
checking for doxygen... no
checking whether C++ compiler accepts -Werror... yes
checking whether the linker accepts -Wl,-fatal_warnings... yes
checking whether C++ compiler accepts -Wall... yes
checking whether C++ compiler accepts -Wextra... yes
checking whether C++ compiler accepts -Wgnu... no
checking whether C++ compiler accepts -Wformat -Wformat-security... yes
checking whether C++ compiler accepts -Wvla... yes
checking whether C++ compiler accepts -Wshadow-field... no
checking whether C++ compiler accepts -Wthread-safety... no
checking whether C++ compiler accepts -Wloop-analysis... no
checking whether C++ compiler accepts -Wredundant-decls... yes
checking whether C++ compiler accepts -Wunused-member-function... no
checking whether C++ compiler accepts -Wdate-time... yes
checking whether C++ compiler accepts -Wconditional-uninitialized... no
checking whether C++ compiler accepts -Wduplicated-branches... yes
checking whether C++ compiler accepts -Wduplicated-cond... yes
checking whether C++ compiler accepts -Wlogical-op... yes
checking whether C++ compiler accepts -Woverloaded-virtual... yes
checking whether C++ compiler accepts -Wsuggest-override... yes
checking whether C++ compiler accepts -Wunreachable-code-loop-increment... no
checking whether C++ compiler accepts -Wimplicit-fallthrough... yes
checking whether C++ compiler accepts -Wunused-parameter... yes
checking whether C++ compiler accepts -Wself-assign... no
checking whether C++ compiler accepts -Wdeprecated-copy... yes
checking whether C++ compiler accepts -fno-extended-identifiers... yes
checking whether C++ compiler accepts -msse4.2... no
checking whether C++ compiler accepts -msse4.1... no
checking whether C++ compiler accepts -mavx -mavx2... no
checking whether C++ compiler accepts -msse4 -msha... no
checking whether C++ compiler accepts -mpclmul... no
checking for SSE4.2 intrinsics... no
checking for SSE4.1 intrinsics... no
checking for AVX2 intrinsics... no
checking for x86 SHA-NI intrinsics... no
checking whether C++ compiler accepts -march=armv8-a+crc+crypto... yes
checking whether C++ compiler accepts -march=armv8-a+crc+crypto... (cached) yes
checking for ARMv8 CRC32 intrinsics... no
checking for ARMv8 SHA-NI intrinsics... no
checking for brew... brew
checking whether the linker accepts -Wl,-headerpad_max_install_names... yes
checking whether byte ordering is bigendian... no
checking how to run the C preprocessor... gcc -E
checking whether gcc is Clang... no
checking whether pthreads work with "-pthread" and "-lpthread"... yes
checking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE
checking whether more special flags are required for pthreads... no
checking for PTHREAD_PRIO_INHERIT... yes
checking whether std::atomic can be used without link library... yes
checking for special C compiler options needed for large files... no
checking for _FILE_OFFSET_BITS value needed for large files... no
checking for g++ -std=c++17 options needed to detect all undeclared functions... none needed
checking whether strerror_r is declared... yes
checking whether strerror_r returns char *... no
checking for library containing clock_gettime... none required
checking whether C++ compiler accepts -fPIC... yes
checking whether C++ compiler accepts -fstack-reuse=none... yes
checking whether C++ compiler accepts -Wstack-protector... yes
checking whether C++ compiler accepts -fstack-protector-all... no
checking whether C++ compiler accepts -fcf-protection=full... no
checking whether C++ compiler accepts -fstack-clash-protection... yes
checking whether C++ preprocessor accepts -D_FORTIFY_SOURCE=2... yes
checking whether C++ preprocessor accepts -U_FORTIFY_SOURCE... yes
checking whether the linker accepts -Wl,--enable-reloc-section... no
checking whether the linker accepts -Wl,--dynamicbase... no
checking whether the linker accepts -Wl,--nxcompat... no
checking whether the linker accepts -Wl,--high-entropy-va... no
checking whether the linker accepts -Wl,-z,relro... no
checking whether the linker accepts -Wl,-z,now... no
checking whether the linker accepts -Wl,-z,separate-code... no
checking whether the linker accepts -fPIE -pie... yes
checking whether the linker accepts -Wl,-dead_strip... yes
checking whether the linker accepts -Wl,-dead_strip_dylibs... yes
checking whether the linker accepts -Wl,-bind_at_load... yes
checking for endian.h... no
checking for sys/endian.h... no
checking for byteswap.h... no
checking for stdio.h... (cached) yes
checking for stdlib.h... (cached) yes
checking for unistd.h... (cached) yes
checking for strings.h... (cached) yes
checking for sys/types.h... (cached) yes
checking for sys/stat.h... (cached) yes
checking for sys/select.h... yes
checking for sys/prctl.h... no
checking for sys/sysctl.h... yes
checking for vm/vm_param.h... no
checking for sys/vmmeter.h... yes
checking for sys/resources.h... no
checking whether getifaddrs is declared... yes
checking whether ifaddrs funcs can be used without link library... yes
checking whether freeifaddrs is declared... yes
checking whether ifaddrs funcs can be used without link library... yes
checking whether fork is declared... yes
checking whether setsid is declared... yes
checking whether pipe2 is declared... no
checking for timingsafe_bcmp... yes
checking whether le16toh is declared... no
checking whether le32toh is declared... no
checking whether le64toh is declared... no
checking whether htole16 is declared... no
checking whether htole32 is declared... no
checking whether htole64 is declared... no
checking whether be16toh is declared... no
checking whether be32toh is declared... no
checking whether be64toh is declared... no
checking whether htobe16 is declared... no
checking whether htobe32 is declared... no
checking whether htobe64 is declared... no
checking whether bswap_16 is declared... no
checking whether bswap_32 is declared... no
checking whether bswap_64 is declared... no
checking for __builtin_clzl... yes
checking for __builtin_clzll... yes
checking for getmemoryinfo... no
checking for mallopt M_ARENA_MAX... no
checking for posix_fallocate... no
checking for default visibility attribute... yes
checking for dllexport attribute... no
checking for thread_local support... yes
checking for gmtime_r... yes
checking for Linux getrandom syscall... no
checking for getentropy via random.h... yes
checking for sysctl... yes
checking for sysctl KERN_ARND... no
checking for if type char equals int8_t... no
checking for fdatasync... no
checking for F_FULLFSYNC... yes
checking for O_CLOEXEC... yes
checking for __builtin_prefetch... yes
checking for _mm_prefetch... no
checking for strong getauxval support in the system headers... no
checking for std::system... yes
checking for ::_wsystem... no
checking whether to build Bitcoin Core GUI... no
checking whether main function is needed for fuzz binary... checking whether the linker accepts ... no
yes
checking for __builtin_mul_overflow... yes
checking for sqlite3 >= 3.7.17... yes
checking whether to build wallet with support for sqlite... yes
checking whether Userspace, Statically Defined Tracing tracepoints are supported... no
checking for miniupnpc/miniupnpc.h... no
checking for miniupnpc/upnpcommands.h... no
checking for miniupnpc/upnperrors.h... no
checking for natpmp.h... no
checking for boostlib >= 1.64.0 (106400)... yes
checking whether Boost.Process can be used... yes
checking for seccomp-bpf (Linux x86-64)... no
checking for libevent >= 2.1.8... yes
checking for libevent_pthreads >= 2.1.8... yes
checking if evhttp_connection_get_peer expects const char**... no
checking for libzmq >= 4... no
configure: WARNING: libzmq version 4.x or greater not found, disabling
checking for libmultiprocess... no
checking whether to build bitcoind... yes
checking whether to build bitcoin-cli... yes
checking whether to build bitcoin-tx... yes
checking whether to build bitcoin-wallet... yes
checking whether to build bitcoin-util... yes
checking whether to build experimental bitcoin-chainstate... no
checking whether to build libraries... yes
checking if ccache should be used... no
checking if wallet should be enabled... yes
checking whether to build with support for UPnP... no
checking whether to build with support for NAT-PMP... no
checking whether to build test_bitcoin... yes
checking whether to reduce exports... no
checking that generated files are newer than configure... done
configure: creating ./config.status
config.status: creating libbitcoinconsensus.pc
config.status: creating Makefile
config.status: creating src/Makefile
config.status: creating doc/man/Makefile
config.status: creating share/setup.nsi
config.status: creating share/qt/Info.plist
config.status: creating test/config.ini
config.status: creating contrib/devtools/split-debug.sh
config.status: creating src/config/bitcoin-config.h
config.status: executing depfiles commands
config.status: executing libtool commands
=== configuring in src/secp256k1 (/Users/mehul/Development/Bitcoin/bitcoin/src/secp256k1)
configure: running /bin/sh ./configure --disable-option-checking '--prefix=/usr/local'  '--with-gui=no' '--disable-shared' '--with-pic' '--enable-benchmark=no' '--enable-module-recovery' '--enable-module-schnorrsig' --cache-file=/dev/null --srcdir=.
checking build system type... aarch64-apple-darwin21.6.0
checking host system type... aarch64-apple-darwin21.6.0
checking for a BSD-compatible install... /opt/homebrew/bin/ginstall -c
checking whether build environment is sane... yes
checking for a race-free mkdir -p... /opt/homebrew/bin/gmkdir -p
checking for gawk... no
checking for mawk... no
checking for nawk... no
checking for awk... awk
checking whether make sets $(MAKE)... yes
checking whether make supports nested variables... yes
checking whether make supports nested variables... (cached) yes
checking for gcc... gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.out
checking for suffix of executables... 
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether the compiler supports GNU C... yes
checking whether gcc accepts -g... yes
checking for gcc option to enable C11 features... none needed
checking whether gcc understands -c and -o together... yes
checking whether make supports the include directive... yes (GNU style)
checking dependency style of gcc... gcc3
checking dependency style of gcc... gcc3
checking for ar... ar
checking the archiver (ar) interface... ar
checking how to print strings... printf
checking for a sed that does not truncate output... /usr/bin/sed
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for fgrep... /usr/bin/grep -F
checking for ld used by gcc... /usr/bin/ld
checking if the linker (/usr/bin/ld) is GNU ld... no
checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B
checking the name lister (/usr/bin/nm -B) interface... BSD nm
checking whether ln -s works... yes
checking the maximum length of command line arguments... 786432
checking how to convert aarch64-apple-darwin21.6.0 file names to aarch64-apple-darwin21.6.0 format... func_convert_file_noop
checking how to convert aarch64-apple-darwin21.6.0 file names to toolchain format... func_convert_file_noop
checking for /usr/bin/ld option to reload object files... -r
checking for file... file
checking for objdump... objdump
checking how to recognize dependent libraries... pass_all
checking for dlltool... no
checking how to associate runtime and link libraries... printf %s\n
checking for archiver @FILE support... no
checking for strip... strip
checking for ranlib... ranlib
checking command to parse /usr/bin/nm -B output from gcc object... ok
checking for sysroot... no
checking for a working dd... /bin/dd
checking how to truncate binary pipes... /bin/dd bs=4096 count=1
checking for mt... no
checking if : is a manifest tool... no
checking for dsymutil... dsymutil
checking for nmedit... nmedit
checking for lipo... lipo
checking for otool... otool
checking for otool64... no
checking for -single_module linker flag... yes
checking for -exported_symbols_list linker flag... yes
checking for -force_load linker flag... yes
checking for stdio.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for strings.h... yes
checking for sys/stat.h... yes
checking for sys/types.h... yes
checking for unistd.h... yes
checking for dlfcn.h... yes
checking for objdir... .libs
checking if gcc supports -fno-rtti -fno-exceptions... no
checking for gcc option to produce PIC... -fno-common -DPIC
checking if gcc PIC flag -fno-common -DPIC works... yes
checking if gcc static flag -static works... no
checking if gcc supports -c -o file.o... yes
checking if gcc supports -c -o file.o... (cached) yes
checking whether the gcc linker (/usr/bin/ld) supports shared libraries... yes
checking dynamic linker characteristics... darwin21.6.0 dyld
checking how to hardcode library paths into programs... immediate
checking whether stripping libraries is possible... yes
checking if libtool supports shared libraries... yes
checking whether to build shared libraries... no
checking whether to build static libraries... yes
checking for brew... brew
checking if gcc supports -Werror=unknown-warning-option... no
checking if gcc supports -std=c89 -pedantic -Wno-long-long -Wnested-externs -Wshadow -Wstrict-prototypes -Wundef... yes
checking if gcc supports -Wno-overlength-strings... yes
checking if gcc supports -Wall... yes
checking if gcc supports -Wno-unused-function... yes
checking if gcc supports -Wextra... yes
checking if gcc supports -Wcast-align... yes
checking if gcc supports -Wcast-align=strict... yes
checking if gcc supports -Wconditional-uninitialized... no
checking if gcc supports -fvisibility=hidden... yes
checking for x86_64 assembly availability... no
checking that generated files are newer than configure... done
configure: creating ./config.status
config.status: creating Makefile
config.status: creating libsecp256k1.pc
config.status: creating src/libsecp256k1-config.h
config.status: executing depfiles commands
config.status: executing libtool commands

Build Options:
  with external callbacks = no
  with benchmarks         = no
  with tests              = yes
  with coverage           = no
  with examples           = no
  module ecdh             = no
  module recovery         = yes
  module extrakeys        = yes
  module schnorrsig       = yes

  asm                     = no
  ecmult window size      = 15
  ecmult gen prec. bits   = 4

  valgrind                = no
  CC                      = gcc
  CPPFLAGS                =  
  SECP_CFLAGS             = -O2  -std=c89 -pedantic -Wno-long-long -Wnested-externs -Wshadow -Wstrict-prototypes -Wundef -Wno-overlength-strings -Wall -Wno-unused-function -Wextra -Wcast-align -Wcast-align=strict -fvisibility=hidden 
  CFLAGS                  = -g -O2
  LDFLAGS                 = 

Options used to compile and link:
  external signer = yes
  multiprocess    = no
  with experimental syscall sandbox support = no
  with libs       = yes
  with wallet     = yes
    with sqlite   = yes
    with bdb      = yes
  with gui / qt   = no
  with zmq        = no
  with test       = yes
  with fuzz binary = yes
  with bench      = yes
  with upnp       = no
  with natpmp     = no
  use asm         = yes
  USDT tracing    = no
  sanitizers      = 
  debug enabled   = no
  gprof enabled   = no
  werror          = no
  LTO             = no

  target os       = darwin21.6.0
  build os        = darwin21.6.0

  CC              = gcc
  CFLAGS          = -pthread -g -O2
  CPPFLAGS        =   -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2  -DHAVE_BUILD_INFO -DMAC_OSX -DOBJC_OLD_DISPATCH_PROTOTYPES=0 -DPROVIDE_FUZZ_MAIN_FUNCTION 
  CXX             = g++ -std=c++17
  CXXFLAGS        =    -fstack-reuse=none -Wstack-protector -fstack-clash-protection  -Wall -Wextra -Wformat -Wformat-security -Wvla -Wredundant-decls -Wdate-time -Wduplicated-branches -Wduplicated-cond -Wlogical-op -Woverloaded-virtual -Wsuggest-override -Wimplicit-fallthrough  -Wno-unused-parameter -Wno-deprecated-copy    -fno-extended-identifiers -g -O2
  LDFLAGS         =  -lpthread  -pie -Wl,-bind_at_load   -Wl,-headerpad_max_install_names -Wl,-dead_strip -Wl,-dead_strip_dylibs 
  AR              = /usr/bin/ar
  ARFLAGS         = cr

mehul@Mehuls-MacBook bitcoin % make 
Making all in src
  CXX      bitcoind-bitcoind.o
  CXX      init/bitcoind-bitcoind.o
  CXX      libbitcoin_node_a-addrdb.o
  CXX      libbitcoin_node_a-addrman.o
  CXX      libbitcoin_node_a-banman.o
  CXX      libbitcoin_node_a-blockencodings.o
  CXX      libbitcoin_node_a-blockfilter.o
  CXX      libbitcoin_node_a-chain.o
  CXX      consensus/libbitcoin_node_a-tx_verify.o
  CXX      libbitcoin_node_a-dbwrapper.o
  CXX      libbitcoin_node_a-deploymentstatus.o
  CXX      libbitcoin_node_a-flatfile.o
  CXX      libbitcoin_node_a-httprpc.o
  CXX      libbitcoin_node_a-httpserver.o
  CXX      libbitcoin_node_a-i2p.o
  CXX      index/libbitcoin_node_a-base.o
  CXX      index/libbitcoin_node_a-blockfilterindex.o
  CXX      index/libbitcoin_node_a-coinstatsindex.o
  CXX      index/libbitcoin_node_a-txindex.o
  CXX      libbitcoin_node_a-init.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./torcontrol.h:14,
                 from init.cpp:65:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./torcontrol.h:14,
                 from init.cpp:65:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(TorControlConnection&, const TorControlReply&)>':
./torcontrol.h:87:83:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(TorControlConnection&, const TorControlReply&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, TorControlConnection&, const TorControlReply&)>; Mutex = boost::signals2::mutex; R = void; Args = {TorControlConnection&, const TorControlReply&}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
  CXX      kernel/libbitcoin_node_a-chain.o
  CXX      kernel/libbitcoin_node_a-checks.o
  CXX      kernel/libbitcoin_node_a-coinstats.o
  CXX      kernel/libbitcoin_node_a-context.o
  CXX      kernel/libbitcoin_node_a-mempool_persist.o
  CXX      libbitcoin_node_a-mapport.o
  CXX      libbitcoin_node_a-net.o
  CXX      libbitcoin_node_a-net_processing.o
  CXX      libbitcoin_node_a-netgroup.o
  CXX      node/libbitcoin_node_a-blockstorage.o
  CXX      node/libbitcoin_node_a-caches.o
  CXX      node/libbitcoin_node_a-chainstate.o
  CXX      node/libbitcoin_node_a-coin.o
  CXX      node/libbitcoin_node_a-connection_types.o
  CXX      node/libbitcoin_node_a-context.o
  CXX      node/libbitcoin_node_a-eviction.o
  CXX      node/libbitcoin_node_a-interface_ui.o
In file included from /opt/homebrew//include/boost/signals2/optional_last_value.hpp:16,
                 from node/interface_ui.cpp:9:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from node/interface_ui.cpp:10:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::optional_last_value<bool> >':
node/interface_ui.cpp:15:118:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int)>; Mutex = boost::signals2::mutex; R = bool; Args = {const bilingual_str&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned int}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::optional_last_value<bool> >':
node/interface_ui.cpp:16:116:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; Mutex = boost::signals2::mutex; R = bool; Args = {const bilingual_str&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&)>':
node/interface_ui.cpp:17:65:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
node/interface_ui.cpp:18:64:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(int)>':
node/interface_ui.cpp:19:81:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
node/interface_ui.cpp:20:80:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int, bool)>':
node/interface_ui.cpp:22:66:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int, bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int, bool}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(SynchronizationState, const CBlockIndex*)>':
node/interface_ui.cpp:23:68:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(SynchronizationState, const CBlockIndex*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, SynchronizationState, const CBlockIndex*)>; Mutex = boost::signals2::mutex; R = void; Args = {SynchronizationState, const CBlockIndex*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from node/interface_ui.cpp:10:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:241:52:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int)>; Mutex = boost::signals2::mutex; R = bool; Args = {const bilingual_str&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = boost::optional<bool>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:722:25:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int)>; Mutex = boost::signals2::mutex; R = bool; Args = {const bilingual_str&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = boost::optional<bool>]'
node/interface_ui.cpp:47:167:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:241:52:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; Mutex = boost::signals2::mutex; R = bool; Args = {const bilingual_str&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = boost::optional<bool>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:722:25:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; Mutex = boost::signals2::mutex; R = bool; Args = {const bilingual_str&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = boost::optional<bool>]'
node/interface_ui.cpp:48:207:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:241:52:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:722:25:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
node/interface_ui.cpp:49:99:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:241:52:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:722:25:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
node/interface_ui.cpp:50:71:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int), boost::function<void(int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:241:52:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:722:25:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
node/interface_ui.cpp:51:126:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(int), boost::function<void(int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(int), boost::function<void(int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(int), boost::function<void(int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(int), boost::function<void(int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:241:52:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:722:25:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
node/interface_ui.cpp:52:121:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int, bool), boost::function<void(const std::__cxx11::basic_string<char>&, int, bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:241:52:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int, bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int, bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:722:25:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int, bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int, bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
node/interface_ui.cpp:54:136:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int, bool), boost::function<void(const std::__cxx11::basic_string<char>&, int, bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int, bool), boost::function<void(const std::__cxx11::basic_string<char>&, int, bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int, bool), boost::function<void(const std::__cxx11::basic_string<char>&, int, bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int, bool), boost::function<void(const std::__cxx11::basic_string<char>&, int, bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(SynchronizationState, const CBlockIndex*), boost::function<void(SynchronizationState, const CBlockIndex*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:241:52:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(SynchronizationState, const CBlockIndex*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, SynchronizationState, const CBlockIndex*)>; Mutex = boost::signals2::mutex; R = void; Args = {SynchronizationState, const CBlockIndex*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:722:25:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(SynchronizationState, const CBlockIndex*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, SynchronizationState, const CBlockIndex*)>; Mutex = boost::signals2::mutex; R = void; Args = {SynchronizationState, const CBlockIndex*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
node/interface_ui.cpp:55:123:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(SynchronizationState, const CBlockIndex*), boost::function<void(SynchronizationState, const CBlockIndex*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(SynchronizationState, const CBlockIndex*), boost::function<void(SynchronizationState, const CBlockIndex*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(SynchronizationState, const CBlockIndex*), boost::function<void(SynchronizationState, const CBlockIndex*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(SynchronizationState, const CBlockIndex*), boost::function<void(SynchronizationState, const CBlockIndex*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      node/libbitcoin_node_a-interfaces.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from node/interfaces.cpp:58:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
  CXX      node/libbitcoin_node_a-mempool_args.o
  CXX      node/libbitcoin_node_a-mempool_persist_args.o
  CXX      node/libbitcoin_node_a-miner.o
  CXX      node/libbitcoin_node_a-minisketchwrapper.o
  CXX      node/libbitcoin_node_a-psbt.o
  CXX      node/libbitcoin_node_a-transaction.o
  CXX      node/libbitcoin_node_a-validation_cache_args.o
  CXX      libbitcoin_node_a-noui.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from noui.cpp:14:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
  CXX      policy/libbitcoin_node_a-fees.o
  CXX      policy/libbitcoin_node_a-fees_args.o
  CXX      policy/libbitcoin_node_a-packages.o
  CXX      policy/libbitcoin_node_a-rbf.o
  CXX      policy/libbitcoin_node_a-settings.o
  CXX      libbitcoin_node_a-pow.o
  CXX      libbitcoin_node_a-rest.o
  CXX      rpc/libbitcoin_node_a-blockchain.o
  CXX      rpc/libbitcoin_node_a-fees.o
  CXX      rpc/libbitcoin_node_a-mempool.o
  CXX      rpc/libbitcoin_node_a-mining.o
  CXX      rpc/libbitcoin_node_a-net.o
  CXX      rpc/libbitcoin_node_a-node.o
  CXX      rpc/libbitcoin_node_a-output_script.o
  CXX      rpc/libbitcoin_node_a-rawtransaction.o
  CXX      rpc/libbitcoin_node_a-server.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from rpc/server.cpp:16:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from rpc/server.cpp:16:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
rpc/server.cpp:68:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from rpc/server.cpp:16:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:241:52:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:722:25:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
rpc/server.cpp:293:25:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      rpc/libbitcoin_node_a-server_util.o
  CXX      rpc/libbitcoin_node_a-signmessage.o
  CXX      rpc/libbitcoin_node_a-txoutproof.o
  CXX      script/libbitcoin_node_a-sigcache.o
  CXX      libbitcoin_node_a-shutdown.o
  CXX      libbitcoin_node_a-signet.o
  CXX      libbitcoin_node_a-timedata.o
  CXX      libbitcoin_node_a-torcontrol.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./torcontrol.h:14,
                 from torcontrol.cpp:6:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./torcontrol.h:14,
                 from torcontrol.cpp:6:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(TorControlConnection&, const TorControlReply&)>':
./torcontrol.h:87:83:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(TorControlConnection&, const TorControlReply&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, TorControlConnection&, const TorControlReply&)>; Mutex = boost::signals2::mutex; R = void; Args = {TorControlConnection&, const TorControlReply&}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./torcontrol.h:14,
                 from torcontrol.cpp:6:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(TorControlConnection&, const TorControlReply&), boost::function<void(TorControlConnection&, const TorControlReply&)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:241:52:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(TorControlConnection&, const TorControlReply&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, TorControlConnection&, const TorControlReply&)>; Mutex = boost::signals2::mutex; R = void; Args = {TorControlConnection&, const TorControlReply&}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:722:25:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(TorControlConnection&, const TorControlReply&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, TorControlConnection&, const TorControlReply&)>; Mutex = boost::signals2::mutex; R = void; Args = {TorControlConnection&, const TorControlReply&}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
torcontrol.cpp:90:36:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(TorControlConnection&, const TorControlReply&), boost::function<void(TorControlConnection&, const TorControlReply&)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(TorControlConnection&, const TorControlReply&), boost::function<void(TorControlConnection&, const TorControlReply&)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(TorControlConnection&, const TorControlReply&), boost::function<void(TorControlConnection&, const TorControlReply&)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(TorControlConnection&, const TorControlReply&), boost::function<void(TorControlConnection&, const TorControlReply&)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      libbitcoin_node_a-txdb.o
  CXX      libbitcoin_node_a-txmempool.o
  CXX      libbitcoin_node_a-txorphanage.o
  CXX      libbitcoin_node_a-txrequest.o
  CXX      libbitcoin_node_a-validation.o
  CXX      libbitcoin_node_a-validationinterface.o
  CXX      libbitcoin_node_a-versionbits.o
  CXX      wallet/libbitcoin_node_a-init.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/init.cpp:23:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/init.cpp:23:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/init.cpp:23:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  AR       libbitcoin_node.a
  CXX      wallet/libbitcoin_wallet_a-coincontrol.o
  CXX      wallet/libbitcoin_wallet_a-context.o
  CXX      wallet/libbitcoin_wallet_a-crypter.o
  CXX      wallet/libbitcoin_wallet_a-db.o
  CXX      wallet/libbitcoin_wallet_a-dump.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/dump.cpp:9:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/dump.cpp:9:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/dump.cpp:9:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/libbitcoin_wallet_a-external_signer_scriptpubkeyman.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/external_signer_scriptpubkeyman.h:8,
                 from wallet/external_signer_scriptpubkeyman.cpp:7:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/external_signer_scriptpubkeyman.h:8,
                 from wallet/external_signer_scriptpubkeyman.cpp:7:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/external_signer_scriptpubkeyman.h:8,
                 from wallet/external_signer_scriptpubkeyman.cpp:7:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/libbitcoin_wallet_a-feebumper.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/feebumper.cpp:15:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/feebumper.cpp:15:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/feebumper.cpp:15:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/libbitcoin_wallet_a-fees.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/fees.cpp:9:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/fees.cpp:9:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/fees.cpp:9:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/libbitcoin_wallet_a-interfaces.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/interfaces.cpp:26:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/interfaces.cpp:26:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/interfaces.cpp:26:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/libbitcoin_wallet_a-load.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/spend.h:13,
                 from wallet/load.cpp:16:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/spend.h:13,
                 from wallet/load.cpp:16:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/spend.h:13,
                 from wallet/load.cpp:16:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/libbitcoin_wallet_a-receive.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/receive.cpp:7:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/receive.cpp:7:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/receive.cpp:7:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/rpc/libbitcoin_wallet_a-addresses.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/rpc/addresses.cpp:10:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/rpc/addresses.cpp:10:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/rpc/addresses.cpp:10:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/rpc/libbitcoin_wallet_a-backup.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/rpc/backup.cpp:22:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/rpc/backup.cpp:22:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/rpc/backup.cpp:22:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/rpc/libbitcoin_wallet_a-coins.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/rpc/coins.cpp:10:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/rpc/coins.cpp:10:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/rpc/coins.cpp:10:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/rpc/libbitcoin_wallet_a-encrypt.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/rpc/encrypt.cpp:7:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/rpc/encrypt.cpp:7:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/rpc/encrypt.cpp:7:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/rpc/libbitcoin_wallet_a-spend.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/spend.h:13,
                 from wallet/rpc/spend.cpp:19:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/spend.h:13,
                 from wallet/rpc/spend.cpp:19:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/spend.h:13,
                 from wallet/rpc/spend.cpp:19:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/rpc/libbitcoin_wallet_a-signmessage.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/rpc/signmessage.cpp:9:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/rpc/signmessage.cpp:9:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/rpc/signmessage.cpp:9:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/rpc/libbitcoin_wallet_a-transactions.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/rpc/transactions.cpp:10:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/rpc/transactions.cpp:10:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/rpc/transactions.cpp:10:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/rpc/libbitcoin_wallet_a-util.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/rpc/util.cpp:11:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/rpc/util.cpp:11:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/rpc/util.cpp:11:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/rpc/libbitcoin_wallet_a-wallet.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/rpc/wallet.cpp:12:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/rpc/wallet.cpp:12:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/rpc/wallet.cpp:12:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/libbitcoin_wallet_a-scriptpubkeyman.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from wallet/scriptpubkeyman.cpp:16:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from wallet/scriptpubkeyman.cpp:16:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from wallet/scriptpubkeyman.cpp:16:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:241:52:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:722:25:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
wallet/scriptpubkeyman.cpp:890:31:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:241:52:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:722:25:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
wallet/scriptpubkeyman.cpp:1216:33:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/libbitcoin_wallet_a-spend.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/spend.cpp:18:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/spend.cpp:18:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/spend.cpp:18:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/libbitcoin_wallet_a-transaction.o
  CXX      wallet/libbitcoin_wallet_a-wallet.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/wallet.cpp:6:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/wallet.cpp:6:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/wallet.cpp:6:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:241:52:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:722:25:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
wallet/wallet.cpp:778:24:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:241:52:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:722:25:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
wallet/wallet.cpp:888:29:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:241:52:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:722:25:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
wallet/wallet.cpp:1729:17:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:241:52:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:722:25:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
wallet/wallet.cpp:2261:29:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/libbitcoin_wallet_a-walletdb.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/walletdb.cpp:23:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/walletdb.cpp:23:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/walletdb.cpp:23:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/libbitcoin_wallet_a-walletutil.o
  CXX      wallet/libbitcoin_wallet_a-coinselection.o
  CXX      wallet/libbitcoin_wallet_a-sqlite.o
  CXX      wallet/libbitcoin_wallet_a-bdb.o
  CXX      wallet/libbitcoin_wallet_a-salvage.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/salvage.cpp:11:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/salvage.cpp:11:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/salvage.cpp:11:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  AR       libbitcoin_wallet.a
  CXX      libbitcoin_common_a-base58.o
  CXX      libbitcoin_common_a-bech32.o
  CXX      libbitcoin_common_a-chainparams.o
  CXX      libbitcoin_common_a-coins.o
  CXX      common/libbitcoin_common_a-bloom.o
  CXX      libbitcoin_common_a-compressor.o
  CXX      libbitcoin_common_a-core_read.o
  CXX      libbitcoin_common_a-core_write.o
  CXX      libbitcoin_common_a-deploymentinfo.o
  CXX      libbitcoin_common_a-external_signer.o
  CXX      init/libbitcoin_common_a-common.o
  CXX      libbitcoin_common_a-key.o
  CXX      libbitcoin_common_a-key_io.o
  CXX      libbitcoin_common_a-merkleblock.o
  CXX      libbitcoin_common_a-net_types.o
  CXX      libbitcoin_common_a-netaddress.o
  CXX      libbitcoin_common_a-netbase.o
  CXX      libbitcoin_common_a-net_permissions.o
  CXX      libbitcoin_common_a-outputtype.o
  CXX      policy/libbitcoin_common_a-feerate.o
  CXX      policy/libbitcoin_common_a-policy.o
  CXX      libbitcoin_common_a-protocol.o
  CXX      libbitcoin_common_a-psbt.o
  CXX      rpc/libbitcoin_common_a-rawtransaction_util.o
  CXX      rpc/libbitcoin_common_a-external_signer.o
  CXX      rpc/libbitcoin_common_a-util.o
  CXX      libbitcoin_common_a-scheduler.o
  CXX      script/libbitcoin_common_a-descriptor.o
  CXX      script/libbitcoin_common_a-miniscript.o
  CXX      script/libbitcoin_common_a-sign.o
  CXX      script/libbitcoin_common_a-signingprovider.o
  CXX      script/libbitcoin_common_a-standard.o
  CXX      libbitcoin_common_a-warnings.o
  AR       libbitcoin_common.a
  CXX      support/libbitcoin_util_a-lockedpool.o
  CXX      libbitcoin_util_a-chainparamsbase.o
  CXX      libbitcoin_util_a-clientversion.o
  CXX      libbitcoin_util_a-fs.o
  CXX      interfaces/libbitcoin_util_a-echo.o
  CXX      interfaces/libbitcoin_util_a-handler.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from interfaces/handler.cpp:8:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
  CXX      interfaces/libbitcoin_util_a-init.o
  CXX      libbitcoin_util_a-logging.o
  CXX      libbitcoin_util_a-random.o
  CXX      libbitcoin_util_a-randomenv.o
  CXX      rpc/libbitcoin_util_a-request.o
  CXX      support/libbitcoin_util_a-cleanse.o
  CXX      libbitcoin_util_a-sync.o
  CXX      libbitcoin_util_a-threadinterrupt.o
  CXX      util/libbitcoin_util_a-asmap.o
  CXX      util/libbitcoin_util_a-bip32.o
  CXX      util/libbitcoin_util_a-bytevectorhash.o
  CXX      util/libbitcoin_util_a-check.o
  CXX      util/libbitcoin_util_a-error.o
  CXX      util/libbitcoin_util_a-fees.o
  CXX      util/libbitcoin_util_a-getuniquepath.o
  CXX      util/libbitcoin_util_a-hasher.o
  CXX      util/libbitcoin_util_a-sock.o
  CXX      util/libbitcoin_util_a-syserror.o
  CXX      util/libbitcoin_util_a-system.o
In file included from /opt/homebrew//include/boost/system/detail/error_category_impl.hpp:15,
                 from /opt/homebrew//include/boost/system/error_category.hpp:11,
                 from /opt/homebrew//include/boost/filesystem/path_traits.hpp:14,
                 from /opt/homebrew//include/boost/filesystem/path.hpp:21,
                 from /opt/homebrew//include/boost/process/detail/traits/cmd_or_exe.hpp:14,
                 from /opt/homebrew//include/boost/process/detail/basic_cmd.hpp:13,
                 from /opt/homebrew//include/boost/process/args.hpp:33,
                 from /opt/homebrew//include/boost/process.hpp:22,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/system/detail/error_code.hpp:55:13: warning: redundant redeclaration of 'std::size_t boost::system::hash_value(const boost::system::error_code&)' in same scope [-Wredundant-decls]
   55 | std::size_t hash_value( error_code const & ec );
      |             ^~~~~~~~~~
In file included from /opt/homebrew//include/boost/system/error_category.hpp:10,
                 from /opt/homebrew//include/boost/filesystem/path_traits.hpp:14,
                 from /opt/homebrew//include/boost/filesystem/path.hpp:21,
                 from /opt/homebrew//include/boost/process/detail/traits/cmd_or_exe.hpp:14,
                 from /opt/homebrew//include/boost/process/detail/basic_cmd.hpp:13,
                 from /opt/homebrew//include/boost/process/args.hpp:33,
                 from /opt/homebrew//include/boost/process.hpp:22,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/system/detail/error_category.hpp:55:24: note: previous declaration of 'std::size_t boost::system::hash_value(const boost::system::error_code&)'
   55 |     friend std::size_t hash_value( error_code const & ec );
      |                        ^~~~~~~~~~
In file included from /opt/homebrew//include/boost/asio/error.hpp:358,
                 from /opt/homebrew//include/boost/asio/detail/impl/posix_tss_ptr.ipp:24,
                 from /opt/homebrew//include/boost/asio/detail/posix_tss_ptr.hpp:76,
                 from /opt/homebrew//include/boost/asio/detail/tss_ptr.hpp:27,
                 from /opt/homebrew//include/boost/asio/detail/call_stack.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/thread_context.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/recycling_allocator.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/handler_alloc_helpers.hpp:21,
                 from /opt/homebrew//include/boost/asio/detail/executor_function.hpp:19,
                 from /opt/homebrew//include/boost/asio/execution/any_executor.hpp:23,
                 from /opt/homebrew//include/boost/asio/execution.hpp:19,
                 from /opt/homebrew//include/boost/process/detail/posix/on_exit.hpp:9,
                 from /opt/homebrew//include/boost/process/detail/on_exit.hpp:12,
                 from /opt/homebrew//include/boost/process/async.hpp:33,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/asio/impl/error.ipp:35:15: warning: 'virtual const char* boost::asio::error::detail::netdb_category::name() const' can be marked override [-Wsuggest-override]
   35 |   const char* name() const BOOST_ASIO_ERROR_CATEGORY_NOEXCEPT
      |               ^~~~
/opt/homebrew//include/boost/asio/impl/error.ipp:40:15: warning: 'virtual std::string boost::asio::error::detail::netdb_category::message(int) const' can be marked override [-Wsuggest-override]
   40 |   std::string message(int value) const
      |               ^~~~~~~
In file included from /opt/homebrew//include/boost/system/error_category.hpp:11,
                 from /opt/homebrew//include/boost/filesystem/path_traits.hpp:14,
                 from /opt/homebrew//include/boost/filesystem/path.hpp:21,
                 from /opt/homebrew//include/boost/process/detail/traits/cmd_or_exe.hpp:14,
                 from /opt/homebrew//include/boost/process/detail/basic_cmd.hpp:13,
                 from /opt/homebrew//include/boost/process/args.hpp:33,
                 from /opt/homebrew//include/boost/process.hpp:22,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/system/detail/error_category_impl.hpp:44:21: warning: 'virtual const char* boost::system::error_category::message(int, char*, std::size_t) const' was hidden [-Woverloaded-virtual]
   44 | inline char const * error_category::message( int ev, char * buffer, std::size_t len ) const BOOST_NOEXCEPT
      |                     ^~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/asio/error.hpp:358,
                 from /opt/homebrew//include/boost/asio/detail/impl/posix_tss_ptr.ipp:24,
                 from /opt/homebrew//include/boost/asio/detail/posix_tss_ptr.hpp:76,
                 from /opt/homebrew//include/boost/asio/detail/tss_ptr.hpp:27,
                 from /opt/homebrew//include/boost/asio/detail/call_stack.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/thread_context.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/recycling_allocator.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/handler_alloc_helpers.hpp:21,
                 from /opt/homebrew//include/boost/asio/detail/executor_function.hpp:19,
                 from /opt/homebrew//include/boost/asio/execution/any_executor.hpp:23,
                 from /opt/homebrew//include/boost/asio/execution.hpp:19,
                 from /opt/homebrew//include/boost/process/detail/posix/on_exit.hpp:9,
                 from /opt/homebrew//include/boost/process/detail/on_exit.hpp:12,
                 from /opt/homebrew//include/boost/process/async.hpp:33,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/asio/impl/error.ipp:40:15: note:   by 'virtual std::string boost::asio::error::detail::netdb_category::message(int) const'
   40 |   std::string message(int value) const
      |               ^~~~~~~
/opt/homebrew//include/boost/asio/impl/error.ipp:67:15: warning: 'virtual const char* boost::asio::error::detail::addrinfo_category::name() const' can be marked override [-Wsuggest-override]
   67 |   const char* name() const BOOST_ASIO_ERROR_CATEGORY_NOEXCEPT
      |               ^~~~
/opt/homebrew//include/boost/asio/impl/error.ipp:72:15: warning: 'virtual std::string boost::asio::error::detail::addrinfo_category::message(int) const' can be marked override [-Wsuggest-override]
   72 |   std::string message(int value) const
      |               ^~~~~~~
In file included from /opt/homebrew//include/boost/system/error_category.hpp:11,
                 from /opt/homebrew//include/boost/filesystem/path_traits.hpp:14,
                 from /opt/homebrew//include/boost/filesystem/path.hpp:21,
                 from /opt/homebrew//include/boost/process/detail/traits/cmd_or_exe.hpp:14,
                 from /opt/homebrew//include/boost/process/detail/basic_cmd.hpp:13,
                 from /opt/homebrew//include/boost/process/args.hpp:33,
                 from /opt/homebrew//include/boost/process.hpp:22,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/system/detail/error_category_impl.hpp:44:21: warning: 'virtual const char* boost::system::error_category::message(int, char*, std::size_t) const' was hidden [-Woverloaded-virtual]
   44 | inline char const * error_category::message( int ev, char * buffer, std::size_t len ) const BOOST_NOEXCEPT
      |                     ^~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/asio/error.hpp:358,
                 from /opt/homebrew//include/boost/asio/detail/impl/posix_tss_ptr.ipp:24,
                 from /opt/homebrew//include/boost/asio/detail/posix_tss_ptr.hpp:76,
                 from /opt/homebrew//include/boost/asio/detail/tss_ptr.hpp:27,
                 from /opt/homebrew//include/boost/asio/detail/call_stack.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/thread_context.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/recycling_allocator.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/handler_alloc_helpers.hpp:21,
                 from /opt/homebrew//include/boost/asio/detail/executor_function.hpp:19,
                 from /opt/homebrew//include/boost/asio/execution/any_executor.hpp:23,
                 from /opt/homebrew//include/boost/asio/execution.hpp:19,
                 from /opt/homebrew//include/boost/process/detail/posix/on_exit.hpp:9,
                 from /opt/homebrew//include/boost/process/detail/on_exit.hpp:12,
                 from /opt/homebrew//include/boost/process/async.hpp:33,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/asio/impl/error.ipp:72:15: note:   by 'virtual std::string boost::asio::error::detail::addrinfo_category::message(int) const'
   72 |   std::string message(int value) const
      |               ^~~~~~~
/opt/homebrew//include/boost/asio/impl/error.ipp:97:15: warning: 'virtual const char* boost::asio::error::detail::misc_category::name() const' can be marked override [-Wsuggest-override]
   97 |   const char* name() const BOOST_ASIO_ERROR_CATEGORY_NOEXCEPT
      |               ^~~~
/opt/homebrew//include/boost/asio/impl/error.ipp:102:15: warning: 'virtual std::string boost::asio::error::detail::misc_category::message(int) const' can be marked override [-Wsuggest-override]
  102 |   std::string message(int value) const
      |               ^~~~~~~
In file included from /opt/homebrew//include/boost/system/error_category.hpp:11,
                 from /opt/homebrew//include/boost/filesystem/path_traits.hpp:14,
                 from /opt/homebrew//include/boost/filesystem/path.hpp:21,
                 from /opt/homebrew//include/boost/process/detail/traits/cmd_or_exe.hpp:14,
                 from /opt/homebrew//include/boost/process/detail/basic_cmd.hpp:13,
                 from /opt/homebrew//include/boost/process/args.hpp:33,
                 from /opt/homebrew//include/boost/process.hpp:22,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/system/detail/error_category_impl.hpp:44:21: warning: 'virtual const char* boost::system::error_category::message(int, char*, std::size_t) const' was hidden [-Woverloaded-virtual]
   44 | inline char const * error_category::message( int ev, char * buffer, std::size_t len ) const BOOST_NOEXCEPT
      |                     ^~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/asio/error.hpp:358,
                 from /opt/homebrew//include/boost/asio/detail/impl/posix_tss_ptr.ipp:24,
                 from /opt/homebrew//include/boost/asio/detail/posix_tss_ptr.hpp:76,
                 from /opt/homebrew//include/boost/asio/detail/tss_ptr.hpp:27,
                 from /opt/homebrew//include/boost/asio/detail/call_stack.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/thread_context.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/recycling_allocator.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/handler_alloc_helpers.hpp:21,
                 from /opt/homebrew//include/boost/asio/detail/executor_function.hpp:19,
                 from /opt/homebrew//include/boost/asio/execution/any_executor.hpp:23,
                 from /opt/homebrew//include/boost/asio/execution.hpp:19,
                 from /opt/homebrew//include/boost/process/detail/posix/on_exit.hpp:9,
                 from /opt/homebrew//include/boost/process/detail/on_exit.hpp:12,
                 from /opt/homebrew//include/boost/process/async.hpp:33,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/asio/impl/error.ipp:102:15: note:   by 'virtual std::string boost::asio::error::detail::misc_category::message(int) const'
  102 |   std::string message(int value) const
      |               ^~~~~~~
In file included from /opt/homebrew//include/boost/asio/detail/thread_info_base.hpp:27,
                 from /opt/homebrew//include/boost/asio/detail/recycling_allocator.hpp:21,
                 from /opt/homebrew//include/boost/asio/detail/handler_alloc_helpers.hpp:21,
                 from /opt/homebrew//include/boost/asio/detail/executor_function.hpp:19,
                 from /opt/homebrew//include/boost/asio/execution/any_executor.hpp:23,
                 from /opt/homebrew//include/boost/asio/execution.hpp:19,
                 from /opt/homebrew//include/boost/process/detail/posix/on_exit.hpp:9,
                 from /opt/homebrew//include/boost/process/detail/on_exit.hpp:12,
                 from /opt/homebrew//include/boost/process/async.hpp:33,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/asio/multiple_exceptions.hpp:38:39: warning: 'virtual const char* boost::asio::multiple_exceptions::what() const' can be marked override [-Wsuggest-override]
   38 |   BOOST_ASIO_DECL virtual const char* what() const
      |                                       ^~~~
In file included from /opt/homebrew//include/boost/asio/execution/any_executor.hpp:30,
                 from /opt/homebrew//include/boost/asio/execution.hpp:19,
                 from /opt/homebrew//include/boost/process/detail/posix/on_exit.hpp:9,
                 from /opt/homebrew//include/boost/process/detail/on_exit.hpp:12,
                 from /opt/homebrew//include/boost/process/async.hpp:33,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/asio/execution/bad_executor.hpp:35:39: warning: virtual const char* boost::asio::execution::bad_executor::what() const' can be marked override [-Wsuggest-override]
   35 |   BOOST_ASIO_DECL virtual const char* what() const
      |                                       ^~~~
In file included from /opt/homebrew//include/boost/asio/io_context.hpp:44,
                 from /opt/homebrew//include/boost/process/async.hpp:35,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/asio/detail/scheduler.hpp:60:24: warning: 'virtual void boost::asio::detail::scheduler::shutdown()' can be marked override [-Wsuggest-override]
   60 |   BOOST_ASIO_DECL void shutdown();
      |                        ^~~~~~~~
In file included from /opt/homebrew//include/boost/asio/detail/reactor.hpp:27,
                 from /opt/homebrew//include/boost/asio/detail/impl/scheduler.ipp:30,
                 from /opt/homebrew//include/boost/asio/detail/scheduler.hpp:240,
                 from /opt/homebrew//include/boost/asio/io_context.hpp:44,
                 from /opt/homebrew//include/boost/process/async.hpp:35,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/asio/detail/kqueue_reactor.hpp:94:24: warning: 'virtual void boost::asio::detail::kqueue_reactor::shutdown()' can be marked override [-Wsuggest-override]
   94 |   BOOST_ASIO_DECL void shutdown();
      |                        ^~~~~~~~
/opt/homebrew//include/boost/asio/detail/kqueue_reactor.hpp:97:24: warning: 'virtual void boost::asio::detail::kqueue_reactor::notify_fork(boost::asio::execution_context::fork_event)' can be marked override [-Wsuggest-override]
   97 |   BOOST_ASIO_DECL void notify_fork(
      |                        ^~~~~~~~~~~
/opt/homebrew//include/boost/asio/detail/kqueue_reactor.hpp:193:24: warning: virtual void boost::asio::detail::kqueue_reactor::run(long int, boost::asio::detail::op_queue<boost::asio::detail::scheduler_operation>&)' can be marked override [-Wsuggest-override]
  193 |   BOOST_ASIO_DECL void run(long usec, op_queue<operation>& ops);
      |                        ^~~
/opt/homebrew//include/boost/asio/detail/kqueue_reactor.hpp:196:24: warning: virtual void boost::asio::detail::kqueue_reactor::interrupt()' can be marked override [-Wsuggest-override]
  196 |   BOOST_ASIO_DECL void interrupt();
      |                        ^~~~~~~~~
In file included from /opt/homebrew//include/boost/process/async.hpp:35,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/asio/io_context.hpp:1197:32: warning: 'virtual void boost::asio::io_context::service::shutdown()' can be marked override [-Wsuggest-override]
 1197 |   BOOST_ASIO_DECL virtual void shutdown();
      |                                ^~~~~~~~
/opt/homebrew//include/boost/asio/io_context.hpp:1211:32: warning: 'virtual void boost::asio::io_context::service::notify_fork(boost::asio::execution_context::fork_event)' can be marked override [-Wsuggest-override]
 1211 |   BOOST_ASIO_DECL virtual void notify_fork(
      |                                ^~~~~~~~~~~
In file included from /opt/homebrew//include/boost/asio/basic_signal_set.hpp:25,
                 from /opt/homebrew//include/boost/asio/signal_set.hpp:19,
                 from /opt/homebrew//include/boost/process/detail/posix/sigchld_service.hpp:12,
                 from /opt/homebrew//include/boost/process/detail/posix/io_context_ref.hpp:20,
                 from /opt/homebrew//include/boost/process/async.hpp:42,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/asio/detail/signal_set_service.hpp:131:24: warning: 'virtual void boost::asio::detail::signal_set_service::shutdown()' can be marked override [-Wsuggest-override]
  131 |   BOOST_ASIO_DECL void shutdown();
      |                        ^~~~~~~~
/opt/homebrew//include/boost/asio/detail/signal_set_service.hpp:134:24: warning: 'virtual void boost::asio::detail::signal_set_service::notify_fork(boost::asio::execution_context::fork_event)' can be marked override [-Wsuggest-override]
  134 |   BOOST_ASIO_DECL void notify_fork(
      |                        ^~~~~~~~~~~
In file included from /opt/homebrew//include/boost/asio/strand.hpp:19,
                 from /opt/homebrew//include/boost/process/detail/posix/sigchld_service.hpp:13,
                 from /opt/homebrew//include/boost/process/detail/posix/io_context_ref.hpp:20,
                 from /opt/homebrew//include/boost/process/async.hpp:42,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/asio/detail/strand_executor_service.hpp:86:24: warning: 'virtual void boost::asio::detail::strand_executor_service::shutdown()' can be marked override [-Wsuggest-override]
   86 |   BOOST_ASIO_DECL void shutdown();
      |                        ^~~~~~~~
In file included from /opt/homebrew//include/boost/asio/io_context_strand.hpp:25,
                 from /opt/homebrew//include/boost/asio/strand.hpp:578,
                 from /opt/homebrew//include/boost/process/detail/posix/sigchld_service.hpp:13,
                 from /opt/homebrew//include/boost/process/detail/posix/io_context_ref.hpp:20,
                 from /opt/homebrew//include/boost/process/async.hpp:42,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/asio/detail/strand_service.hpp:82:24: warning: 'virtual void boost::asio::detail::strand_service::shutdown()' can be marked override [-Wsuggest-override]
   82 |   BOOST_ASIO_DECL void shutdown();
      |                        ^~~~~~~~
In file included from /opt/homebrew//include/boost/asio/posix/basic_descriptor.hpp:36,
                 from /opt/homebrew//include/boost/asio/posix/basic_stream_descriptor.hpp:19,
                 from /opt/homebrew//include/boost/asio/posix/stream_descriptor.hpp:23,
                 from /opt/homebrew//include/boost/process/detail/posix/async_pipe.hpp:11,
                 from /opt/homebrew//include/boost/process/async_pipe.hpp:18,
                 from /opt/homebrew//include/boost/process/detail/posix/async_in.hpp:16,
                 from /opt/homebrew//include/boost/process/async.hpp:43,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/asio/detail/reactive_descriptor_service.hpp:85:24: warning: 'virtual void boost::asio::detail::reactive_descriptor_service::shutdown()' can be marked override [-Wsuggest-override]
   85 |   BOOST_ASIO_DECL void shutdown();
      |                        ^~~~~~~~
In file included from /opt/homebrew//include/boost/asio/streambuf.hpp:22,
                 from /opt/homebrew//include/boost/process/async.hpp:36,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/asio/basic_streambuf.hpp: In instantiation of 'class boost::asio::basic_streambuf<>':
/opt/homebrew//include/boost/process/detail/posix/async_out.hpp:136:42:   required from here
/opt/homebrew//include/boost/asio/basic_streambuf.hpp:264:12: warning: 'std::basic_streambuf<char>::int_type boost::asio::basic_streambuf<Allocator>::underflow() [with Allocator = std::allocator<char>; std::basic_streambuf<char>::int_type = int]' can be marked override [-Wsuggest-override]
  264 |   int_type underflow()
      |            ^~~~~~~~~
/opt/homebrew//include/boost/asio/basic_streambuf.hpp:284:12: warning: 'std::basic_streambuf<char>::int_type boost::asio::basic_streambuf<Allocator>::overflow(std::basic_streambuf<char>::int_type) [with Allocator = std::allocator<char>; std::basic_streambuf<char>::int_type = int]' can be marked override [-Wsuggest-override]
  284 |   int_type overflow(int_type c)
      |            ^~~~~~~~
In file included from /opt/homebrew//include/boost/asio/detail/thread.hpp:23,
                 from /opt/homebrew//include/boost/asio/detail/scheduler.hpp:28,
                 from /opt/homebrew//include/boost/asio/io_context.hpp:44,
                 from /opt/homebrew//include/boost/process/async.hpp:35,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/asio/detail/posix_thread.hpp: In instantiation of 'class boost::asio::detail::posix_thread::func<boost::asio::detail::scheduler::thread_function>':
/opt/homebrew//include/boost/asio/detail/posix_thread.hpp:46:18:   required from 'boost::asio::detail::posix_thread::posix_thread(Function, unsigned int) [with Function = boost::asio::detail::scheduler::thread_function]'
/opt/homebrew//include/boost/asio/detail/impl/scheduler.ipp:137:68:   required from here
/opt/homebrew//include/boost/asio/detail/posix_thread.hpp:84:18: warning: 'void boost::asio::detail::posix_thread::func<Function>::run() [with Function = boost::asio::detail::scheduler::thread_function]' can be marked override [-Wsuggest-override]
   84 |     virtual void run()
      |                  ^~~
/opt/homebrew//include/boost/asio/detail/posix_thread.hpp: In instantiation of 'class boost::asio::detail::posix_thread::func<boost::asio::system_context::thread_function>':
/opt/homebrew//include/boost/asio/detail/posix_thread.hpp:46:18:   required from 'boost::asio::detail::posix_thread::posix_thread(Function, unsigned int) [with Function = boost::asio::system_context::thread_function]'
/opt/homebrew//include/boost/asio/detail/thread_group.hpp:82:9:   required from 'boost::asio::detail::thread_group::item::item(Function, boost::asio::detail::thread_group::item*) [with Function = boost::asio::system_context::thread_function]'
/opt/homebrew//include/boost/asio/detail/thread_group.hpp:47:14:   required from 'void boost::asio::detail::thread_group::create_thread(Function) [with Function = boost::asio::system_context::thread_function]'
/opt/homebrew//include/boost/asio/detail/thread_group.hpp:55:20:   required from 'void boost::asio::detail::thread_group::create_threads(Function, std::size_t) [with Function = boost::asio::system_context::thread_function; std::size_t = long unsigned int]'
/opt/homebrew//include/boost/asio/impl/system_context.ipp:56:26:   required from here
/opt/homebrew//include/boost/asio/detail/posix_thread.hpp:84:18: warning: 'void boost::asio::detail::posix_thread::func<Function>::run() [with Function = boost::asio::system_context::thread_function]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/asio/associated_cancellation_slot.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/signal_set_service.hpp:22,
                 from /opt/homebrew//include/boost/asio/basic_signal_set.hpp:25,
                 from /opt/homebrew//include/boost/asio/signal_set.hpp:19,
                 from /opt/homebrew//include/boost/process/detail/posix/sigchld_service.hpp:12,
                 from /opt/homebrew//include/boost/process/detail/posix/io_context_ref.hpp:20,
                 from /opt/homebrew//include/boost/process/async.hpp:42,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/asio/cancellation_signal.hpp: In instantiation of 'class boost::asio::detail::cancellation_handler<boost::asio::detail::signal_set_service::signal_op_cancellation>':
/opt/homebrew//include/boost/asio/cancellation_signal.hpp:171:9:   required from 'CancellationHandler& boost::asio::cancellation_slot::emplace(Args&& ...) [with CancellationHandler = boost::asio::detail::signal_set_service::signal_op_cancellation; Args = {boost::asio::detail::signal_set_service*, boost::asio::detail::signal_set_service::implementation_type*}]'
/opt/homebrew//include/boost/asio/detail/signal_set_service.hpp:181:55:   required from 'void boost::asio::detail::signal_set_service::async_wait(boost::asio::detail::signal_set_service::implementation_type&, Handler&, const IoExecutor&) [with Handler = boost::process::detail::posix::sigchld_service::_handle_signal(const boost::system::error_code&)::<lambda(const boost::system::error_code&, int)>; IoExecutor = boost::asio::any_io_executor]'
/opt/homebrew//include/boost/asio/basic_signal_set.hpp:577:44:   required from 'void boost::asio::basic_signal_set<Executor>::initiate_async_wait::operator()(SignalHandler&&) const [with SignalHandler = boost::process::detail::posix::sigchld_service::_handle_signal(const boost::system::error_code&)::<lambda(const boost::system::error_code&, int)>; Executor = boost::asio::any_io_executor'
/opt/homebrew//include/boost/asio/async_result.hpp:482:49:   required from 'static boost::asio::detail::completion_handler_async_result<CompletionToken, Signatures>::return_type boost::asio::detail::completion_handler_async_result<CompletionToken, Signatures>::initiate(Initiation&&, RawCompletionToken&&, Args&& ...) [with Initiation = boost::asio::basic_signal_set<>::initiate_async_wait; RawCompletionToken = boost::process::detail::posix::sigchld_service::_handle_signal(const boost::system::error_code&)::<lambda(const boost::system::error_code&, int)>; Args = {}; CompletionToken = boost::process::detail::posix::sigchld_service::_handle_signal(const boost::system::error_code&)::<lambda(const boost::system::error_code&, int)>; Signatures = {void(boost::system::error_code, int)}; boost::asio::detail::completion_handler_async_result<CompletionToken, Signatures>::return_type = void]'
/opt/homebrew//include/boost/asio/async_result.hpp:862:29:   required from 'typename boost::asio::constraint<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signatures>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signatures ...>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&&>)()...))>::type boost::asio::async_initiate(Initiation&&, CompletionToken&, Args&& ...) [with CompletionToken = boost::process::detail::posix::sigchld_service::_handle_signal(const boost::system::error_code&)::<lambda(const boost::system::error_code&, int)>; Signatures = {void(boost::system::error_code, int)}; Initiation = boost::asio::basic_signal_set<>::initiate_async_wait; Args = {}; typename boost::asio::constraint<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signatures>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signatures ...>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&&>)()...))>::type = void; decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signatures ...>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&&>)()...)) = void; typename std::decay<_Tp>::type = std::decay<boost::process::detail::posix::sigchld_service::_handle_signal(const boost::system::error_code&)::<lambda(const boost::system::error_code&, int)> >::type]'
/opt/homebrew//include/boost/asio/basic_signal_set.hpp:545:78:   required from 'auto boost::asio::basic_signal_set<Executor>::async_wait(SignalToken&&) [with SignalToken = boost::process::detail::posix::sigchld_service::_handle_signal(const boost::system::error_code&)::<lambda(const boost::system::error_code&, int)>; Executor = boost::asio::any_io_executor]'
/opt/homebrew//include/boost/process/detail/posix/sigchld_service.hpp:131:31:   required from here
/opt/homebrew//include/boost/asio/cancellation_signal.hpp:74:8: warning: 'void boost::asio::detail::cancellation_handler<Handler>::call(boost::asio::cancellation_type_t) [with Handler = boost::asio::detail::signal_set_service::signal_op_cancellation; boost::asio::cancellation_type_t = boost::asio::cancellation_type]' can be marked override [-Wsuggest-override]
   74 |   void call(cancellation_type_t type)
      |        ^~~~
/opt/homebrew//include/boost/asio/cancellation_signal.hpp:79:33: warning: 'std::pair<void*, long unsigned int> boost::asio::detail::cancellation_handler<Handler>::destroy() [with Handler = boost::asio::detail::signal_set_service::signal_op_cancellation]' can be marked override [-Wsuggest-override]
   79 |   std::pair<void*, std::size_t> destroy() BOOST_ASIO_NOEXCEPT
      |                                 ^~~~~~~
  CXX      util/libbitcoin_util_a-message.o
  CXX      util/libbitcoin_util_a-moneystr.o
  CXX      util/libbitcoin_util_a-rbf.o
  CXX      util/libbitcoin_util_a-readwritefile.o
  CXX      util/libbitcoin_util_a-settings.o
  CXX      util/libbitcoin_util_a-thread.o
  CXX      util/libbitcoin_util_a-threadnames.o
  CXX      util/libbitcoin_util_a-serfloat.o
  CXX      util/libbitcoin_util_a-spanparsing.o
  CXX      util/libbitcoin_util_a-strencodings.o
  CXX      util/libbitcoin_util_a-string.o
  CXX      util/libbitcoin_util_a-syscall_sandbox.o
  CXX      util/libbitcoin_util_a-time.o
In file included from /opt/homebrew//include/boost/date_time/posix_time/posix_time_io.hpp:16,
                 from /opt/homebrew//include/boost/date_time/posix_time/posix_time.hpp:31,
                 from util/time.cpp:15:
/opt/homebrew//include/boost/date_time/time_facet.hpp: In instantiation of 'class boost::date_time::time_input_facet<boost::posix_time::ptime, char>':
util/time.cpp:149:69:   required from here
/opt/homebrew//include/boost/date_time/time_facet.hpp:764:20: warning: 'void boost::date_time::time_input_facet<time_type, CharT, InItrT>::set_iso_format() [with time_type = boost::posix_time::ptime; CharT = char; InItrT = std::istreambuf_iterator<char, std::char_traits<char> >]' can be marked override [-Wsuggest-override]
  764 |       virtual void set_iso_format()
      |                    ^~~~~~~~~~~~~~
/opt/homebrew//include/boost/date_time/time_facet.hpp:768:20: warning: 'void boost::date_time::time_input_facet<time_type, CharT, InItrT>::set_iso_extended_format() [with time_type = boost::posix_time::ptime; CharT = char; InItrT = std::istreambuf_iterator<char, std::char_traits<char> >]' can be marked override [-Wsuggest-override]
  768 |       virtual void set_iso_extended_format()
      |                    ^~~~~~~~~~~~~~~~~~~~~~~
  CXX      util/libbitcoin_util_a-tokenpipe.o
  CXX      util/libbitcoin_util_a-url.o
  AR       libbitcoin_util.a
  CXX      univalue/lib/libunivalue_la-univalue.lo
  CXX      univalue/lib/libunivalue_la-univalue_get.lo
  CXX      univalue/lib/libunivalue_la-univalue_read.lo
  CXX      univalue/lib/libunivalue_la-univalue_write.lo
  CXXLD    libunivalue.la
  CXX      libbitcoin_consensus_a-arith_uint256.o
  CXX      consensus/libbitcoin_consensus_a-merkle.o
  CXX      consensus/libbitcoin_consensus_a-tx_check.o
  CXX      libbitcoin_consensus_a-hash.o
  CXX      primitives/libbitcoin_consensus_a-block.o
  CXX      primitives/libbitcoin_consensus_a-transaction.o
  CXX      libbitcoin_consensus_a-pubkey.o
  CXX      script/libbitcoin_consensus_a-bitcoinconsensus.o
  CXX      script/libbitcoin_consensus_a-interpreter.o
  CXX      script/libbitcoin_consensus_a-script.o
  CXX      script/libbitcoin_consensus_a-script_error.o
  CXX      libbitcoin_consensus_a-uint256.o
  CXX      util/libbitcoin_consensus_a-strencodings.o
  AR       libbitcoin_consensus.a
  CXX      crypto/libbitcoin_crypto_base_la-aes.lo
  CXX      crypto/libbitcoin_crypto_base_la-chacha_poly_aead.lo
  CXX      crypto/libbitcoin_crypto_base_la-chacha20.lo
  CXX      crypto/libbitcoin_crypto_base_la-hkdf_sha256_32.lo
  CXX      crypto/libbitcoin_crypto_base_la-hmac_sha256.lo
  CXX      crypto/libbitcoin_crypto_base_la-hmac_sha512.lo
  CXX      crypto/libbitcoin_crypto_base_la-poly1305.lo
  CXX      crypto/libbitcoin_crypto_base_la-muhash.lo
  CXX      crypto/libbitcoin_crypto_base_la-ripemd160.lo
  CXX      crypto/libbitcoin_crypto_base_la-sha1.lo
  CXX      crypto/libbitcoin_crypto_base_la-sha256.lo
  CXX      crypto/libbitcoin_crypto_base_la-sha3.lo
  CXX      crypto/libbitcoin_crypto_base_la-sha512.lo
  CXX      crypto/libbitcoin_crypto_base_la-siphash.lo
  CXX      crypto/libbitcoin_crypto_base_la-sha256_sse4.lo
  CXXLD    crypto/libbitcoin_crypto_base.la
  CXX      leveldb/db/libleveldb_la-builder.lo
  CXX      leveldb/db/libleveldb_la-c.lo
  CXX      leveldb/db/libleveldb_la-dbformat.lo
  CXX      leveldb/db/libleveldb_la-db_impl.lo
  CXX      leveldb/db/libleveldb_la-db_iter.lo
  CXX      leveldb/db/libleveldb_la-dumpfile.lo
  CXX      leveldb/db/libleveldb_la-filename.lo
  CXX      leveldb/db/libleveldb_la-log_reader.lo
  CXX      leveldb/db/libleveldb_la-log_writer.lo
  CXX      leveldb/db/libleveldb_la-memtable.lo
  CXX      leveldb/db/libleveldb_la-repair.lo
  CXX      leveldb/db/libleveldb_la-table_cache.lo
  CXX      leveldb/db/libleveldb_la-version_edit.lo
  CXX      leveldb/db/libleveldb_la-version_set.lo
  CXX      leveldb/db/libleveldb_la-write_batch.lo
  CXX      leveldb/table/libleveldb_la-block_builder.lo
  CXX      leveldb/table/libleveldb_la-block.lo
  CXX      leveldb/table/libleveldb_la-filter_block.lo
  CXX      leveldb/table/libleveldb_la-format.lo
  CXX      leveldb/table/libleveldb_la-iterator.lo
  CXX      leveldb/table/libleveldb_la-merger.lo
  CXX      leveldb/table/libleveldb_la-table_builder.lo
  CXX      leveldb/table/libleveldb_la-table.lo
  CXX      leveldb/table/libleveldb_la-two_level_iterator.lo
  CXX      leveldb/util/libleveldb_la-arena.lo
  CXX      leveldb/util/libleveldb_la-bloom.lo
  CXX      leveldb/util/libleveldb_la-cache.lo
  CXX      leveldb/util/libleveldb_la-coding.lo
  CXX      leveldb/util/libleveldb_la-comparator.lo
  CXX      leveldb/util/libleveldb_la-crc32c.lo
  CXX      leveldb/util/libleveldb_la-env.lo
  CXX      leveldb/util/libleveldb_la-filter_policy.lo
  CXX      leveldb/util/libleveldb_la-hash.lo
  CXX      leveldb/util/libleveldb_la-histogram.lo
  CXX      leveldb/util/libleveldb_la-logging.lo
  CXX      leveldb/util/libleveldb_la-options.lo
  CXX      leveldb/util/libleveldb_la-status.lo
  CXX      leveldb/util/libleveldb_la-env_posix.lo
  CXXLD    leveldb/libleveldb.la
  CXX      crc32c/src/libcrc32c_la-crc32c.lo
  CXX      crc32c/src/libcrc32c_la-crc32c_portable.lo
  CXXLD    crc32c/libcrc32c.la
  CXX      leveldb/helpers/memenv/libmemenv_la-memenv.lo
  CXXLD    leveldb/libmemenv.la
  CC       src/libsecp256k1_la-secp256k1.lo
  CC       src/libsecp256k1_precomputed_la-precomputed_ecmult.lo
  CC       src/libsecp256k1_precomputed_la-precomputed_ecmult_gen.lo
  CCLD     libsecp256k1_precomputed.la
  CCLD     libsecp256k1.la
  CXXLD    bitcoind
Undefined symbols for architecture arm64:
  "__ZN2Db6verifyEPKcS1_PSoj", referenced from:
      __ZN6wallet16BerkeleyDatabase6VerifyER13bilingual_str in libbitcoin_wallet.a(libbitcoin_wallet_a-bdb.o)
ld: symbol(s) not found for architecture arm64
collect2: error: ld returned 1 exit status
make[2]: *** [bitcoind] Error 1
make[1]: *** [all-recursive] Error 1
make: *** [all-recursive] Error 1
mehul@Mehuls-MacBook bitcoin % ./autogen.sh
./configure --without-wallet --with-gui=no
glibtoolize: putting auxiliary files in AC_CONFIG_AUX_DIR, 'build-aux'.
glibtoolize: copying file 'build-aux/ltmain.sh'
glibtoolize: putting macros in AC_CONFIG_MACRO_DIRS, 'build-aux/m4'.
glibtoolize: copying file 'build-aux/m4/libtool.m4'
glibtoolize: copying file 'build-aux/m4/ltoptions.m4'
glibtoolize: copying file 'build-aux/m4/ltsugar.m4'
glibtoolize: copying file 'build-aux/m4/ltversion.m4'
glibtoolize: copying file 'build-aux/m4/lt~obsolete.m4'
configure.ac:35: installing 'build-aux/compile'
configure.ac:30: installing 'build-aux/missing'
Makefile.am: installing 'build-aux/depcomp'
glibtoolize: putting auxiliary files in AC_CONFIG_AUX_DIR, 'build-aux'.
glibtoolize: copying file 'build-aux/ltmain.sh'
glibtoolize: putting macros in AC_CONFIG_MACRO_DIRS, 'build-aux/m4'.
glibtoolize: copying file 'build-aux/m4/libtool.m4'
glibtoolize: copying file 'build-aux/m4/ltoptions.m4'
glibtoolize: copying file 'build-aux/m4/ltsugar.m4'
glibtoolize: copying file 'build-aux/m4/ltversion.m4'
glibtoolize: copying file 'build-aux/m4/lt~obsolete.m4'
configure.ac:115: installing 'build-aux/compile'
configure.ac:57: installing 'build-aux/missing'
src/Makefile.bench.include:97: warning: %.raw.h was already defined in condition TRUE, which includes condition ENABLE_BENCH ...
src/Makefile.am:1079:   'src/Makefile.bench.include' included from here
src/Makefile.test.include:419: ... '%.raw.h' previously defined here
src/Makefile.am:1076:   'src/Makefile.test.include' included from here
src/Makefile.am: installing 'build-aux/depcomp'
checking for pkg-config... /opt/homebrew/bin/pkg-config
checking pkg-config is at least version 0.9.0... yes
checking build system type... aarch64-apple-darwin21.6.0
checking host system type... aarch64-apple-darwin21.6.0
checking for a BSD-compatible install... /opt/homebrew/bin/ginstall -c
checking whether build environment is sane... yes
checking for a race-free mkdir -p... /opt/homebrew/bin/gmkdir -p
checking for gawk... no
checking for mawk... no
checking for nawk... no
checking for awk... awk
checking whether make sets $(MAKE)... yes
checking whether make supports nested variables... yes
checking whether to enable maintainer-specific portions of Makefiles... yes
checking whether make supports nested variables... (cached) yes
checking for g++... g++
checking whether the C++ compiler works... yes
checking for C++ compiler default output file name... a.out
checking for suffix of executables... 
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether the compiler supports GNU C++... yes
checking whether g++ accepts -g... yes
checking for g++ option to enable C++11 features... none needed
checking whether make supports the include directive... yes (GNU style)
checking dependency style of g++... gcc3
checking whether g++ supports C++17 features with -std=c++17... yes
checking whether std::filesystem can be used without link library... yes
checking whether the compiler supports GNU Objective C++... yes
checking whether g++ -std=c++17 accepts -g... yes
checking dependency style of g++ -std=c++17... gcc3
checking how to print strings... printf
checking for gcc... gcc
checking whether the compiler supports GNU C... yes
checking whether gcc accepts -g... yes
checking for gcc option to enable C11 features... none needed
checking whether gcc understands -c and -o together... yes
checking dependency style of gcc... gcc3
checking for a sed that does not truncate output... /usr/bin/sed
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for fgrep... /usr/bin/grep -F
checking for ld used by gcc... /usr/bin/ld
checking if the linker (/usr/bin/ld) is GNU ld... no
checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B
checking the name lister (/usr/bin/nm -B) interface... BSD nm
checking whether ln -s works... yes
checking the maximum length of command line arguments... 786432
checking how to convert aarch64-apple-darwin21.6.0 file names to aarch64-apple-darwin21.6.0 format... func_convert_file_noop
checking how to convert aarch64-apple-darwin21.6.0 file names to toolchain format... func_convert_file_noop
checking for /usr/bin/ld option to reload object files... -r
checking for file... file
checking for objdump... objdump
checking how to recognize dependent libraries... pass_all
checking for dlltool... no
checking how to associate runtime and link libraries... printf %s\n
checking for ar... ar
checking for archiver @FILE support... no
checking for strip... strip
checking for ranlib... ranlib
checking command to parse /usr/bin/nm -B output from gcc object... ok
checking for sysroot... no
checking for a working dd... /bin/dd
checking how to truncate binary pipes... /bin/dd bs=4096 count=1
checking for mt... no
checking if : is a manifest tool... no
checking for dsymutil... dsymutil
checking for nmedit... nmedit
checking for lipo... lipo
checking for otool... otool
checking for otool64... no
checking for -single_module linker flag... yes
checking for -exported_symbols_list linker flag... yes
checking for -force_load linker flag... yes
checking for stdio.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for strings.h... yes
checking for sys/stat.h... yes
checking for sys/types.h... yes
checking for unistd.h... yes
checking for dlfcn.h... yes
checking for objdir... .libs
checking if gcc supports -fno-rtti -fno-exceptions... no
checking for gcc option to produce PIC... -fno-common -DPIC
checking if gcc PIC flag -fno-common -DPIC works... yes
checking if gcc static flag -static works... no
checking if gcc supports -c -o file.o... yes
checking if gcc supports -c -o file.o... (cached) yes
checking whether the gcc linker (/usr/bin/ld) supports shared libraries... yes
checking dynamic linker characteristics... darwin21.6.0 dyld
checking how to hardcode library paths into programs... immediate
checking whether stripping libraries is possible... yes
checking if libtool supports shared libraries... yes
checking whether to build shared libraries... yes
checking whether to build static libraries... yes
checking how to run the C++ preprocessor... g++ -std=c++17 -E
checking for ld used by g++ -std=c++17... /usr/bin/ld
checking if the linker (/usr/bin/ld) is GNU ld... no
checking whether the g++ -std=c++17 linker (/usr/bin/ld) supports shared libraries... yes
checking for g++ -std=c++17 option to produce PIC... -fno-common -DPIC
checking if g++ -std=c++17 PIC flag -fno-common -DPIC works... yes
checking if g++ -std=c++17 static flag -static works... no
checking if g++ -std=c++17 supports -c -o file.o... yes
checking if g++ -std=c++17 supports -c -o file.o... (cached) yes
checking whether the g++ -std=c++17 linker (/usr/bin/ld) supports shared libraries... yes
checking dynamic linker characteristics... darwin21.6.0 dyld
checking how to hardcode library paths into programs... immediate
checking for ar... /usr/bin/ar
checking for gcov... /usr/bin/gcov
checking for llvm-cov... no
checking for lcov... no
checking for python3.6... no
checking for python3.7... no
checking for python3.8... no
checking for python3.9... no
checking for python3.10... no
checking for python3.11... no
checking for python3... /usr/bin/python3
checking for genhtml... no
checking for git... /opt/homebrew/bin/git
checking for ccache... no
checking for xgettext... /opt/homebrew/bin/xgettext
checking for hexdump... /usr/bin/hexdump
checking for objcopy... no
checking for doxygen... no
checking whether C++ compiler accepts -Werror... yes
checking whether the linker accepts -Wl,-fatal_warnings... yes
checking whether C++ compiler accepts -Wall... yes
checking whether C++ compiler accepts -Wextra... yes
checking whether C++ compiler accepts -Wgnu... no
checking whether C++ compiler accepts -Wformat -Wformat-security... yes
checking whether C++ compiler accepts -Wvla... yes
checking whether C++ compiler accepts -Wshadow-field... no
checking whether C++ compiler accepts -Wthread-safety... no
checking whether C++ compiler accepts -Wloop-analysis... no
checking whether C++ compiler accepts -Wredundant-decls... yes
checking whether C++ compiler accepts -Wunused-member-function... no
checking whether C++ compiler accepts -Wdate-time... yes
checking whether C++ compiler accepts -Wconditional-uninitialized... no
checking whether C++ compiler accepts -Wduplicated-branches... yes
checking whether C++ compiler accepts -Wduplicated-cond... yes
checking whether C++ compiler accepts -Wlogical-op... yes
checking whether C++ compiler accepts -Woverloaded-virtual... yes
checking whether C++ compiler accepts -Wsuggest-override... yes
checking whether C++ compiler accepts -Wunreachable-code-loop-increment... no
checking whether C++ compiler accepts -Wimplicit-fallthrough... yes
checking whether C++ compiler accepts -Wunused-parameter... yes
checking whether C++ compiler accepts -Wself-assign... no
checking whether C++ compiler accepts -Wdeprecated-copy... yes
checking whether C++ compiler accepts -fno-extended-identifiers... yes
checking whether C++ compiler accepts -msse4.2... no
checking whether C++ compiler accepts -msse4.1... no
checking whether C++ compiler accepts -mavx -mavx2... no
checking whether C++ compiler accepts -msse4 -msha... no
checking whether C++ compiler accepts -mpclmul... no
checking for SSE4.2 intrinsics... no
checking for SSE4.1 intrinsics... no
checking for AVX2 intrinsics... no
checking for x86 SHA-NI intrinsics... no
checking whether C++ compiler accepts -march=armv8-a+crc+crypto... yes
checking whether C++ compiler accepts -march=armv8-a+crc+crypto... (cached) yes
checking for ARMv8 CRC32 intrinsics... no
checking for ARMv8 SHA-NI intrinsics... no
checking for brew... brew
checking whether the linker accepts -Wl,-headerpad_max_install_names... yes
checking whether byte ordering is bigendian... no
checking how to run the C preprocessor... gcc -E
checking whether gcc is Clang... no
checking whether pthreads work with "-pthread" and "-lpthread"... yes
checking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE
checking whether more special flags are required for pthreads... no
checking for PTHREAD_PRIO_INHERIT... yes
checking whether std::atomic can be used without link library... yes
checking for special C compiler options needed for large files... no
checking for _FILE_OFFSET_BITS value needed for large files... no
checking for g++ -std=c++17 options needed to detect all undeclared functions... none needed
checking whether strerror_r is declared... yes
checking whether strerror_r returns char *... no
checking for library containing clock_gettime... none required
checking whether C++ compiler accepts -fPIC... yes
checking whether C++ compiler accepts -fstack-reuse=none... yes
checking whether C++ compiler accepts -Wstack-protector... yes
checking whether C++ compiler accepts -fstack-protector-all... no
checking whether C++ compiler accepts -fcf-protection=full... no
checking whether C++ compiler accepts -fstack-clash-protection... yes
checking whether C++ preprocessor accepts -D_FORTIFY_SOURCE=2... yes
checking whether C++ preprocessor accepts -U_FORTIFY_SOURCE... yes
checking whether the linker accepts -Wl,--enable-reloc-section... no
checking whether the linker accepts -Wl,--dynamicbase... no
checking whether the linker accepts -Wl,--nxcompat... no
checking whether the linker accepts -Wl,--high-entropy-va... no
checking whether the linker accepts -Wl,-z,relro... no
checking whether the linker accepts -Wl,-z,now... no
checking whether the linker accepts -Wl,-z,separate-code... no
checking whether the linker accepts -fPIE -pie... yes
checking whether the linker accepts -Wl,-dead_strip... yes
checking whether the linker accepts -Wl,-dead_strip_dylibs... yes
checking whether the linker accepts -Wl,-bind_at_load... yes
checking for endian.h... no
checking for sys/endian.h... no
checking for byteswap.h... no
checking for stdio.h... (cached) yes
checking for stdlib.h... (cached) yes
checking for unistd.h... (cached) yes
checking for strings.h... (cached) yes
checking for sys/types.h... (cached) yes
checking for sys/stat.h... (cached) yes
checking for sys/select.h... yes
checking for sys/prctl.h... no
checking for sys/sysctl.h... yes
checking for vm/vm_param.h... no
checking for sys/vmmeter.h... yes
checking for sys/resources.h... no
checking whether getifaddrs is declared... yes
checking whether ifaddrs funcs can be used without link library... yes
checking whether freeifaddrs is declared... yes
checking whether ifaddrs funcs can be used without link library... yes
checking whether fork is declared... yes
checking whether setsid is declared... yes
checking whether pipe2 is declared... no
checking for timingsafe_bcmp... yes
checking whether le16toh is declared... no
checking whether le32toh is declared... no
checking whether le64toh is declared... no
checking whether htole16 is declared... no
checking whether htole32 is declared... no
checking whether htole64 is declared... no
checking whether be16toh is declared... no
checking whether be32toh is declared... no
checking whether be64toh is declared... no
checking whether htobe16 is declared... no
checking whether htobe32 is declared... no
checking whether htobe64 is declared... no
checking whether bswap_16 is declared... no
checking whether bswap_32 is declared... no
checking whether bswap_64 is declared... no
checking for __builtin_clzl... yes
checking for __builtin_clzll... yes
checking for getmemoryinfo... no
checking for mallopt M_ARENA_MAX... no
checking for posix_fallocate... no
checking for default visibility attribute... yes
checking for dllexport attribute... no
checking for thread_local support... yes
checking for gmtime_r... yes
checking for Linux getrandom syscall... no
checking for getentropy via random.h... yes
checking for sysctl... yes
checking for sysctl KERN_ARND... no
checking for if type char equals int8_t... no
checking for fdatasync... no
checking for F_FULLFSYNC... yes
checking for O_CLOEXEC... yes
checking for __builtin_prefetch... yes
checking for _mm_prefetch... no
checking for strong getauxval support in the system headers... no
checking for std::system... yes
checking for ::_wsystem... no
checking whether to build Bitcoin Core GUI... no
checking whether main function is needed for fuzz binary... checking whether the linker accepts ... no
yes
checking for __builtin_mul_overflow... yes
checking for sqlite3 >= 3.7.17... yes
checking whether to build wallet with support for sqlite... yes
checking whether Userspace, Statically Defined Tracing tracepoints are supported... no
checking for miniupnpc/miniupnpc.h... no
checking for miniupnpc/upnpcommands.h... no
checking for miniupnpc/upnperrors.h... no
checking for natpmp.h... no
checking for boostlib >= 1.64.0 (106400)... yes
checking whether Boost.Process can be used... yes
checking for seccomp-bpf (Linux x86-64)... no
checking for libevent >= 2.1.8... yes
checking for libevent_pthreads >= 2.1.8... yes
checking if evhttp_connection_get_peer expects const char**... no
checking for libzmq >= 4... no
configure: WARNING: libzmq version 4.x or greater not found, disabling
checking for libmultiprocess... no
checking whether to build bitcoind... yes
checking whether to build bitcoin-cli... yes
checking whether to build bitcoin-tx... yes
checking whether to build bitcoin-wallet... yes
checking whether to build bitcoin-util... yes
checking whether to build experimental bitcoin-chainstate... no
checking whether to build libraries... yes
checking if ccache should be used... no
checking if wallet should be enabled... yes
checking whether to build with support for UPnP... no
checking whether to build with support for NAT-PMP... no
checking whether to build test_bitcoin... yes
checking whether to reduce exports... no
checking that generated files are newer than configure... done
configure: creating ./config.status
config.status: creating libbitcoinconsensus.pc
config.status: creating Makefile
config.status: creating src/Makefile
config.status: creating doc/man/Makefile
config.status: creating share/setup.nsi
config.status: creating share/qt/Info.plist
config.status: creating test/config.ini
config.status: creating contrib/devtools/split-debug.sh
config.status: creating src/config/bitcoin-config.h
config.status: src/config/bitcoin-config.h is unchanged
config.status: executing depfiles commands
config.status: executing libtool commands
=== configuring in src/secp256k1 (/Users/mehul/Development/Bitcoin/bitcoin/src/secp256k1)
configure: running /bin/sh ./configure --disable-option-checking '--prefix=/usr/local'  '--without-wallet' '--with-gui=no' '--disable-shared' '--with-pic' '--enable-benchmark=no' '--enable-module-recovery' '--enable-module-schnorrsig' --cache-file=/dev/null --srcdir=.
checking build system type... aarch64-apple-darwin21.6.0
checking host system type... aarch64-apple-darwin21.6.0
checking for a BSD-compatible install... /opt/homebrew/bin/ginstall -c
checking whether build environment is sane... yes
checking for a race-free mkdir -p... /opt/homebrew/bin/gmkdir -p
checking for gawk... no
checking for mawk... no
checking for nawk... no
checking for awk... awk
checking whether make sets $(MAKE)... yes
checking whether make supports nested variables... yes
checking whether make supports nested variables... (cached) yes
checking for gcc... gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.out
checking for suffix of executables... 
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether the compiler supports GNU C... yes
checking whether gcc accepts -g... yes
checking for gcc option to enable C11 features... none needed
checking whether gcc understands -c and -o together... yes
checking whether make supports the include directive... yes (GNU style)
checking dependency style of gcc... gcc3
checking dependency style of gcc... gcc3
checking for ar... ar
checking the archiver (ar) interface... ar
checking how to print strings... printf
checking for a sed that does not truncate output... /usr/bin/sed
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for fgrep... /usr/bin/grep -F
checking for ld used by gcc... /usr/bin/ld
checking if the linker (/usr/bin/ld) is GNU ld... no
checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B
checking the name lister (/usr/bin/nm -B) interface... BSD nm
checking whether ln -s works... yes
checking the maximum length of command line arguments... 786432
checking how to convert aarch64-apple-darwin21.6.0 file names to aarch64-apple-darwin21.6.0 format... func_convert_file_noop
checking how to convert aarch64-apple-darwin21.6.0 file names to toolchain format... func_convert_file_noop
checking for /usr/bin/ld option to reload object files... -r
checking for file... file
checking for objdump... objdump
checking how to recognize dependent libraries... pass_all
checking for dlltool... no
checking how to associate runtime and link libraries... printf %s\n
checking for archiver @FILE support... no
checking for strip... strip
checking for ranlib... ranlib
checking command to parse /usr/bin/nm -B output from gcc object... ok
checking for sysroot... no
checking for a working dd... /bin/dd
checking how to truncate binary pipes... /bin/dd bs=4096 count=1
checking for mt... no
checking if : is a manifest tool... no
checking for dsymutil... dsymutil
checking for nmedit... nmedit
checking for lipo... lipo
checking for otool... otool
checking for otool64... no
checking for -single_module linker flag... yes
checking for -exported_symbols_list linker flag... yes
checking for -force_load linker flag... yes
checking for stdio.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for strings.h... yes
checking for sys/stat.h... yes
checking for sys/types.h... yes
checking for unistd.h... yes
checking for dlfcn.h... yes
checking for objdir... .libs
checking if gcc supports -fno-rtti -fno-exceptions... no
checking for gcc option to produce PIC... -fno-common -DPIC
checking if gcc PIC flag -fno-common -DPIC works... yes
checking if gcc static flag -static works... no
checking if gcc supports -c -o file.o... yes
checking if gcc supports -c -o file.o... (cached) yes
checking whether the gcc linker (/usr/bin/ld) supports shared libraries... yes
checking dynamic linker characteristics... darwin21.6.0 dyld
checking how to hardcode library paths into programs... immediate
checking whether stripping libraries is possible... yes
checking if libtool supports shared libraries... yes
checking whether to build shared libraries... no
checking whether to build static libraries... yes
checking for brew... brew
checking if gcc supports -Werror=unknown-warning-option... no
checking if gcc supports -std=c89 -pedantic -Wno-long-long -Wnested-externs -Wshadow -Wstrict-prototypes -Wundef... yes
checking if gcc supports -Wno-overlength-strings... yes
checking if gcc supports -Wall... yes
checking if gcc supports -Wno-unused-function... yes
checking if gcc supports -Wextra... yes
checking if gcc supports -Wcast-align... yes
checking if gcc supports -Wcast-align=strict... yes
checking if gcc supports -Wconditional-uninitialized... no
checking if gcc supports -fvisibility=hidden... yes
checking for x86_64 assembly availability... no
checking that generated files are newer than configure... done
configure: creating ./config.status
config.status: creating Makefile
config.status: creating libsecp256k1.pc
config.status: creating src/libsecp256k1-config.h
config.status: src/libsecp256k1-config.h is unchanged
config.status: executing depfiles commands
config.status: executing libtool commands

Build Options:
  with external callbacks = no
  with benchmarks         = no
  with tests              = yes
  with coverage           = no
  with examples           = no
  module ecdh             = no
  module recovery         = yes
  module extrakeys        = yes
  module schnorrsig       = yes

  asm                     = no
  ecmult window size      = 15
  ecmult gen prec. bits   = 4

  valgrind                = no
  CC                      = gcc
  CPPFLAGS                =  
  SECP_CFLAGS             = -O2  -std=c89 -pedantic -Wno-long-long -Wnested-externs -Wshadow -Wstrict-prototypes -Wundef -Wno-overlength-strings -Wall -Wno-unused-function -Wextra -Wcast-align -Wcast-align=strict -fvisibility=hidden 
  CFLAGS                  = -g -O2
  LDFLAGS                 = 

Options used to compile and link:
  external signer = yes
  multiprocess    = no
  with experimental syscall sandbox support = no
  with libs       = yes
  with wallet     = yes
    with sqlite   = yes
    with bdb      = yes
  with gui / qt   = no
  with zmq        = no
  with test       = yes
  with fuzz binary = yes
  with bench      = yes
  with upnp       = no
  with natpmp     = no
  use asm         = yes
  USDT tracing    = no
  sanitizers      = 
  debug enabled   = no
  gprof enabled   = no
  werror          = no
  LTO             = no

  target os       = darwin21.6.0
  build os        = darwin21.6.0

  CC              = gcc
  CFLAGS          = -pthread -g -O2
  CPPFLAGS        =   -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2  -DHAVE_BUILD_INFO -DMAC_OSX -DOBJC_OLD_DISPATCH_PROTOTYPES=0 -DPROVIDE_FUZZ_MAIN_FUNCTION 
  CXX             = g++ -std=c++17
  CXXFLAGS        =    -fstack-reuse=none -Wstack-protector -fstack-clash-protection  -Wall -Wextra -Wformat -Wformat-security -Wvla -Wredundant-decls -Wdate-time -Wduplicated-branches -Wduplicated-cond -Wlogical-op -Woverloaded-virtual -Wsuggest-override -Wimplicit-fallthrough  -Wno-unused-parameter -Wno-deprecated-copy    -fno-extended-identifiers -g -O2
  LDFLAGS         =  -lpthread  -pie -Wl,-bind_at_load   -Wl,-headerpad_max_install_names -Wl,-dead_strip -Wl,-dead_strip_dylibs 
  AR              = /usr/bin/ar
  ARFLAGS         = cr

mehul@Mehuls-MacBook bitcoin % make
Making all in src
  CXXLD    bitcoind
Undefined symbols for architecture arm64:
  "__ZN2Db6verifyEPKcS1_PSoj", referenced from:
      __ZN6wallet16BerkeleyDatabase6VerifyER13bilingual_str in libbitcoin_wallet.a(libbitcoin_wallet_a-bdb.o)
ld: symbol(s) not found for architecture arm64
collect2: error: ld returned 1 exit status
make[2]: *** [bitcoind] Error 1
make[1]: *** [all-recursive] Error 1
make: *** [all-recursive] Error 1
mehul@Mehuls-MacBook bitcoin % make check
Making check in src
  CXXLD    bitcoind
Undefined symbols for architecture arm64:
  "__ZN2Db6verifyEPKcS1_PSoj", referenced from:
      __ZN6wallet16BerkeleyDatabase6VerifyER13bilingual_str in libbitcoin_wallet.a(libbitcoin_wallet_a-bdb.o)
ld: symbol(s) not found for architecture arm64
collect2: error: ld returned 1 exit status
make[2]: *** [bitcoind] Error 1
make[1]: *** [check-recursive] Error 1
make: *** [check-recursive] Error 1
mehul@Mehuls-MacBook bitcoin % ./autogen.sh
glibtoolize: putting auxiliary files in AC_CONFIG_AUX_DIR, 'build-aux'.
glibtoolize: copying file 'build-aux/ltmain.sh'
glibtoolize: putting macros in AC_CONFIG_MACRO_DIRS, 'build-aux/m4'.
glibtoolize: copying file 'build-aux/m4/libtool.m4'
glibtoolize: copying file 'build-aux/m4/ltoptions.m4'
glibtoolize: copying file 'build-aux/m4/ltsugar.m4'
glibtoolize: copying file 'build-aux/m4/ltversion.m4'
glibtoolize: copying file 'build-aux/m4/lt~obsolete.m4'
configure.ac:35: installing 'build-aux/compile'
configure.ac:30: installing 'build-aux/missing'
Makefile.am: installing 'build-aux/depcomp'
glibtoolize: putting auxiliary files in AC_CONFIG_AUX_DIR, 'build-aux'.
glibtoolize: copying file 'build-aux/ltmain.sh'
glibtoolize: putting macros in AC_CONFIG_MACRO_DIRS, 'build-aux/m4'.
glibtoolize: copying file 'build-aux/m4/libtool.m4'
glibtoolize: copying file 'build-aux/m4/ltoptions.m4'
glibtoolize: copying file 'build-aux/m4/ltsugar.m4'
glibtoolize: copying file 'build-aux/m4/ltversion.m4'
glibtoolize: copying file 'build-aux/m4/lt~obsolete.m4'
configure.ac:115: installing 'build-aux/compile'
configure.ac:57: installing 'build-aux/missing'
src/Makefile.bench.include:97: warning: %.raw.h was already defined in condition TRUE, which includes condition ENABLE_BENCH ...
src/Makefile.am:1079:   'src/Makefile.bench.include' included from here
src/Makefile.test.include:419: ... '%.raw.h' previously defined here
src/Makefile.am:1076:   'src/Makefile.test.include' included from here
src/Makefile.am: installing 'build-aux/depcomp'
mehul@Mehuls-MacBook bitcoin % ./configure --without-wallet --with-gui=no
checking for pkg-config... /opt/homebrew/bin/pkg-config
checking pkg-config is at least version 0.9.0... yes
checking build system type... aarch64-apple-darwin21.6.0
checking host system type... aarch64-apple-darwin21.6.0
checking for a BSD-compatible install... /opt/homebrew/bin/ginstall -c
checking whether build environment is sane... yes
checking for a race-free mkdir -p... /opt/homebrew/bin/gmkdir -p
checking for gawk... no
checking for mawk... no
checking for nawk... no
checking for awk... awk
checking whether make sets $(MAKE)... yes
checking whether make supports nested variables... yes
checking whether to enable maintainer-specific portions of Makefiles... yes
checking whether make supports nested variables... (cached) yes
checking for g++... g++
checking whether the C++ compiler works... yes
checking for C++ compiler default output file name... a.out
checking for suffix of executables... 
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether the compiler supports GNU C++... yes
checking whether g++ accepts -g... yes
checking for g++ option to enable C++11 features... none needed
checking whether make supports the include directive... yes (GNU style)
checking dependency style of g++... gcc3
checking whether g++ supports C++17 features with -std=c++17... yes
checking whether std::filesystem can be used without link library... yes
checking whether the compiler supports GNU Objective C++... yes
checking whether g++ -std=c++17 accepts -g... yes
checking dependency style of g++ -std=c++17... gcc3
checking how to print strings... printf
checking for gcc... gcc
checking whether the compiler supports GNU C... yes
checking whether gcc accepts -g... yes
checking for gcc option to enable C11 features... none needed
checking whether gcc understands -c and -o together... yes
checking dependency style of gcc... gcc3
checking for a sed that does not truncate output... /usr/bin/sed
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for fgrep... /usr/bin/grep -F
checking for ld used by gcc... /usr/bin/ld
checking if the linker (/usr/bin/ld) is GNU ld... no
checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B
checking the name lister (/usr/bin/nm -B) interface... BSD nm
checking whether ln -s works... yes
checking the maximum length of command line arguments... 786432
checking how to convert aarch64-apple-darwin21.6.0 file names to aarch64-apple-darwin21.6.0 format... func_convert_file_noop
checking how to convert aarch64-apple-darwin21.6.0 file names to toolchain format... func_convert_file_noop
checking for /usr/bin/ld option to reload object files... -r
checking for file... file
checking for objdump... objdump
checking how to recognize dependent libraries... pass_all
checking for dlltool... no
checking how to associate runtime and link libraries... printf %s\n
checking for ar... ar
checking for archiver @FILE support... no
checking for strip... strip
checking for ranlib... ranlib
checking command to parse /usr/bin/nm -B output from gcc object... ok
checking for sysroot... no
checking for a working dd... /bin/dd
checking how to truncate binary pipes... /bin/dd bs=4096 count=1
checking for mt... no
checking if : is a manifest tool... no
checking for dsymutil... dsymutil
checking for nmedit... nmedit
checking for lipo... lipo
checking for otool... otool
checking for otool64... no
checking for -single_module linker flag... yes
checking for -exported_symbols_list linker flag... yes
checking for -force_load linker flag... yes
checking for stdio.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for strings.h... yes
checking for sys/stat.h... yes
checking for sys/types.h... yes
checking for unistd.h... yes
checking for dlfcn.h... yes
checking for objdir... .libs
checking if gcc supports -fno-rtti -fno-exceptions... no
checking for gcc option to produce PIC... -fno-common -DPIC
checking if gcc PIC flag -fno-common -DPIC works... yes
checking if gcc static flag -static works... no
checking if gcc supports -c -o file.o... yes
checking if gcc supports -c -o file.o... (cached) yes
checking whether the gcc linker (/usr/bin/ld) supports shared libraries... yes
checking dynamic linker characteristics... darwin21.6.0 dyld
checking how to hardcode library paths into programs... immediate
checking whether stripping libraries is possible... yes
checking if libtool supports shared libraries... yes
checking whether to build shared libraries... yes
checking whether to build static libraries... yes
checking how to run the C++ preprocessor... g++ -std=c++17 -E
checking for ld used by g++ -std=c++17... /usr/bin/ld
checking if the linker (/usr/bin/ld) is GNU ld... no
checking whether the g++ -std=c++17 linker (/usr/bin/ld) supports shared libraries... yes
checking for g++ -std=c++17 option to produce PIC... -fno-common -DPIC
checking if g++ -std=c++17 PIC flag -fno-common -DPIC works... yes
checking if g++ -std=c++17 static flag -static works... no
checking if g++ -std=c++17 supports -c -o file.o... yes
checking if g++ -std=c++17 supports -c -o file.o... (cached) yes
checking whether the g++ -std=c++17 linker (/usr/bin/ld) supports shared libraries... yes
checking dynamic linker characteristics... darwin21.6.0 dyld
checking how to hardcode library paths into programs... immediate
checking for ar... /usr/bin/ar
checking for gcov... /usr/bin/gcov
checking for llvm-cov... no
checking for lcov... no
checking for python3.6... no
checking for python3.7... no
checking for python3.8... no
checking for python3.9... no
checking for python3.10... no
checking for python3.11... no
checking for python3... /usr/bin/python3
checking for genhtml... no
checking for git... /opt/homebrew/bin/git
checking for ccache... no
checking for xgettext... /opt/homebrew/bin/xgettext
checking for hexdump... /usr/bin/hexdump
checking for objcopy... no
checking for doxygen... no
checking whether C++ compiler accepts -Werror... yes
checking whether the linker accepts -Wl,-fatal_warnings... yes
checking whether C++ compiler accepts -Wall... yes
checking whether C++ compiler accepts -Wextra... yes
checking whether C++ compiler accepts -Wgnu... no
checking whether C++ compiler accepts -Wformat -Wformat-security... yes
checking whether C++ compiler accepts -Wvla... yes
checking whether C++ compiler accepts -Wshadow-field... no
checking whether C++ compiler accepts -Wthread-safety... no
checking whether C++ compiler accepts -Wloop-analysis... no
checking whether C++ compiler accepts -Wredundant-decls... yes
checking whether C++ compiler accepts -Wunused-member-function... no
checking whether C++ compiler accepts -Wdate-time... yes
checking whether C++ compiler accepts -Wconditional-uninitialized... no
checking whether C++ compiler accepts -Wduplicated-branches... yes
checking whether C++ compiler accepts -Wduplicated-cond... yes
checking whether C++ compiler accepts -Wlogical-op... yes
checking whether C++ compiler accepts -Woverloaded-virtual... yes
checking whether C++ compiler accepts -Wsuggest-override... yes
checking whether C++ compiler accepts -Wunreachable-code-loop-increment... no
checking whether C++ compiler accepts -Wimplicit-fallthrough... yes
checking whether C++ compiler accepts -Wunused-parameter... yes
checking whether C++ compiler accepts -Wself-assign... no
checking whether C++ compiler accepts -Wdeprecated-copy... yes
checking whether C++ compiler accepts -fno-extended-identifiers... yes
checking whether C++ compiler accepts -msse4.2... no
checking whether C++ compiler accepts -msse4.1... no
checking whether C++ compiler accepts -mavx -mavx2... no
checking whether C++ compiler accepts -msse4 -msha... no
checking whether C++ compiler accepts -mpclmul... no
checking for SSE4.2 intrinsics... no
checking for SSE4.1 intrinsics... no
checking for AVX2 intrinsics... no
checking for x86 SHA-NI intrinsics... no
checking whether C++ compiler accepts -march=armv8-a+crc+crypto... yes
checking whether C++ compiler accepts -march=armv8-a+crc+crypto... (cached) yes
checking for ARMv8 CRC32 intrinsics... no
checking for ARMv8 SHA-NI intrinsics... no
checking for brew... brew
checking whether the linker accepts -Wl,-headerpad_max_install_names... yes
checking whether byte ordering is bigendian... no
checking how to run the C preprocessor... gcc -E
checking whether gcc is Clang... no
checking whether pthreads work with "-pthread" and "-lpthread"... yes
checking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE
checking whether more special flags are required for pthreads... no
checking for PTHREAD_PRIO_INHERIT... yes
checking whether std::atomic can be used without link library... yes
checking for special C compiler options needed for large files... no
checking for _FILE_OFFSET_BITS value needed for large files... no
checking for g++ -std=c++17 options needed to detect all undeclared functions... none needed
checking whether strerror_r is declared... yes
checking whether strerror_r returns char *... no
checking for library containing clock_gettime... none required
checking whether C++ compiler accepts -fPIC... yes
checking whether C++ compiler accepts -fstack-reuse=none... yes
checking whether C++ compiler accepts -Wstack-protector... yes
checking whether C++ compiler accepts -fstack-protector-all... no
checking whether C++ compiler accepts -fcf-protection=full... no
checking whether C++ compiler accepts -fstack-clash-protection... yes
checking whether C++ preprocessor accepts -D_FORTIFY_SOURCE=2... yes
checking whether C++ preprocessor accepts -U_FORTIFY_SOURCE... yes
checking whether the linker accepts -Wl,--enable-reloc-section... no
checking whether the linker accepts -Wl,--dynamicbase... no
checking whether the linker accepts -Wl,--nxcompat... no
checking whether the linker accepts -Wl,--high-entropy-va... no
checking whether the linker accepts -Wl,-z,relro... no
checking whether the linker accepts -Wl,-z,now... no
checking whether the linker accepts -Wl,-z,separate-code... no
checking whether the linker accepts -fPIE -pie... yes
checking whether the linker accepts -Wl,-dead_strip... yes
checking whether the linker accepts -Wl,-dead_strip_dylibs... yes
checking whether the linker accepts -Wl,-bind_at_load... yes
checking for endian.h... no
checking for sys/endian.h... no
checking for byteswap.h... no
checking for stdio.h... (cached) yes
checking for stdlib.h... (cached) yes
checking for unistd.h... (cached) yes
checking for strings.h... (cached) yes
checking for sys/types.h... (cached) yes
checking for sys/stat.h... (cached) yes
checking for sys/select.h... yes
checking for sys/prctl.h... no
checking for sys/sysctl.h... yes
checking for vm/vm_param.h... no
checking for sys/vmmeter.h... yes
checking for sys/resources.h... no
checking whether getifaddrs is declared... yes
checking whether ifaddrs funcs can be used without link library... yes
checking whether freeifaddrs is declared... yes
checking whether ifaddrs funcs can be used without link library... yes
checking whether fork is declared... yes
checking whether setsid is declared... yes
checking whether pipe2 is declared... no
checking for timingsafe_bcmp... yes
checking whether le16toh is declared... no
checking whether le32toh is declared... no
checking whether le64toh is declared... no
checking whether htole16 is declared... no
checking whether htole32 is declared... no
checking whether htole64 is declared... no
checking whether be16toh is declared... no
checking whether be32toh is declared... no
checking whether be64toh is declared... no
checking whether htobe16 is declared... no
checking whether htobe32 is declared... no
checking whether htobe64 is declared... no
checking whether bswap_16 is declared... no
checking whether bswap_32 is declared... no
checking whether bswap_64 is declared... no
checking for __builtin_clzl... yes
checking for __builtin_clzll... yes
checking for getmemoryinfo... no
checking for mallopt M_ARENA_MAX... no
checking for posix_fallocate... no
checking for default visibility attribute... yes
checking for dllexport attribute... no
checking for thread_local support... yes
checking for gmtime_r... yes
checking for Linux getrandom syscall... no
checking for getentropy via random.h... yes
checking for sysctl... yes
checking for sysctl KERN_ARND... no
checking for if type char equals int8_t... no
checking for fdatasync... no
checking for F_FULLFSYNC... yes
checking for O_CLOEXEC... yes
checking for __builtin_prefetch... yes
checking for _mm_prefetch... no
checking for strong getauxval support in the system headers... no
checking for std::system... yes
checking for ::_wsystem... no
checking whether to build Bitcoin Core GUI... no
checking whether main function is needed for fuzz binary... checking whether the linker accepts ... no
yes
checking for __builtin_mul_overflow... yes
checking for sqlite3 >= 3.7.17... yes
checking whether to build wallet with support for sqlite... yes
checking whether Userspace, Statically Defined Tracing tracepoints are supported... no
checking for miniupnpc/miniupnpc.h... no
checking for miniupnpc/upnpcommands.h... no
checking for miniupnpc/upnperrors.h... no
checking for natpmp.h... no
checking for boostlib >= 1.64.0 (106400)... yes
checking whether Boost.Process can be used... yes
checking for seccomp-bpf (Linux x86-64)... no
checking for libevent >= 2.1.8... yes
checking for libevent_pthreads >= 2.1.8... yes
checking if evhttp_connection_get_peer expects const char**... no
checking for libzmq >= 4... no
configure: WARNING: libzmq version 4.x or greater not found, disabling
checking for libmultiprocess... no
checking whether to build bitcoind... yes
checking whether to build bitcoin-cli... yes
checking whether to build bitcoin-tx... yes
checking whether to build bitcoin-wallet... yes
checking whether to build bitcoin-util... yes
checking whether to build experimental bitcoin-chainstate... no
checking whether to build libraries... yes
checking if ccache should be used... no
checking if wallet should be enabled... yes
checking whether to build with support for UPnP... no
checking whether to build with support for NAT-PMP... no
checking whether to build test_bitcoin... yes
checking whether to reduce exports... no
checking that generated files are newer than configure... done
configure: creating ./config.status
config.status: creating libbitcoinconsensus.pc
config.status: creating Makefile
config.status: creating src/Makefile
config.status: creating doc/man/Makefile
config.status: creating share/setup.nsi
config.status: creating share/qt/Info.plist
config.status: creating test/config.ini
config.status: creating contrib/devtools/split-debug.sh
config.status: creating src/config/bitcoin-config.h
config.status: src/config/bitcoin-config.h is unchanged
config.status: executing depfiles commands
config.status: executing libtool commands
=== configuring in src/secp256k1 (/Users/mehul/Development/Bitcoin/bitcoin/src/secp256k1)
configure: running /bin/sh ./configure --disable-option-checking '--prefix=/usr/local'  '--without-wallet' '--with-gui=no' '--disable-shared' '--with-pic' '--enable-benchmark=no' '--enable-module-recovery' '--enable-module-schnorrsig' --cache-file=/dev/null --srcdir=.
checking build system type... aarch64-apple-darwin21.6.0
checking host system type... aarch64-apple-darwin21.6.0
checking for a BSD-compatible install... /opt/homebrew/bin/ginstall -c
checking whether build environment is sane... yes
checking for a race-free mkdir -p... /opt/homebrew/bin/gmkdir -p
checking for gawk... no
checking for mawk... no
checking for nawk... no
checking for awk... awk
checking whether make sets $(MAKE)... yes
checking whether make supports nested variables... yes
checking whether make supports nested variables... (cached) yes
checking for gcc... gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.out
checking for suffix of executables... 
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether the compiler supports GNU C... yes
checking whether gcc accepts -g... yes
checking for gcc option to enable C11 features... none needed
checking whether gcc understands -c and -o together... yes
checking whether make supports the include directive... yes (GNU style)
checking dependency style of gcc... gcc3
checking dependency style of gcc... gcc3
checking for ar... ar
checking the archiver (ar) interface... ar
checking how to print strings... printf
checking for a sed that does not truncate output... /usr/bin/sed
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for fgrep... /usr/bin/grep -F
checking for ld used by gcc... /usr/bin/ld
checking if the linker (/usr/bin/ld) is GNU ld... no
checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B
checking the name lister (/usr/bin/nm -B) interface... BSD nm
checking whether ln -s works... yes
checking the maximum length of command line arguments... 786432
checking how to convert aarch64-apple-darwin21.6.0 file names to aarch64-apple-darwin21.6.0 format... func_convert_file_noop
checking how to convert aarch64-apple-darwin21.6.0 file names to toolchain format... func_convert_file_noop
checking for /usr/bin/ld option to reload object files... -r
checking for file... file
checking for objdump... objdump
checking how to recognize dependent libraries... pass_all
checking for dlltool... no
checking how to associate runtime and link libraries... printf %s\n
checking for archiver @FILE support... no
checking for strip... strip
checking for ranlib... ranlib
checking command to parse /usr/bin/nm -B output from gcc object... ok
checking for sysroot... no
checking for a working dd... /bin/dd
checking how to truncate binary pipes... /bin/dd bs=4096 count=1
checking for mt... no
checking if : is a manifest tool... no
checking for dsymutil... dsymutil
checking for nmedit... nmedit
checking for lipo... lipo
checking for otool... otool
checking for otool64... no
checking for -single_module linker flag... yes
checking for -exported_symbols_list linker flag... yes
checking for -force_load linker flag... yes
checking for stdio.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for strings.h... yes
checking for sys/stat.h... yes
checking for sys/types.h... yes
checking for unistd.h... yes
checking for dlfcn.h... yes
checking for objdir... .libs
checking if gcc supports -fno-rtti -fno-exceptions... no
checking for gcc option to produce PIC... -fno-common -DPIC
checking if gcc PIC flag -fno-common -DPIC works... yes
checking if gcc static flag -static works... no
checking if gcc supports -c -o file.o... yes
checking if gcc supports -c -o file.o... (cached) yes
checking whether the gcc linker (/usr/bin/ld) supports shared libraries... yes
checking dynamic linker characteristics... darwin21.6.0 dyld
checking how to hardcode library paths into programs... immediate
checking whether stripping libraries is possible... yes
checking if libtool supports shared libraries... yes
checking whether to build shared libraries... no
checking whether to build static libraries... yes
checking for brew... brew
checking if gcc supports -Werror=unknown-warning-option... no
checking if gcc supports -std=c89 -pedantic -Wno-long-long -Wnested-externs -Wshadow -Wstrict-prototypes -Wundef... yes
checking if gcc supports -Wno-overlength-strings... yes
checking if gcc supports -Wall... yes
checking if gcc supports -Wno-unused-function... yes
checking if gcc supports -Wextra... yes
checking if gcc supports -Wcast-align... yes
checking if gcc supports -Wcast-align=strict... yes
checking if gcc supports -Wconditional-uninitialized... no
checking if gcc supports -fvisibility=hidden... yes
checking for x86_64 assembly availability... no
checking that generated files are newer than configure... done
configure: creating ./config.status
config.status: creating Makefile
config.status: creating libsecp256k1.pc
config.status: creating src/libsecp256k1-config.h
config.status: src/libsecp256k1-config.h is unchanged
config.status: executing depfiles commands
config.status: executing libtool commands

Build Options:
  with external callbacks = no
  with benchmarks         = no
  with tests              = yes
  with coverage           = no
  with examples           = no
  module ecdh             = no
  module recovery         = yes
  module extrakeys        = yes
  module schnorrsig       = yes

  asm                     = no
  ecmult window size      = 15
  ecmult gen prec. bits   = 4

  valgrind                = no
  CC                      = gcc
  CPPFLAGS                =  
  SECP_CFLAGS             = -O2  -std=c89 -pedantic -Wno-long-long -Wnested-externs -Wshadow -Wstrict-prototypes -Wundef -Wno-overlength-strings -Wall -Wno-unused-function -Wextra -Wcast-align -Wcast-align=strict -fvisibility=hidden 
  CFLAGS                  = -g -O2
  LDFLAGS                 = 

Options used to compile and link:
  external signer = yes
  multiprocess    = no
  with experimental syscall sandbox support = no
  with libs       = yes
  with wallet     = yes
    with sqlite   = yes
    with bdb      = yes
  with gui / qt   = no
  with zmq        = no
  with test       = yes
  with fuzz binary = yes
  with bench      = yes
  with upnp       = no
  with natpmp     = no
  use asm         = yes
  USDT tracing    = no
  sanitizers      = 
  debug enabled   = no
  gprof enabled   = no
  werror          = no
  LTO             = no

  target os       = darwin21.6.0
  build os        = darwin21.6.0

  CC              = gcc
  CFLAGS          = -pthread -g -O2
  CPPFLAGS        =   -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2  -DHAVE_BUILD_INFO -DMAC_OSX -DOBJC_OLD_DISPATCH_PROTOTYPES=0 -DPROVIDE_FUZZ_MAIN_FUNCTION 
  CXX             = g++ -std=c++17
  CXXFLAGS        =    -fstack-reuse=none -Wstack-protector -fstack-clash-protection  -Wall -Wextra -Wformat -Wformat-security -Wvla -Wredundant-decls -Wdate-time -Wduplicated-branches -Wduplicated-cond -Wlogical-op -Woverloaded-virtual -Wsuggest-override -Wimplicit-fallthrough  -Wno-unused-parameter -Wno-deprecated-copy    -fno-extended-identifiers -g -O2
  LDFLAGS         =  -lpthread  -pie -Wl,-bind_at_load   -Wl,-headerpad_max_install_names -Wl,-dead_strip -Wl,-dead_strip_dylibs 
  AR              = /usr/bin/ar
  ARFLAGS         = cr

mehul@Mehuls-MacBook bitcoin % ls
CONTRIBUTING.md			config.log
COPYING				config.status
INSTALL.md			configure
Makefile			configure.ac
Makefile.am			configure~
Makefile.in			contrib
README.md			depends
REVIEWERS			doc
SECURITY.md			libbitcoinconsensus.pc
aclocal.m4			libbitcoinconsensus.pc.in
autogen.sh			libtool
autom4te.cache			share
build-aux			src
build_msvc			test
ci
mehul@Mehuls-MacBook bitcoin % make
Making all in src
  CXXLD    bitcoind
Undefined symbols for architecture arm64:
  "__ZN2Db6verifyEPKcS1_PSoj", referenced from:
      __ZN6wallet16BerkeleyDatabase6VerifyER13bilingual_str in libbitcoin_wallet.a(libbitcoin_wallet_a-bdb.o)
ld: symbol(s) not found for architecture arm64
collect2: error: ld returned 1 exit status
make[2]: *** [bitcoind] Error 1
make[1]: *** [all-recursive] Error 1
make: *** [all-recursive] Error 1
mehul@Mehuls-MacBook bitcoin % cd ..
mehul@Mehuls-MacBook .Trash % cd /Users/mehul/Development/Bitcoin 
mehul@Mehuls-MacBook Bitcoin % brew uninstall berkeley-db@4
Uninstalling /opt/homebrew/Cellar/berkeley-db@4/4.8.30... (4,596 files, 78.0MB)
mehul@Mehuls-MacBook Bitcoin % brew install automake libtool boost pkg-config libevent
==> Auto-updated Homebrew!
Updated 1 tap (homebrew/core).

You have 8 outdated formulae installed.
You can upgrade them with brew upgrade
or list them with brew outdated.

Warning: automake 1.16.5 is already installed and up-to-date.
To reinstall 1.16.5, run:
  brew reinstall automake
Warning: libtool 2.4.7 is already installed and up-to-date.
To reinstall 2.4.7, run:
  brew reinstall libtool
Warning: boost 1.79.0_1 is already installed and up-to-date.
To reinstall 1.79.0_1, run:
  brew reinstall boost
Warning: pkg-config 0.29.2_3 is already installed and up-to-date.
To reinstall 0.29.2_3, run:
  brew reinstall pkg-config
Warning: libevent 2.1.12 is already installed and up-to-date.
To reinstall 2.1.12, run:
  brew reinstall libevent
mehul@Mehuls-MacBook Bitcoin % git clone https://github.com/bitcoin/bitcoin.git
Cloning into 'bitcoin'...
remote: Enumerating objects: 233999, done.
remote: Total 233999 (delta 0), reused 0 (delta 0), pack-reused 233999
Receiving objects: 100% (233999/233999), 206.53 MiB | 5.62 MiB/s, done.
Resolving deltas: 100% (166384/166384), done.
mehul@Mehuls-MacBook Bitcoin % cd bitcoin
mehul@Mehuls-MacBook bitcoin % ./autogen.sh
glibtoolize: putting auxiliary files in AC_CONFIG_AUX_DIR, 'build-aux'.
glibtoolize: copying file 'build-aux/ltmain.sh'
glibtoolize: putting macros in AC_CONFIG_MACRO_DIRS, 'build-aux/m4'.
glibtoolize: copying file 'build-aux/m4/libtool.m4'
glibtoolize: copying file 'build-aux/m4/ltoptions.m4'
glibtoolize: copying file 'build-aux/m4/ltsugar.m4'
glibtoolize: copying file 'build-aux/m4/ltversion.m4'
glibtoolize: copying file 'build-aux/m4/lt~obsolete.m4'
configure.ac:40: installing 'build-aux/ar-lib'
configure.ac:35: installing 'build-aux/compile'
configure.ac:24: installing 'build-aux/config.guess'
configure.ac:24: installing 'build-aux/config.sub'
configure.ac:30: installing 'build-aux/install-sh'
configure.ac:30: installing 'build-aux/missing'
Makefile.am: installing 'build-aux/depcomp'
parallel-tests: installing 'build-aux/test-driver'
glibtoolize: putting auxiliary files in AC_CONFIG_AUX_DIR, 'build-aux'.
glibtoolize: copying file 'build-aux/ltmain.sh'
glibtoolize: putting macros in AC_CONFIG_MACRO_DIRS, 'build-aux/m4'.
glibtoolize: copying file 'build-aux/m4/libtool.m4'
glibtoolize: copying file 'build-aux/m4/ltoptions.m4'
glibtoolize: copying file 'build-aux/m4/ltsugar.m4'
glibtoolize: copying file 'build-aux/m4/ltversion.m4'
glibtoolize: copying file 'build-aux/m4/lt~obsolete.m4'
configure.ac:115: installing 'build-aux/compile'
configure.ac:50: installing 'build-aux/config.guess'
configure.ac:50: installing 'build-aux/config.sub'
configure.ac:57: installing 'build-aux/install-sh'
configure.ac:57: installing 'build-aux/missing'
src/Makefile.bench.include:97: warning: %.raw.h was already defined in condition TRUE, which includes condition ENABLE_BENCH ...
src/Makefile.am:1079:   'src/Makefile.bench.include' included from here
src/Makefile.test.include:419: ... '%.raw.h' previously defined here
src/Makefile.am:1076:   'src/Makefile.test.include' included from here
src/Makefile.am: installing 'build-aux/depcomp'
parallel-tests: installing 'build-aux/test-driver'
mehul@Mehuls-MacBook bitcoin % ./configure --without-wallet --with-gui=no
checking for pkg-config... /opt/homebrew/bin/pkg-config
checking pkg-config is at least version 0.9.0... yes
checking build system type... aarch64-apple-darwin21.6.0
checking host system type... aarch64-apple-darwin21.6.0
checking for a BSD-compatible install... /opt/homebrew/bin/ginstall -c
checking whether build environment is sane... yes
checking for a race-free mkdir -p... /opt/homebrew/bin/gmkdir -p
checking for gawk... no
checking for mawk... no
checking for nawk... no
checking for awk... awk
checking whether make sets $(MAKE)... yes
checking whether make supports nested variables... yes
checking whether to enable maintainer-specific portions of Makefiles... yes
checking whether make supports nested variables... (cached) yes
checking for g++... g++
checking whether the C++ compiler works... yes
checking for C++ compiler default output file name... a.out
checking for suffix of executables... 
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether the compiler supports GNU C++... yes
checking whether g++ accepts -g... yes
checking for g++ option to enable C++11 features... none needed
checking whether make supports the include directive... yes (GNU style)
checking dependency style of g++... gcc3
checking whether g++ supports C++17 features with -std=c++17... yes
checking whether std::filesystem can be used without link library... yes
checking whether the compiler supports GNU Objective C++... yes
checking whether g++ -std=c++17 accepts -g... yes
checking dependency style of g++ -std=c++17... gcc3
checking how to print strings... printf
checking for gcc... gcc
checking whether the compiler supports GNU C... yes
checking whether gcc accepts -g... yes
checking for gcc option to enable C11 features... none needed
checking whether gcc understands -c and -o together... yes
checking dependency style of gcc... gcc3
checking for a sed that does not truncate output... /usr/bin/sed
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for fgrep... /usr/bin/grep -F
checking for ld used by gcc... /usr/bin/ld
checking if the linker (/usr/bin/ld) is GNU ld... no
checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B
checking the name lister (/usr/bin/nm -B) interface... BSD nm
checking whether ln -s works... yes
checking the maximum length of command line arguments... 786432
checking how to convert aarch64-apple-darwin21.6.0 file names to aarch64-apple-darwin21.6.0 format... func_convert_file_noop
checking how to convert aarch64-apple-darwin21.6.0 file names to toolchain format... func_convert_file_noop
checking for /usr/bin/ld option to reload object files... -r
checking for file... file
checking for objdump... objdump
checking how to recognize dependent libraries... pass_all
checking for dlltool... no
checking how to associate runtime and link libraries... printf %s\n
checking for ar... ar
checking for archiver @FILE support... no
checking for strip... strip
checking for ranlib... ranlib
checking command to parse /usr/bin/nm -B output from gcc object... ok
checking for sysroot... no
checking for a working dd... /bin/dd
checking how to truncate binary pipes... /bin/dd bs=4096 count=1
checking for mt... no
checking if : is a manifest tool... no
checking for dsymutil... dsymutil
checking for nmedit... nmedit
checking for lipo... lipo
checking for otool... otool
checking for otool64... no
checking for -single_module linker flag... yes
checking for -exported_symbols_list linker flag... yes
checking for -force_load linker flag... yes
checking for stdio.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for strings.h... yes
checking for sys/stat.h... yes
checking for sys/types.h... yes
checking for unistd.h... yes
checking for dlfcn.h... yes
checking for objdir... .libs
checking if gcc supports -fno-rtti -fno-exceptions... no
checking for gcc option to produce PIC... -fno-common -DPIC
checking if gcc PIC flag -fno-common -DPIC works... yes
checking if gcc static flag -static works... no
checking if gcc supports -c -o file.o... yes
checking if gcc supports -c -o file.o... (cached) yes
checking whether the gcc linker (/usr/bin/ld) supports shared libraries... yes
checking dynamic linker characteristics... darwin21.6.0 dyld
checking how to hardcode library paths into programs... immediate
checking whether stripping libraries is possible... yes
checking if libtool supports shared libraries... yes
checking whether to build shared libraries... yes
checking whether to build static libraries... yes
checking how to run the C++ preprocessor... g++ -std=c++17 -E
checking for ld used by g++ -std=c++17... /usr/bin/ld
checking if the linker (/usr/bin/ld) is GNU ld... no
checking whether the g++ -std=c++17 linker (/usr/bin/ld) supports shared libraries... yes
checking for g++ -std=c++17 option to produce PIC... -fno-common -DPIC
checking if g++ -std=c++17 PIC flag -fno-common -DPIC works... yes
checking if g++ -std=c++17 static flag -static works... no
checking if g++ -std=c++17 supports -c -o file.o... yes
checking if g++ -std=c++17 supports -c -o file.o... (cached) yes
checking whether the g++ -std=c++17 linker (/usr/bin/ld) supports shared libraries... yes
checking dynamic linker characteristics... darwin21.6.0 dyld
checking how to hardcode library paths into programs... immediate
checking for ar... /usr/bin/ar
checking for gcov... /usr/bin/gcov
checking for llvm-cov... no
checking for lcov... no
checking for python3.6... no
checking for python3.7... no
checking for python3.8... no
checking for python3.9... no
checking for python3.10... no
checking for python3.11... no
checking for python3... /usr/bin/python3
checking for genhtml... no
checking for git... /opt/homebrew/bin/git
checking for ccache... no
checking for xgettext... /opt/homebrew/bin/xgettext
checking for hexdump... /usr/bin/hexdump
checking for objcopy... no
checking for doxygen... no
checking whether C++ compiler accepts -Werror... yes
checking whether the linker accepts -Wl,-fatal_warnings... yes
checking whether C++ compiler accepts -Wall... yes
checking whether C++ compiler accepts -Wextra... yes
checking whether C++ compiler accepts -Wgnu... no
checking whether C++ compiler accepts -Wformat -Wformat-security... yes
checking whether C++ compiler accepts -Wvla... yes
checking whether C++ compiler accepts -Wshadow-field... no
checking whether C++ compiler accepts -Wthread-safety... no
checking whether C++ compiler accepts -Wloop-analysis... no
checking whether C++ compiler accepts -Wredundant-decls... yes
checking whether C++ compiler accepts -Wunused-member-function... no
checking whether C++ compiler accepts -Wdate-time... yes
checking whether C++ compiler accepts -Wconditional-uninitialized... no
checking whether C++ compiler accepts -Wduplicated-branches... yes
checking whether C++ compiler accepts -Wduplicated-cond... yes
checking whether C++ compiler accepts -Wlogical-op... yes
checking whether C++ compiler accepts -Woverloaded-virtual... yes
checking whether C++ compiler accepts -Wsuggest-override... yes
checking whether C++ compiler accepts -Wunreachable-code-loop-increment... no
checking whether C++ compiler accepts -Wimplicit-fallthrough... yes
checking whether C++ compiler accepts -Wunused-parameter... yes
checking whether C++ compiler accepts -Wself-assign... no
checking whether C++ compiler accepts -Wdeprecated-copy... yes
checking whether C++ compiler accepts -fno-extended-identifiers... yes
checking whether C++ compiler accepts -msse4.2... no
checking whether C++ compiler accepts -msse4.1... no
checking whether C++ compiler accepts -mavx -mavx2... no
checking whether C++ compiler accepts -msse4 -msha... no
checking whether C++ compiler accepts -mpclmul... no
checking for SSE4.2 intrinsics... no
checking for SSE4.1 intrinsics... no
checking for AVX2 intrinsics... no
checking for x86 SHA-NI intrinsics... no
checking whether C++ compiler accepts -march=armv8-a+crc+crypto... yes
checking whether C++ compiler accepts -march=armv8-a+crc+crypto... (cached) yes
checking for ARMv8 CRC32 intrinsics... no
checking for ARMv8 SHA-NI intrinsics... no
checking for brew... brew
checking whether the linker accepts -Wl,-headerpad_max_install_names... yes
checking whether byte ordering is bigendian... no
checking how to run the C preprocessor... gcc -E
checking whether gcc is Clang... no
checking whether pthreads work with "-pthread" and "-lpthread"... yes
checking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE
checking whether more special flags are required for pthreads... no
checking for PTHREAD_PRIO_INHERIT... yes
checking whether std::atomic can be used without link library... yes
checking for special C compiler options needed for large files... no
checking for _FILE_OFFSET_BITS value needed for large files... no
checking for g++ -std=c++17 options needed to detect all undeclared functions... none needed
checking whether strerror_r is declared... yes
checking whether strerror_r returns char *... no
checking for library containing clock_gettime... none required
checking whether C++ compiler accepts -fPIC... yes
checking whether C++ compiler accepts -fstack-reuse=none... yes
checking whether C++ compiler accepts -Wstack-protector... yes
checking whether C++ compiler accepts -fstack-protector-all... no
checking whether C++ compiler accepts -fcf-protection=full... no
checking whether C++ compiler accepts -fstack-clash-protection... yes
checking whether C++ preprocessor accepts -D_FORTIFY_SOURCE=2... yes
checking whether C++ preprocessor accepts -U_FORTIFY_SOURCE... yes
checking whether the linker accepts -Wl,--enable-reloc-section... no
checking whether the linker accepts -Wl,--dynamicbase... no
checking whether the linker accepts -Wl,--nxcompat... no
checking whether the linker accepts -Wl,--high-entropy-va... no
checking whether the linker accepts -Wl,-z,relro... no
checking whether the linker accepts -Wl,-z,now... no
checking whether the linker accepts -Wl,-z,separate-code... no
checking whether the linker accepts -fPIE -pie... yes
checking whether the linker accepts -Wl,-dead_strip... yes
checking whether the linker accepts -Wl,-dead_strip_dylibs... yes
checking whether the linker accepts -Wl,-bind_at_load... yes
checking for endian.h... no
checking for sys/endian.h... no
checking for byteswap.h... no
checking for stdio.h... (cached) yes
checking for stdlib.h... (cached) yes
checking for unistd.h... (cached) yes
checking for strings.h... (cached) yes
checking for sys/types.h... (cached) yes
checking for sys/stat.h... (cached) yes
checking for sys/select.h... yes
checking for sys/prctl.h... no
checking for sys/sysctl.h... yes
checking for vm/vm_param.h... no
checking for sys/vmmeter.h... yes
checking for sys/resources.h... no
checking whether getifaddrs is declared... yes
checking whether ifaddrs funcs can be used without link library... yes
checking whether freeifaddrs is declared... yes
checking whether ifaddrs funcs can be used without link library... yes
checking whether fork is declared... yes
checking whether setsid is declared... yes
checking whether pipe2 is declared... no
checking for timingsafe_bcmp... yes
checking whether le16toh is declared... no
checking whether le32toh is declared... no
checking whether le64toh is declared... no
checking whether htole16 is declared... no
checking whether htole32 is declared... no
checking whether htole64 is declared... no
checking whether be16toh is declared... no
checking whether be32toh is declared... no
checking whether be64toh is declared... no
checking whether htobe16 is declared... no
checking whether htobe32 is declared... no
checking whether htobe64 is declared... no
checking whether bswap_16 is declared... no
checking whether bswap_32 is declared... no
checking whether bswap_64 is declared... no
checking for __builtin_clzl... yes
checking for __builtin_clzll... yes
checking for getmemoryinfo... no
checking for mallopt M_ARENA_MAX... no
checking for posix_fallocate... no
checking for default visibility attribute... yes
checking for dllexport attribute... no
checking for thread_local support... yes
checking for gmtime_r... yes
checking for Linux getrandom syscall... no
checking for getentropy via random.h... yes
checking for sysctl... yes
checking for sysctl KERN_ARND... no
checking for if type char equals int8_t... no
checking for fdatasync... no
checking for F_FULLFSYNC... yes
checking for O_CLOEXEC... yes
checking for __builtin_prefetch... yes
checking for _mm_prefetch... no
checking for strong getauxval support in the system headers... no
checking for std::system... yes
checking for ::_wsystem... no
checking whether to build Bitcoin Core GUI... no
checking whether main function is needed for fuzz binary... checking whether the linker accepts ... no
yes
checking for __builtin_mul_overflow... yes
checking for Berkeley DB C++ headers... no
configure: WARNING: libdb_cxx headers missing
configure: WARNING: Bitcoin Core requires this library for BDB (legacy) wallet support
configure: WARNING: Passing --without-bdb will suppress this warning
checking for sqlite3 >= 3.7.17... yes
checking whether to build wallet with support for sqlite... yes
checking whether Userspace, Statically Defined Tracing tracepoints are supported... no
checking for miniupnpc/miniupnpc.h... no
checking for miniupnpc/upnpcommands.h... no
checking for miniupnpc/upnperrors.h... no
checking for natpmp.h... no
checking for boostlib >= 1.64.0 (106400)... yes
checking whether Boost.Process can be used... yes
checking for seccomp-bpf (Linux x86-64)... no
checking for libevent >= 2.1.8... yes
checking for libevent_pthreads >= 2.1.8... yes
checking if evhttp_connection_get_peer expects const char**... no
checking for libzmq >= 4... no
configure: WARNING: libzmq version 4.x or greater not found, disabling
checking for libmultiprocess... no
checking whether to build bitcoind... yes
checking whether to build bitcoin-cli... yes
checking whether to build bitcoin-tx... yes
checking whether to build bitcoin-wallet... yes
checking whether to build bitcoin-util... yes
checking whether to build experimental bitcoin-chainstate... no
checking whether to build libraries... yes
checking if ccache should be used... no
checking if wallet should be enabled... yes
checking whether to build with support for UPnP... no
checking whether to build with support for NAT-PMP... no
checking whether to build test_bitcoin... yes
checking whether to reduce exports... no
checking that generated files are newer than configure... done
configure: creating ./config.status
config.status: creating libbitcoinconsensus.pc
config.status: creating Makefile
config.status: creating src/Makefile
config.status: creating doc/man/Makefile
config.status: creating share/setup.nsi
config.status: creating share/qt/Info.plist
config.status: creating test/config.ini
config.status: creating contrib/devtools/split-debug.sh
config.status: creating src/config/bitcoin-config.h
config.status: executing depfiles commands
config.status: executing libtool commands
=== configuring in src/secp256k1 (/Users/mehul/Development/Bitcoin/bitcoin/src/secp256k1)
configure: running /bin/sh ./configure --disable-option-checking '--prefix=/usr/local'  '--without-wallet' '--with-gui=no' '--disable-shared' '--with-pic' '--enable-benchmark=no' '--enable-module-recovery' '--enable-module-schnorrsig' --cache-file=/dev/null --srcdir=.
checking build system type... aarch64-apple-darwin21.6.0
checking host system type... aarch64-apple-darwin21.6.0
checking for a BSD-compatible install... /opt/homebrew/bin/ginstall -c
checking whether build environment is sane... yes
checking for a race-free mkdir -p... /opt/homebrew/bin/gmkdir -p
checking for gawk... no
checking for mawk... no
checking for nawk... no
checking for awk... awk
checking whether make sets $(MAKE)... yes
checking whether make supports nested variables... yes
checking whether make supports nested variables... (cached) yes
checking for gcc... gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.out
checking for suffix of executables... 
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether the compiler supports GNU C... yes
checking whether gcc accepts -g... yes
checking for gcc option to enable C11 features... none needed
checking whether gcc understands -c and -o together... yes
checking whether make supports the include directive... yes (GNU style)
checking dependency style of gcc... gcc3
checking dependency style of gcc... gcc3
checking for ar... ar
checking the archiver (ar) interface... ar
checking how to print strings... printf
checking for a sed that does not truncate output... /usr/bin/sed
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for fgrep... /usr/bin/grep -F
checking for ld used by gcc... /usr/bin/ld
checking if the linker (/usr/bin/ld) is GNU ld... no
checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B
checking the name lister (/usr/bin/nm -B) interface... BSD nm
checking whether ln -s works... yes
checking the maximum length of command line arguments... 786432
checking how to convert aarch64-apple-darwin21.6.0 file names to aarch64-apple-darwin21.6.0 format... func_convert_file_noop
checking how to convert aarch64-apple-darwin21.6.0 file names to toolchain format... func_convert_file_noop
checking for /usr/bin/ld option to reload object files... -r
checking for file... file
checking for objdump... objdump
checking how to recognize dependent libraries... pass_all
checking for dlltool... no
checking how to associate runtime and link libraries... printf %s\n
checking for archiver @FILE support... no
checking for strip... strip
checking for ranlib... ranlib
checking command to parse /usr/bin/nm -B output from gcc object... ok
checking for sysroot... no
checking for a working dd... /bin/dd
checking how to truncate binary pipes... /bin/dd bs=4096 count=1
checking for mt... no
checking if : is a manifest tool... no
checking for dsymutil... dsymutil
checking for nmedit... nmedit
checking for lipo... lipo
checking for otool... otool
checking for otool64... no
checking for -single_module linker flag... yes
checking for -exported_symbols_list linker flag... yes
checking for -force_load linker flag... yes
checking for stdio.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for strings.h... yes
checking for sys/stat.h... yes
checking for sys/types.h... yes
checking for unistd.h... yes
checking for dlfcn.h... yes
checking for objdir... .libs
checking if gcc supports -fno-rtti -fno-exceptions... no
checking for gcc option to produce PIC... -fno-common -DPIC
checking if gcc PIC flag -fno-common -DPIC works... yes
checking if gcc static flag -static works... no
checking if gcc supports -c -o file.o... yes
checking if gcc supports -c -o file.o... (cached) yes
checking whether the gcc linker (/usr/bin/ld) supports shared libraries... yes
checking dynamic linker characteristics... darwin21.6.0 dyld
checking how to hardcode library paths into programs... immediate
checking whether stripping libraries is possible... yes
checking if libtool supports shared libraries... yes
checking whether to build shared libraries... no
checking whether to build static libraries... yes
checking for brew... brew
checking if gcc supports -Werror=unknown-warning-option... no
checking if gcc supports -std=c89 -pedantic -Wno-long-long -Wnested-externs -Wshadow -Wstrict-prototypes -Wundef... yes
checking if gcc supports -Wno-overlength-strings... yes
checking if gcc supports -Wall... yes
checking if gcc supports -Wno-unused-function... yes
checking if gcc supports -Wextra... yes
checking if gcc supports -Wcast-align... yes
checking if gcc supports -Wcast-align=strict... yes
checking if gcc supports -Wconditional-uninitialized... no
checking if gcc supports -fvisibility=hidden... yes
checking for x86_64 assembly availability... no
checking that generated files are newer than configure... done
configure: creating ./config.status
config.status: creating Makefile
config.status: creating libsecp256k1.pc
config.status: creating src/libsecp256k1-config.h
config.status: executing depfiles commands
config.status: executing libtool commands

Build Options:
  with external callbacks = no
  with benchmarks         = no
  with tests              = yes
  with coverage           = no
  with examples           = no
  module ecdh             = no
  module recovery         = yes
  module extrakeys        = yes
  module schnorrsig       = yes

  asm                     = no
  ecmult window size      = 15
  ecmult gen prec. bits   = 4

  valgrind                = no
  CC                      = gcc
  CPPFLAGS                =  
  SECP_CFLAGS             = -O2  -std=c89 -pedantic -Wno-long-long -Wnested-externs -Wshadow -Wstrict-prototypes -Wundef -Wno-overlength-strings -Wall -Wno-unused-function -Wextra -Wcast-align -Wcast-align=strict -fvisibility=hidden 
  CFLAGS                  = -g -O2
  LDFLAGS                 = 

Options used to compile and link:
  external signer = yes
  multiprocess    = no
  with experimental syscall sandbox support = no
  with libs       = yes
  with wallet     = yes
    with sqlite   = yes
    with bdb      = no
  with gui / qt   = no
  with zmq        = no
  with test       = yes
  with fuzz binary = yes
  with bench      = yes
  with upnp       = no
  with natpmp     = no
  use asm         = yes
  USDT tracing    = no
  sanitizers      = 
  debug enabled   = no
  gprof enabled   = no
  werror          = no
  LTO             = no

  target os       = darwin21.6.0
  build os        = darwin21.6.0

  CC              = gcc
  CFLAGS          = -pthread -g -O2
  CPPFLAGS        =   -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2  -DHAVE_BUILD_INFO -DMAC_OSX -DOBJC_OLD_DISPATCH_PROTOTYPES=0 -DPROVIDE_FUZZ_MAIN_FUNCTION 
  CXX             = g++ -std=c++17
  CXXFLAGS        =    -fstack-reuse=none -Wstack-protector -fstack-clash-protection  -Wall -Wextra -Wformat -Wformat-security -Wvla -Wredundant-decls -Wdate-time -Wduplicated-branches -Wduplicated-cond -Wlogical-op -Woverloaded-virtual -Wsuggest-override -Wimplicit-fallthrough  -Wno-unused-parameter -Wno-deprecated-copy    -fno-extended-identifiers -g -O2
  LDFLAGS         =  -lpthread  -pie -Wl,-bind_at_load   -Wl,-headerpad_max_install_names -Wl,-dead_strip -Wl,-dead_strip_dylibs 
  AR              = /usr/bin/ar
  ARFLAGS         = cr

mehul@Mehuls-MacBook bitcoin % ./configure --without-wallet --with-gui=no
checking for pkg-config... /opt/homebrew/bin/pkg-config
checking pkg-config is at least version 0.9.0... yes
checking build system type... aarch64-apple-darwin21.6.0
checking host system type... aarch64-apple-darwin21.6.0
checking for a BSD-compatible install... /opt/homebrew/bin/ginstall -c
checking whether build environment is sane... yes
checking for a race-free mkdir -p... /opt/homebrew/bin/gmkdir -p
checking for gawk... no
checking for mawk... no
checking for nawk... no
checking for awk... awk
checking whether make sets $(MAKE)... yes
checking whether make supports nested variables... yes
checking whether to enable maintainer-specific portions of Makefiles... yes
checking whether make supports nested variables... (cached) yes
checking for g++... g++
checking whether the C++ compiler works... yes
checking for C++ compiler default output file name... a.out
checking for suffix of executables... 
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether the compiler supports GNU C++... yes
checking whether g++ accepts -g... yes
checking for g++ option to enable C++11 features... none needed
checking whether make supports the include directive... yes (GNU style)
checking dependency style of g++... gcc3
checking whether g++ supports C++17 features with -std=c++17... yes
checking whether std::filesystem can be used without link library... yes
checking whether the compiler supports GNU Objective C++... yes
checking whether g++ -std=c++17 accepts -g... yes
checking dependency style of g++ -std=c++17... gcc3
checking how to print strings... printf
checking for gcc... gcc
checking whether the compiler supports GNU C... yes
checking whether gcc accepts -g... yes
checking for gcc option to enable C11 features... none needed
checking whether gcc understands -c and -o together... yes
checking dependency style of gcc... gcc3
checking for a sed that does not truncate output... /usr/bin/sed
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for fgrep... /usr/bin/grep -F
checking for ld used by gcc... /usr/bin/ld
checking if the linker (/usr/bin/ld) is GNU ld... no
checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B
checking the name lister (/usr/bin/nm -B) interface... BSD nm
checking whether ln -s works... yes
checking the maximum length of command line arguments... 786432
checking how to convert aarch64-apple-darwin21.6.0 file names to aarch64-apple-darwin21.6.0 format... func_convert_file_noop
checking how to convert aarch64-apple-darwin21.6.0 file names to toolchain format... func_convert_file_noop
checking for /usr/bin/ld option to reload object files... -r
checking for file... file
checking for objdump... objdump
checking how to recognize dependent libraries... pass_all
checking for dlltool... no
checking how to associate runtime and link libraries... printf %s\n
checking for ar... ar
checking for archiver @FILE support... no
checking for strip... strip
checking for ranlib... ranlib
checking command to parse /usr/bin/nm -B output from gcc object... ok
checking for sysroot... no
checking for a working dd... /bin/dd
checking how to truncate binary pipes... /bin/dd bs=4096 count=1
checking for mt... no
checking if : is a manifest tool... no
checking for dsymutil... dsymutil
checking for nmedit... nmedit
checking for lipo... lipo
checking for otool... otool
checking for otool64... no
checking for -single_module linker flag... yes
checking for -exported_symbols_list linker flag... yes
checking for -force_load linker flag... yes
checking for stdio.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for strings.h... yes
checking for sys/stat.h... yes
checking for sys/types.h... yes
checking for unistd.h... yes
checking for dlfcn.h... yes
checking for objdir... .libs
checking if gcc supports -fno-rtti -fno-exceptions... no
checking for gcc option to produce PIC... -fno-common -DPIC
checking if gcc PIC flag -fno-common -DPIC works... yes
checking if gcc static flag -static works... no
checking if gcc supports -c -o file.o... yes
checking if gcc supports -c -o file.o... (cached) yes
checking whether the gcc linker (/usr/bin/ld) supports shared libraries... yes
checking dynamic linker characteristics... darwin21.6.0 dyld
checking how to hardcode library paths into programs... immediate
checking whether stripping libraries is possible... yes
checking if libtool supports shared libraries... yes
checking whether to build shared libraries... yes
checking whether to build static libraries... yes
checking how to run the C++ preprocessor... g++ -std=c++17 -E
checking for ld used by g++ -std=c++17... /usr/bin/ld
checking if the linker (/usr/bin/ld) is GNU ld... no
checking whether the g++ -std=c++17 linker (/usr/bin/ld) supports shared libraries... yes
checking for g++ -std=c++17 option to produce PIC... -fno-common -DPIC
checking if g++ -std=c++17 PIC flag -fno-common -DPIC works... yes
checking if g++ -std=c++17 static flag -static works... no
checking if g++ -std=c++17 supports -c -o file.o... yes
checking if g++ -std=c++17 supports -c -o file.o... (cached) yes
checking whether the g++ -std=c++17 linker (/usr/bin/ld) supports shared libraries... yes
checking dynamic linker characteristics... darwin21.6.0 dyld
checking how to hardcode library paths into programs... immediate
checking for ar... /usr/bin/ar
checking for gcov... /usr/bin/gcov
checking for llvm-cov... no
checking for lcov... no
checking for python3.6... no
checking for python3.7... no
checking for python3.8... no
checking for python3.9... no
checking for python3.10... no
checking for python3.11... no
checking for python3... /usr/bin/python3
checking for genhtml... no
checking for git... /opt/homebrew/bin/git
checking for ccache... no
checking for xgettext... /opt/homebrew/bin/xgettext
checking for hexdump... /usr/bin/hexdump
checking for objcopy... no
checking for doxygen... no
checking whether C++ compiler accepts -Werror... yes
checking whether the linker accepts -Wl,-fatal_warnings... yes
checking whether C++ compiler accepts -Wall... yes
checking whether C++ compiler accepts -Wextra... yes
checking whether C++ compiler accepts -Wgnu... no
checking whether C++ compiler accepts -Wformat -Wformat-security... yes
checking whether C++ compiler accepts -Wvla... yes
checking whether C++ compiler accepts -Wshadow-field... no
checking whether C++ compiler accepts -Wthread-safety... no
checking whether C++ compiler accepts -Wloop-analysis... no
checking whether C++ compiler accepts -Wredundant-decls... yes
checking whether C++ compiler accepts -Wunused-member-function... no
checking whether C++ compiler accepts -Wdate-time... yes
checking whether C++ compiler accepts -Wconditional-uninitialized... no
checking whether C++ compiler accepts -Wduplicated-branches... yes
checking whether C++ compiler accepts -Wduplicated-cond... yes
checking whether C++ compiler accepts -Wlogical-op... yes
checking whether C++ compiler accepts -Woverloaded-virtual... yes
checking whether C++ compiler accepts -Wsuggest-override... yes
checking whether C++ compiler accepts -Wunreachable-code-loop-increment... no
checking whether C++ compiler accepts -Wimplicit-fallthrough... yes
checking whether C++ compiler accepts -Wunused-parameter... yes
checking whether C++ compiler accepts -Wself-assign... no
checking whether C++ compiler accepts -Wdeprecated-copy... yes
checking whether C++ compiler accepts -fno-extended-identifiers... yes
checking whether C++ compiler accepts -msse4.2... no
checking whether C++ compiler accepts -msse4.1... no
checking whether C++ compiler accepts -mavx -mavx2... no
checking whether C++ compiler accepts -msse4 -msha... no
checking whether C++ compiler accepts -mpclmul... no
checking for SSE4.2 intrinsics... no
checking for SSE4.1 intrinsics... no
checking for AVX2 intrinsics... no
checking for x86 SHA-NI intrinsics... no
checking whether C++ compiler accepts -march=armv8-a+crc+crypto... yes
checking whether C++ compiler accepts -march=armv8-a+crc+crypto... (cached) yes
checking for ARMv8 CRC32 intrinsics... no
checking for ARMv8 SHA-NI intrinsics... no
checking for brew... brew
checking whether the linker accepts -Wl,-headerpad_max_install_names... yes
checking whether byte ordering is bigendian... no
checking how to run the C preprocessor... gcc -E
checking whether gcc is Clang... no
checking whether pthreads work with "-pthread" and "-lpthread"... yes
checking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE
checking whether more special flags are required for pthreads... no
checking for PTHREAD_PRIO_INHERIT... yes
checking whether std::atomic can be used without link library... yes
checking for special C compiler options needed for large files... no
checking for _FILE_OFFSET_BITS value needed for large files... no
checking for g++ -std=c++17 options needed to detect all undeclared functions... none needed
checking whether strerror_r is declared... yes
checking whether strerror_r returns char *... no
checking for library containing clock_gettime... none required
checking whether C++ compiler accepts -fPIC... yes
checking whether C++ compiler accepts -fstack-reuse=none... yes
checking whether C++ compiler accepts -Wstack-protector... yes
checking whether C++ compiler accepts -fstack-protector-all... no
checking whether C++ compiler accepts -fcf-protection=full... no
checking whether C++ compiler accepts -fstack-clash-protection... yes
checking whether C++ preprocessor accepts -D_FORTIFY_SOURCE=2... yes
checking whether C++ preprocessor accepts -U_FORTIFY_SOURCE... yes
checking whether the linker accepts -Wl,--enable-reloc-section... no
checking whether the linker accepts -Wl,--dynamicbase... no
checking whether the linker accepts -Wl,--nxcompat... no
checking whether the linker accepts -Wl,--high-entropy-va... no
checking whether the linker accepts -Wl,-z,relro... no
checking whether the linker accepts -Wl,-z,now... no
checking whether the linker accepts -Wl,-z,separate-code... no
checking whether the linker accepts -fPIE -pie... yes
checking whether the linker accepts -Wl,-dead_strip... yes
checking whether the linker accepts -Wl,-dead_strip_dylibs... yes
checking whether the linker accepts -Wl,-bind_at_load... yes
checking for endian.h... no
checking for sys/endian.h... no
checking for byteswap.h... no
checking for stdio.h... (cached) yes
checking for stdlib.h... (cached) yes
checking for unistd.h... (cached) yes
checking for strings.h... (cached) yes
checking for sys/types.h... (cached) yes
checking for sys/stat.h... (cached) yes
checking for sys/select.h... yes
checking for sys/prctl.h... no
checking for sys/sysctl.h... yes
checking for vm/vm_param.h... no
checking for sys/vmmeter.h... yes
checking for sys/resources.h... no
checking whether getifaddrs is declared... yes
checking whether ifaddrs funcs can be used without link library... yes
checking whether freeifaddrs is declared... yes
checking whether ifaddrs funcs can be used without link library... yes
checking whether fork is declared... yes
checking whether setsid is declared... yes
checking whether pipe2 is declared... no
checking for timingsafe_bcmp... yes
checking whether le16toh is declared... no
checking whether le32toh is declared... no
checking whether le64toh is declared... no
checking whether htole16 is declared... no
checking whether htole32 is declared... no
checking whether htole64 is declared... no
checking whether be16toh is declared... no
checking whether be32toh is declared... no
checking whether be64toh is declared... no
checking whether htobe16 is declared... no
checking whether htobe32 is declared... no
checking whether htobe64 is declared... no
checking whether bswap_16 is declared... no
checking whether bswap_32 is declared... no
checking whether bswap_64 is declared... no
checking for __builtin_clzl... yes
checking for __builtin_clzll... yes
checking for getmemoryinfo... no
checking for mallopt M_ARENA_MAX... no
checking for posix_fallocate... no
checking for default visibility attribute... yes
checking for dllexport attribute... no
checking for thread_local support... yes
checking for gmtime_r... yes
checking for Linux getrandom syscall... no
checking for getentropy via random.h... yes
checking for sysctl... yes
checking for sysctl KERN_ARND... no
checking for if type char equals int8_t... no
checking for fdatasync... no
checking for F_FULLFSYNC... yes
checking for O_CLOEXEC... yes
checking for __builtin_prefetch... yes
checking for _mm_prefetch... no
checking for strong getauxval support in the system headers... no
checking for std::system... yes
checking for ::_wsystem... no
checking whether to build Bitcoin Core GUI... no
checking whether main function is needed for fuzz binary... checking whether the linker accepts ... no
yes
checking for __builtin_mul_overflow... yes
checking for Berkeley DB C++ headers... no
configure: WARNING: libdb_cxx headers missing
configure: WARNING: Bitcoin Core requires this library for BDB (legacy) wallet support
configure: WARNING: Passing --without-bdb will suppress this warning
checking for sqlite3 >= 3.7.17... yes
checking whether to build wallet with support for sqlite... yes
checking whether Userspace, Statically Defined Tracing tracepoints are supported... no
checking for miniupnpc/miniupnpc.h... no
checking for miniupnpc/upnpcommands.h... no
checking for miniupnpc/upnperrors.h... no
checking for natpmp.h... no
checking for boostlib >= 1.64.0 (106400)... yes
checking whether Boost.Process can be used... yes
checking for seccomp-bpf (Linux x86-64)... no
checking for libevent >= 2.1.8... yes
checking for libevent_pthreads >= 2.1.8... yes
checking if evhttp_connection_get_peer expects const char**... no
checking for libzmq >= 4... no
configure: WARNING: libzmq version 4.x or greater not found, disabling
checking for libmultiprocess... no
checking whether to build bitcoind... yes
checking whether to build bitcoin-cli... yes
checking whether to build bitcoin-tx... yes
checking whether to build bitcoin-wallet... yes
checking whether to build bitcoin-util... yes
checking whether to build experimental bitcoin-chainstate... no
checking whether to build libraries... yes
checking if ccache should be used... no
checking if wallet should be enabled... yes
checking whether to build with support for UPnP... no
checking whether to build with support for NAT-PMP... no
checking whether to build test_bitcoin... yes
checking whether to reduce exports... no
checking that generated files are newer than configure... done
configure: creating ./config.status
config.status: creating libbitcoinconsensus.pc
config.status: creating Makefile
config.status: creating src/Makefile
config.status: creating doc/man/Makefile
config.status: creating share/setup.nsi
config.status: creating share/qt/Info.plist
config.status: creating test/config.ini
config.status: creating contrib/devtools/split-debug.sh
config.status: creating src/config/bitcoin-config.h
config.status: src/config/bitcoin-config.h is unchanged
config.status: executing depfiles commands
config.status: executing libtool commands
=== configuring in src/secp256k1 (/Users/mehul/Development/Bitcoin/bitcoin/src/secp256k1)
configure: running /bin/sh ./configure --disable-option-checking '--prefix=/usr/local'  '--without-wallet' '--with-gui=no' '--disable-shared' '--with-pic' '--enable-benchmark=no' '--enable-module-recovery' '--enable-module-schnorrsig' --cache-file=/dev/null --srcdir=.
checking build system type... aarch64-apple-darwin21.6.0
checking host system type... aarch64-apple-darwin21.6.0
checking for a BSD-compatible install... /opt/homebrew/bin/ginstall -c
checking whether build environment is sane... yes
checking for a race-free mkdir -p... /opt/homebrew/bin/gmkdir -p
checking for gawk... no
checking for mawk... no
checking for nawk... no
checking for awk... awk
checking whether make sets $(MAKE)... yes
checking whether make supports nested variables... yes
checking whether make supports nested variables... (cached) yes
checking for gcc... gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.out
checking for suffix of executables... 
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether the compiler supports GNU C... yes
checking whether gcc accepts -g... yes
checking for gcc option to enable C11 features... none needed
checking whether gcc understands -c and -o together... yes
checking whether make supports the include directive... yes (GNU style)
checking dependency style of gcc... gcc3
checking dependency style of gcc... gcc3
checking for ar... ar
checking the archiver (ar) interface... ar
checking how to print strings... printf
checking for a sed that does not truncate output... /usr/bin/sed
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for fgrep... /usr/bin/grep -F
checking for ld used by gcc... /usr/bin/ld
checking if the linker (/usr/bin/ld) is GNU ld... no
checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B
checking the name lister (/usr/bin/nm -B) interface... BSD nm
checking whether ln -s works... yes
checking the maximum length of command line arguments... 786432
checking how to convert aarch64-apple-darwin21.6.0 file names to aarch64-apple-darwin21.6.0 format... func_convert_file_noop
checking how to convert aarch64-apple-darwin21.6.0 file names to toolchain format... func_convert_file_noop
checking for /usr/bin/ld option to reload object files... -r
checking for file... file
checking for objdump... objdump
checking how to recognize dependent libraries... pass_all
checking for dlltool... no
checking how to associate runtime and link libraries... printf %s\n
checking for archiver @FILE support... no
checking for strip... strip
checking for ranlib... ranlib
checking command to parse /usr/bin/nm -B output from gcc object... ok
checking for sysroot... no
checking for a working dd... /bin/dd
checking how to truncate binary pipes... /bin/dd bs=4096 count=1
checking for mt... no
checking if : is a manifest tool... no
checking for dsymutil... dsymutil
checking for nmedit... nmedit
checking for lipo... lipo
checking for otool... otool
checking for otool64... no
checking for -single_module linker flag... yes
checking for -exported_symbols_list linker flag... yes
checking for -force_load linker flag... yes
checking for stdio.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for strings.h... yes
checking for sys/stat.h... yes
checking for sys/types.h... yes
checking for unistd.h... yes
checking for dlfcn.h... yes
checking for objdir... .libs
checking if gcc supports -fno-rtti -fno-exceptions... no
checking for gcc option to produce PIC... -fno-common -DPIC
checking if gcc PIC flag -fno-common -DPIC works... yes
checking if gcc static flag -static works... no
checking if gcc supports -c -o file.o... yes
checking if gcc supports -c -o file.o... (cached) yes
checking whether the gcc linker (/usr/bin/ld) supports shared libraries... yes
checking dynamic linker characteristics... darwin21.6.0 dyld
checking how to hardcode library paths into programs... immediate
checking whether stripping libraries is possible... yes
checking if libtool supports shared libraries... yes
checking whether to build shared libraries... no
checking whether to build static libraries... yes
checking for brew... brew
checking if gcc supports -Werror=unknown-warning-option... no
checking if gcc supports -std=c89 -pedantic -Wno-long-long -Wnested-externs -Wshadow -Wstrict-prototypes -Wundef... yes
checking if gcc supports -Wno-overlength-strings... yes
checking if gcc supports -Wall... yes
checking if gcc supports -Wno-unused-function... yes
checking if gcc supports -Wextra... yes
checking if gcc supports -Wcast-align... yes
checking if gcc supports -Wcast-align=strict... yes
checking if gcc supports -Wconditional-uninitialized... no
checking if gcc supports -fvisibility=hidden... yes
checking for x86_64 assembly availability... no
checking that generated files are newer than configure... done
configure: creating ./config.status
config.status: creating Makefile
config.status: creating libsecp256k1.pc
config.status: creating src/libsecp256k1-config.h
config.status: src/libsecp256k1-config.h is unchanged
config.status: executing depfiles commands
config.status: executing libtool commands

Build Options:
  with external callbacks = no
  with benchmarks         = no
  with tests              = yes
  with coverage           = no
  with examples           = no
  module ecdh             = no
  module recovery         = yes
  module extrakeys        = yes
  module schnorrsig       = yes

  asm                     = no
  ecmult window size      = 15
  ecmult gen prec. bits   = 4

  valgrind                = no
  CC                      = gcc
  CPPFLAGS                =  
  SECP_CFLAGS             = -O2  -std=c89 -pedantic -Wno-long-long -Wnested-externs -Wshadow -Wstrict-prototypes -Wundef -Wno-overlength-strings -Wall -Wno-unused-function -Wextra -Wcast-align -Wcast-align=strict -fvisibility=hidden 
  CFLAGS                  = -g -O2
  LDFLAGS                 = 

Options used to compile and link:
  external signer = yes
  multiprocess    = no
  with experimental syscall sandbox support = no
  with libs       = yes
  with wallet     = yes
    with sqlite   = yes
    with bdb      = no
  with gui / qt   = no
  with zmq        = no
  with test       = yes
  with fuzz binary = yes
  with bench      = yes
  with upnp       = no
  with natpmp     = no
  use asm         = yes
  USDT tracing    = no
  sanitizers      = 
  debug enabled   = no
  gprof enabled   = no
  werror          = no
  LTO             = no

  target os       = darwin21.6.0
  build os        = darwin21.6.0

  CC              = gcc
  CFLAGS          = -pthread -g -O2
  CPPFLAGS        =   -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2  -DHAVE_BUILD_INFO -DMAC_OSX -DOBJC_OLD_DISPATCH_PROTOTYPES=0 -DPROVIDE_FUZZ_MAIN_FUNCTION 
  CXX             = g++ -std=c++17
  CXXFLAGS        =    -fstack-reuse=none -Wstack-protector -fstack-clash-protection  -Wall -Wextra -Wformat -Wformat-security -Wvla -Wredundant-decls -Wdate-time -Wduplicated-branches -Wduplicated-cond -Wlogical-op -Woverloaded-virtual -Wsuggest-override -Wimplicit-fallthrough  -Wno-unused-parameter -Wno-deprecated-copy    -fno-extended-identifiers -g -O2
  LDFLAGS         =  -lpthread  -pie -Wl,-bind_at_load   -Wl,-headerpad_max_install_names -Wl,-dead_strip -Wl,-dead_strip_dylibs 
  AR              = /usr/bin/ar
  ARFLAGS         = cr

mehul@Mehuls-MacBook bitcoin % make
Making all in src
  CXX      bitcoind-bitcoind.o
  CXX      init/bitcoind-bitcoind.o
  CXX      libbitcoin_node_a-addrdb.o
  CXX      libbitcoin_node_a-addrman.o
  CXX      libbitcoin_node_a-banman.o
  CXX      libbitcoin_node_a-blockencodings.o
  CXX      libbitcoin_node_a-blockfilter.o
  CXX      libbitcoin_node_a-chain.o
  CXX      consensus/libbitcoin_node_a-tx_verify.o
  CXX      libbitcoin_node_a-dbwrapper.o
  CXX      libbitcoin_node_a-deploymentstatus.o
  CXX      libbitcoin_node_a-flatfile.o
  CXX      libbitcoin_node_a-httprpc.o
  CXX      libbitcoin_node_a-httpserver.o
  CXX      libbitcoin_node_a-i2p.o
  CXX      index/libbitcoin_node_a-base.o
  CXX      index/libbitcoin_node_a-blockfilterindex.o
  CXX      index/libbitcoin_node_a-coinstatsindex.o
  CXX      index/libbitcoin_node_a-txindex.o
  CXX      libbitcoin_node_a-init.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./torcontrol.h:14,
                 from init.cpp:65:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./torcontrol.h:14,
                 from init.cpp:65:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(TorControlConnection&, const TorControlReply&)>':
./torcontrol.h:87:83:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(TorControlConnection&, const TorControlReply&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, TorControlConnection&, const TorControlReply&)>; Mutex = boost::signals2::mutex; R = void; Args = {TorControlConnection&, const TorControlReply&}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
  CXX      kernel/libbitcoin_node_a-chain.o
  CXX      kernel/libbitcoin_node_a-checks.o
  CXX      kernel/libbitcoin_node_a-coinstats.o
  CXX      kernel/libbitcoin_node_a-context.o
  CXX      kernel/libbitcoin_node_a-mempool_persist.o
  CXX      libbitcoin_node_a-mapport.o
  CXX      libbitcoin_node_a-net.o
  CXX      libbitcoin_node_a-net_processing.o
  CXX      libbitcoin_node_a-netgroup.o
  CXX      node/libbitcoin_node_a-blockstorage.o
  CXX      node/libbitcoin_node_a-caches.o
  CXX      node/libbitcoin_node_a-chainstate.o
  CXX      node/libbitcoin_node_a-coin.o
  CXX      node/libbitcoin_node_a-connection_types.o
  CXX      node/libbitcoin_node_a-context.o
  CXX      node/libbitcoin_node_a-eviction.o
  CXX      node/libbitcoin_node_a-interface_ui.o
In file included from /opt/homebrew//include/boost/signals2/optional_last_value.hpp:16,
                 from node/interface_ui.cpp:9:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from node/interface_ui.cpp:10:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::optional_last_value<bool> >':
node/interface_ui.cpp:15:118:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int)>; Mutex = boost::signals2::mutex; R = bool; Args = {const bilingual_str&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned int}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::optional_last_value<bool> >':
node/interface_ui.cpp:16:116:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; Mutex = boost::signals2::mutex; R = bool; Args = {const bilingual_str&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&)>':
node/interface_ui.cpp:17:65:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
node/interface_ui.cpp:18:64:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(int)>':
node/interface_ui.cpp:19:81:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
node/interface_ui.cpp:20:80:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int, bool)>':
node/interface_ui.cpp:22:66:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int, bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int, bool}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(SynchronizationState, const CBlockIndex*)>':
node/interface_ui.cpp:23:68:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(SynchronizationState, const CBlockIndex*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, SynchronizationState, const CBlockIndex*)>; Mutex = boost::signals2::mutex; R = void; Args = {SynchronizationState, const CBlockIndex*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from node/interface_ui.cpp:10:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:241:52:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int)>; Mutex = boost::signals2::mutex; R = bool; Args = {const bilingual_str&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = boost::optional<bool>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:722:25:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int)>; Mutex = boost::signals2::mutex; R = bool; Args = {const bilingual_str&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = boost::optional<bool>]'
node/interface_ui.cpp:47:167:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:241:52:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; Mutex = boost::signals2::mutex; R = bool; Args = {const bilingual_str&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = boost::optional<bool>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:722:25:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; Mutex = boost::signals2::mutex; R = bool; Args = {const bilingual_str&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = boost::optional<bool>]'
node/interface_ui.cpp:48:207:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:241:52:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:722:25:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
node/interface_ui.cpp:49:99:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:241:52:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:722:25:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
node/interface_ui.cpp:50:71:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int), boost::function<void(int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:241:52:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:722:25:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
node/interface_ui.cpp:51:126:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(int), boost::function<void(int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(int), boost::function<void(int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(int), boost::function<void(int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(int), boost::function<void(int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:241:52:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:722:25:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
node/interface_ui.cpp:52:121:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int, bool), boost::function<void(const std::__cxx11::basic_string<char>&, int, bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:241:52:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int, bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int, bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:722:25:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int, bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int, bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
node/interface_ui.cpp:54:136:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int, bool), boost::function<void(const std::__cxx11::basic_string<char>&, int, bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int, bool), boost::function<void(const std::__cxx11::basic_string<char>&, int, bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int, bool), boost::function<void(const std::__cxx11::basic_string<char>&, int, bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int, bool), boost::function<void(const std::__cxx11::basic_string<char>&, int, bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(SynchronizationState, const CBlockIndex*), boost::function<void(SynchronizationState, const CBlockIndex*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:241:52:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(SynchronizationState, const CBlockIndex*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, SynchronizationState, const CBlockIndex*)>; Mutex = boost::signals2::mutex; R = void; Args = {SynchronizationState, const CBlockIndex*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:722:25:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(SynchronizationState, const CBlockIndex*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, SynchronizationState, const CBlockIndex*)>; Mutex = boost::signals2::mutex; R = void; Args = {SynchronizationState, const CBlockIndex*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
node/interface_ui.cpp:55:123:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(SynchronizationState, const CBlockIndex*), boost::function<void(SynchronizationState, const CBlockIndex*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(SynchronizationState, const CBlockIndex*), boost::function<void(SynchronizationState, const CBlockIndex*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(SynchronizationState, const CBlockIndex*), boost::function<void(SynchronizationState, const CBlockIndex*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(SynchronizationState, const CBlockIndex*), boost::function<void(SynchronizationState, const CBlockIndex*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      node/libbitcoin_node_a-interfaces.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from node/interfaces.cpp:58:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
  CXX      node/libbitcoin_node_a-mempool_args.o
  CXX      node/libbitcoin_node_a-mempool_persist_args.o
  CXX      node/libbitcoin_node_a-miner.o
  CXX      node/libbitcoin_node_a-minisketchwrapper.o
  CXX      node/libbitcoin_node_a-psbt.o
  CXX      node/libbitcoin_node_a-transaction.o
  CXX      node/libbitcoin_node_a-validation_cache_args.o
  CXX      libbitcoin_node_a-noui.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from noui.cpp:14:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
  CXX      policy/libbitcoin_node_a-fees.o
  CXX      policy/libbitcoin_node_a-fees_args.o
  CXX      policy/libbitcoin_node_a-packages.o
  CXX      policy/libbitcoin_node_a-rbf.o
  CXX      policy/libbitcoin_node_a-settings.o
  CXX      libbitcoin_node_a-pow.o
  CXX      libbitcoin_node_a-rest.o
  CXX      rpc/libbitcoin_node_a-blockchain.o
  CXX      rpc/libbitcoin_node_a-fees.o
  CXX      rpc/libbitcoin_node_a-mempool.o
  CXX      rpc/libbitcoin_node_a-mining.o
  CXX      rpc/libbitcoin_node_a-net.o
  CXX      rpc/libbitcoin_node_a-node.o
  CXX      rpc/libbitcoin_node_a-output_script.o
  CXX      rpc/libbitcoin_node_a-rawtransaction.o
  CXX      rpc/libbitcoin_node_a-server.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from rpc/server.cpp:16:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from rpc/server.cpp:16:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
rpc/server.cpp:68:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from rpc/server.cpp:16:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:241:52:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:722:25:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
rpc/server.cpp:293:25:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      rpc/libbitcoin_node_a-server_util.o
  CXX      rpc/libbitcoin_node_a-signmessage.o
  CXX      rpc/libbitcoin_node_a-txoutproof.o
  CXX      script/libbitcoin_node_a-sigcache.o
  CXX      libbitcoin_node_a-shutdown.o
  CXX      libbitcoin_node_a-signet.o
  CXX      libbitcoin_node_a-timedata.o
  CXX      libbitcoin_node_a-torcontrol.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./torcontrol.h:14,
                 from torcontrol.cpp:6:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./torcontrol.h:14,
                 from torcontrol.cpp:6:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(TorControlConnection&, const TorControlReply&)>':
./torcontrol.h:87:83:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(TorControlConnection&, const TorControlReply&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, TorControlConnection&, const TorControlReply&)>; Mutex = boost::signals2::mutex; R = void; Args = {TorControlConnection&, const TorControlReply&}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./torcontrol.h:14,
                 from torcontrol.cpp:6:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(TorControlConnection&, const TorControlReply&), boost::function<void(TorControlConnection&, const TorControlReply&)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:241:52:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(TorControlConnection&, const TorControlReply&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, TorControlConnection&, const TorControlReply&)>; Mutex = boost::signals2::mutex; R = void; Args = {TorControlConnection&, const TorControlReply&}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:722:25:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(TorControlConnection&, const TorControlReply&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, TorControlConnection&, const TorControlReply&)>; Mutex = boost::signals2::mutex; R = void; Args = {TorControlConnection&, const TorControlReply&}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
torcontrol.cpp:90:36:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(TorControlConnection&, const TorControlReply&), boost::function<void(TorControlConnection&, const TorControlReply&)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(TorControlConnection&, const TorControlReply&), boost::function<void(TorControlConnection&, const TorControlReply&)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(TorControlConnection&, const TorControlReply&), boost::function<void(TorControlConnection&, const TorControlReply&)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(TorControlConnection&, const TorControlReply&), boost::function<void(TorControlConnection&, const TorControlReply&)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      libbitcoin_node_a-txdb.o
  CXX      libbitcoin_node_a-txmempool.o
  CXX      libbitcoin_node_a-txorphanage.o
  CXX      libbitcoin_node_a-txrequest.o
  CXX      libbitcoin_node_a-validation.o
  CXX      libbitcoin_node_a-validationinterface.o
  CXX      libbitcoin_node_a-versionbits.o
  CXX      wallet/libbitcoin_node_a-init.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/init.cpp:23:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/init.cpp:23:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/init.cpp:23:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  AR       libbitcoin_node.a
  CXX      wallet/libbitcoin_wallet_a-coincontrol.o
  CXX      wallet/libbitcoin_wallet_a-context.o
  CXX      wallet/libbitcoin_wallet_a-crypter.o
  CXX      wallet/libbitcoin_wallet_a-db.o
  CXX      wallet/libbitcoin_wallet_a-dump.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/dump.cpp:9:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/dump.cpp:9:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/dump.cpp:9:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/libbitcoin_wallet_a-external_signer_scriptpubkeyman.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/external_signer_scriptpubkeyman.h:8,
                 from wallet/external_signer_scriptpubkeyman.cpp:7:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/external_signer_scriptpubkeyman.h:8,
                 from wallet/external_signer_scriptpubkeyman.cpp:7:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/external_signer_scriptpubkeyman.h:8,
                 from wallet/external_signer_scriptpubkeyman.cpp:7:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/libbitcoin_wallet_a-feebumper.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/feebumper.cpp:15:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/feebumper.cpp:15:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/feebumper.cpp:15:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/libbitcoin_wallet_a-fees.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/fees.cpp:9:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/fees.cpp:9:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/fees.cpp:9:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/libbitcoin_wallet_a-interfaces.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/interfaces.cpp:26:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/interfaces.cpp:26:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/interfaces.cpp:26:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/libbitcoin_wallet_a-load.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/spend.h:13,
                 from wallet/load.cpp:16:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/spend.h:13,
                 from wallet/load.cpp:16:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/spend.h:13,
                 from wallet/load.cpp:16:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/libbitcoin_wallet_a-receive.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/receive.cpp:7:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/receive.cpp:7:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/receive.cpp:7:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/rpc/libbitcoin_wallet_a-addresses.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/rpc/addresses.cpp:10:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/rpc/addresses.cpp:10:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/rpc/addresses.cpp:10:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/rpc/libbitcoin_wallet_a-backup.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/rpc/backup.cpp:22:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/rpc/backup.cpp:22:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/rpc/backup.cpp:22:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/rpc/libbitcoin_wallet_a-coins.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/rpc/coins.cpp:10:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/rpc/coins.cpp:10:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/rpc/coins.cpp:10:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/rpc/libbitcoin_wallet_a-encrypt.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/rpc/encrypt.cpp:7:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/rpc/encrypt.cpp:7:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/rpc/encrypt.cpp:7:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/rpc/libbitcoin_wallet_a-spend.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/spend.h:13,
                 from wallet/rpc/spend.cpp:19:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/spend.h:13,
                 from wallet/rpc/spend.cpp:19:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/spend.h:13,
                 from wallet/rpc/spend.cpp:19:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/rpc/libbitcoin_wallet_a-signmessage.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/rpc/signmessage.cpp:9:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/rpc/signmessage.cpp:9:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/rpc/signmessage.cpp:9:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/rpc/libbitcoin_wallet_a-transactions.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/rpc/transactions.cpp:10:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/rpc/transactions.cpp:10:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/rpc/transactions.cpp:10:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/rpc/libbitcoin_wallet_a-util.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/rpc/util.cpp:11:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/rpc/util.cpp:11:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/rpc/util.cpp:11:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/rpc/libbitcoin_wallet_a-wallet.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/rpc/wallet.cpp:12:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/rpc/wallet.cpp:12:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/rpc/wallet.cpp:12:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/libbitcoin_wallet_a-scriptpubkeyman.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from wallet/scriptpubkeyman.cpp:16:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from wallet/scriptpubkeyman.cpp:16:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from wallet/scriptpubkeyman.cpp:16:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:241:52:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:722:25:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
wallet/scriptpubkeyman.cpp:890:31:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:241:52:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:722:25:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
wallet/scriptpubkeyman.cpp:1216:33:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/libbitcoin_wallet_a-spend.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/spend.cpp:18:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/spend.cpp:18:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/spend.cpp:18:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/libbitcoin_wallet_a-transaction.o
  CXX      wallet/libbitcoin_wallet_a-wallet.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/wallet.cpp:6:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/wallet.cpp:6:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/wallet.cpp:6:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:241:52:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:722:25:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
wallet/wallet.cpp:778:24:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:241:52:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:722:25:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
wallet/wallet.cpp:888:29:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:241:52:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:722:25:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
wallet/wallet.cpp:1729:17:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:241:52:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:722:25:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type = void]'
wallet/wallet.cpp:2261:29:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/libbitcoin_wallet_a-walletdb.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/walletdb.cpp:23:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/walletdb.cpp:23:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/walletdb.cpp:23:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/libbitcoin_wallet_a-walletutil.o
  CXX      wallet/libbitcoin_wallet_a-coinselection.o
  CXX      wallet/libbitcoin_wallet_a-sqlite.o
  AR       libbitcoin_wallet.a
  CXX      libbitcoin_common_a-base58.o
  CXX      libbitcoin_common_a-bech32.o
  CXX      libbitcoin_common_a-chainparams.o
  CXX      libbitcoin_common_a-coins.o
  CXX      common/libbitcoin_common_a-bloom.o
  CXX      libbitcoin_common_a-compressor.o
  CXX      libbitcoin_common_a-core_read.o
  CXX      libbitcoin_common_a-core_write.o
  CXX      libbitcoin_common_a-deploymentinfo.o
  CXX      libbitcoin_common_a-external_signer.o
  CXX      init/libbitcoin_common_a-common.o
  CXX      libbitcoin_common_a-key.o
  CXX      libbitcoin_common_a-key_io.o
  CXX      libbitcoin_common_a-merkleblock.o
  CXX      libbitcoin_common_a-net_types.o
  CXX      libbitcoin_common_a-netaddress.o
  CXX      libbitcoin_common_a-netbase.o
  CXX      libbitcoin_common_a-net_permissions.o
  CXX      libbitcoin_common_a-outputtype.o
  CXX      policy/libbitcoin_common_a-feerate.o
  CXX      policy/libbitcoin_common_a-policy.o
  CXX      libbitcoin_common_a-protocol.o
  CXX      libbitcoin_common_a-psbt.o
  CXX      rpc/libbitcoin_common_a-rawtransaction_util.o
  CXX      rpc/libbitcoin_common_a-external_signer.o
  CXX      rpc/libbitcoin_common_a-util.o
  CXX      libbitcoin_common_a-scheduler.o
  CXX      script/libbitcoin_common_a-descriptor.o
  CXX      script/libbitcoin_common_a-miniscript.o
  CXX      script/libbitcoin_common_a-sign.o
  CXX      script/libbitcoin_common_a-signingprovider.o
  CXX      script/libbitcoin_common_a-standard.o
  CXX      libbitcoin_common_a-warnings.o
  AR       libbitcoin_common.a
  CXX      support/libbitcoin_util_a-lockedpool.o
  CXX      libbitcoin_util_a-chainparamsbase.o
  CXX      libbitcoin_util_a-clientversion.o
  CXX      libbitcoin_util_a-fs.o
  CXX      interfaces/libbitcoin_util_a-echo.o
  CXX      interfaces/libbitcoin_util_a-handler.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from interfaces/handler.cpp:8:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
  CXX      interfaces/libbitcoin_util_a-init.o
  CXX      libbitcoin_util_a-logging.o
  CXX      libbitcoin_util_a-random.o
  CXX      libbitcoin_util_a-randomenv.o
  CXX      rpc/libbitcoin_util_a-request.o
  CXX      support/libbitcoin_util_a-cleanse.o
  CXX      libbitcoin_util_a-sync.o
  CXX      libbitcoin_util_a-threadinterrupt.o
  CXX      util/libbitcoin_util_a-asmap.o
  CXX      util/libbitcoin_util_a-bip32.o
  CXX      util/libbitcoin_util_a-bytevectorhash.o
  CXX      util/libbitcoin_util_a-check.o
  CXX      util/libbitcoin_util_a-error.o
  CXX      util/libbitcoin_util_a-fees.o
  CXX      util/libbitcoin_util_a-getuniquepath.o
  CXX      util/libbitcoin_util_a-hasher.o
  CXX      util/libbitcoin_util_a-sock.o
  CXX      util/libbitcoin_util_a-syserror.o
  CXX      util/libbitcoin_util_a-system.o
In file included from /opt/homebrew//include/boost/system/detail/error_category_impl.hpp:15,
                 from /opt/homebrew//include/boost/system/error_category.hpp:11,
                 from /opt/homebrew//include/boost/filesystem/path_traits.hpp:14,
                 from /opt/homebrew//include/boost/filesystem/path.hpp:21,
                 from /opt/homebrew//include/boost/process/detail/traits/cmd_or_exe.hpp:14,
                 from /opt/homebrew//include/boost/process/detail/basic_cmd.hpp:13,
                 from /opt/homebrew//include/boost/process/args.hpp:33,
                 from /opt/homebrew//include/boost/process.hpp:22,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/system/detail/error_code.hpp:55:13: warning: redundant redeclaration of 'std::size_t boost::system::hash_value(const boost::system::error_code&)' in same scope [-Wredundant-decls]
   55 | std::size_t hash_value( error_code const & ec );
      |             ^~~~~~~~~~
In file included from /opt/homebrew//include/boost/system/error_category.hpp:10,
                 from /opt/homebrew//include/boost/filesystem/path_traits.hpp:14,
                 from /opt/homebrew//include/boost/filesystem/path.hpp:21,
                 from /opt/homebrew//include/boost/process/detail/traits/cmd_or_exe.hpp:14,
                 from /opt/homebrew//include/boost/process/detail/basic_cmd.hpp:13,
                 from /opt/homebrew//include/boost/process/args.hpp:33,
                 from /opt/homebrew//include/boost/process.hpp:22,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/system/detail/error_category.hpp:55:24: note: previous declaration of 'std::size_t boost::system::hash_value(const boost::system::error_code&)'
   55 |     friend std::size_t hash_value( error_code const & ec );
      |                        ^~~~~~~~~~
In file included from /opt/homebrew//include/boost/asio/error.hpp:358,
                 from /opt/homebrew//include/boost/asio/detail/impl/posix_tss_ptr.ipp:24,
                 from /opt/homebrew//include/boost/asio/detail/posix_tss_ptr.hpp:76,
                 from /opt/homebrew//include/boost/asio/detail/tss_ptr.hpp:27,
                 from /opt/homebrew//include/boost/asio/detail/call_stack.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/thread_context.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/recycling_allocator.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/handler_alloc_helpers.hpp:21,
                 from /opt/homebrew//include/boost/asio/detail/executor_function.hpp:19,
                 from /opt/homebrew//include/boost/asio/execution/any_executor.hpp:23,
                 from /opt/homebrew//include/boost/asio/execution.hpp:19,
                 from /opt/homebrew//include/boost/process/detail/posix/on_exit.hpp:9,
                 from /opt/homebrew//include/boost/process/detail/on_exit.hpp:12,
                 from /opt/homebrew//include/boost/process/async.hpp:33,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/asio/impl/error.ipp:35:15: warning: 'virtual const char* boost::asio::error::detail::netdb_category::name() const' can be marked override [-Wsuggest-override]
   35 |   const char* name() const BOOST_ASIO_ERROR_CATEGORY_NOEXCEPT
      |               ^~~~
/opt/homebrew//include/boost/asio/impl/error.ipp:40:15: warning: 'virtual std::string boost::asio::error::detail::netdb_category::message(int) const' can be marked override [-Wsuggest-override]
   40 |   std::string message(int value) const
      |               ^~~~~~~
In file included from /opt/homebrew//include/boost/system/error_category.hpp:11,
                 from /opt/homebrew//include/boost/filesystem/path_traits.hpp:14,
                 from /opt/homebrew//include/boost/filesystem/path.hpp:21,
                 from /opt/homebrew//include/boost/process/detail/traits/cmd_or_exe.hpp:14,
                 from /opt/homebrew//include/boost/process/detail/basic_cmd.hpp:13,
                 from /opt/homebrew//include/boost/process/args.hpp:33,
                 from /opt/homebrew//include/boost/process.hpp:22,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/system/detail/error_category_impl.hpp:44:21: warning: 'virtual const char* boost::system::error_category::message(int, char*, std::size_t) const' was hidden [-Woverloaded-virtual]
   44 | inline char const * error_category::message( int ev, char * buffer, std::size_t len ) const BOOST_NOEXCEPT
      |                     ^~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/asio/error.hpp:358,
                 from /opt/homebrew//include/boost/asio/detail/impl/posix_tss_ptr.ipp:24,
                 from /opt/homebrew//include/boost/asio/detail/posix_tss_ptr.hpp:76,
                 from /opt/homebrew//include/boost/asio/detail/tss_ptr.hpp:27,
                 from /opt/homebrew//include/boost/asio/detail/call_stack.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/thread_context.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/recycling_allocator.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/handler_alloc_helpers.hpp:21,
                 from /opt/homebrew//include/boost/asio/detail/executor_function.hpp:19,
                 from /opt/homebrew//include/boost/asio/execution/any_executor.hpp:23,
                 from /opt/homebrew//include/boost/asio/execution.hpp:19,
                 from /opt/homebrew//include/boost/process/detail/posix/on_exit.hpp:9,
                 from /opt/homebrew//include/boost/process/detail/on_exit.hpp:12,
                 from /opt/homebrew//include/boost/process/async.hpp:33,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/asio/impl/error.ipp:40:15: note:   by 'virtual std::string boost::asio::error::detail::netdb_category::message(int) const'
   40 |   std::string message(int value) const
      |               ^~~~~~~
/opt/homebrew//include/boost/asio/impl/error.ipp:67:15: warning: 'virtual const char* boost::asio::error::detail::addrinfo_category::name() const' can be marked override [-Wsuggest-override]
   67 |   const char* name() const BOOST_ASIO_ERROR_CATEGORY_NOEXCEPT
      |               ^~~~
/opt/homebrew//include/boost/asio/impl/error.ipp:72:15: warning: 'virtual std::string boost::asio::error::detail::addrinfo_category::message(int) const' can be marked override [-Wsuggest-override]
   72 |   std::string message(int value) const
      |               ^~~~~~~
In file included from /opt/homebrew//include/boost/system/error_category.hpp:11,
                 from /opt/homebrew//include/boost/filesystem/path_traits.hpp:14,
                 from /opt/homebrew//include/boost/filesystem/path.hpp:21,
                 from /opt/homebrew//include/boost/process/detail/traits/cmd_or_exe.hpp:14,
                 from /opt/homebrew//include/boost/process/detail/basic_cmd.hpp:13,
                 from /opt/homebrew//include/boost/process/args.hpp:33,
                 from /opt/homebrew//include/boost/process.hpp:22,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/system/detail/error_category_impl.hpp:44:21: warning: 'virtual const char* boost::system::error_category::message(int, char*, std::size_t) const' was hidden [-Woverloaded-virtual]
   44 | inline char const * error_category::message( int ev, char * buffer, std::size_t len ) const BOOST_NOEXCEPT
      |                     ^~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/asio/error.hpp:358,
                 from /opt/homebrew//include/boost/asio/detail/impl/posix_tss_ptr.ipp:24,
                 from /opt/homebrew//include/boost/asio/detail/posix_tss_ptr.hpp:76,
                 from /opt/homebrew//include/boost/asio/detail/tss_ptr.hpp:27,
                 from /opt/homebrew//include/boost/asio/detail/call_stack.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/thread_context.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/recycling_allocator.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/handler_alloc_helpers.hpp:21,
                 from /opt/homebrew//include/boost/asio/detail/executor_function.hpp:19,
                 from /opt/homebrew//include/boost/asio/execution/any_executor.hpp:23,
                 from /opt/homebrew//include/boost/asio/execution.hpp:19,
                 from /opt/homebrew//include/boost/process/detail/posix/on_exit.hpp:9,
                 from /opt/homebrew//include/boost/process/detail/on_exit.hpp:12,
                 from /opt/homebrew//include/boost/process/async.hpp:33,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/asio/impl/error.ipp:72:15: note:   by 'virtual std::string boost::asio::error::detail::addrinfo_category::message(int) const'
   72 |   std::string message(int value) const
      |               ^~~~~~~
/opt/homebrew//include/boost/asio/impl/error.ipp:97:15: warning: 'virtual const char* boost::asio::error::detail::misc_category::name() const' can be marked override [-Wsuggest-override]
   97 |   const char* name() const BOOST_ASIO_ERROR_CATEGORY_NOEXCEPT
      |               ^~~~
/opt/homebrew//include/boost/asio/impl/error.ipp:102:15: warning: 'virtual std::string boost::asio::error::detail::misc_category::message(int) const' can be marked override [-Wsuggest-override]
  102 |   std::string message(int value) const
      |               ^~~~~~~
In file included from /opt/homebrew//include/boost/system/error_category.hpp:11,
                 from /opt/homebrew//include/boost/filesystem/path_traits.hpp:14,
                 from /opt/homebrew//include/boost/filesystem/path.hpp:21,
                 from /opt/homebrew//include/boost/process/detail/traits/cmd_or_exe.hpp:14,
                 from /opt/homebrew//include/boost/process/detail/basic_cmd.hpp:13,
                 from /opt/homebrew//include/boost/process/args.hpp:33,
                 from /opt/homebrew//include/boost/process.hpp:22,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/system/detail/error_category_impl.hpp:44:21: warning: 'virtual const char* boost::system::error_category::message(int, char*, std::size_t) const' was hidden [-Woverloaded-virtual]
   44 | inline char const * error_category::message( int ev, char * buffer, std::size_t len ) const BOOST_NOEXCEPT
      |                     ^~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/asio/error.hpp:358,
                 from /opt/homebrew//include/boost/asio/detail/impl/posix_tss_ptr.ipp:24,
                 from /opt/homebrew//include/boost/asio/detail/posix_tss_ptr.hpp:76,
                 from /opt/homebrew//include/boost/asio/detail/tss_ptr.hpp:27,
                 from /opt/homebrew//include/boost/asio/detail/call_stack.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/thread_context.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/recycling_allocator.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/handler_alloc_helpers.hpp:21,
                 from /opt/homebrew//include/boost/asio/detail/executor_function.hpp:19,
                 from /opt/homebrew//include/boost/asio/execution/any_executor.hpp:23,
                 from /opt/homebrew//include/boost/asio/execution.hpp:19,
                 from /opt/homebrew//include/boost/process/detail/posix/on_exit.hpp:9,
                 from /opt/homebrew//include/boost/process/detail/on_exit.hpp:12,
                 from /opt/homebrew//include/boost/process/async.hpp:33,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/asio/impl/error.ipp:102:15: note:   by 'virtual std::string boost::asio::error::detail::misc_category::message(int) const'
  102 |   std::string message(int value) const
      |               ^~~~~~~
In file included from /opt/homebrew//include/boost/asio/detail/thread_info_base.hpp:27,
                 from /opt/homebrew//include/boost/asio/detail/recycling_allocator.hpp:21,
                 from /opt/homebrew//include/boost/asio/detail/handler_alloc_helpers.hpp:21,
                 from /opt/homebrew//include/boost/asio/detail/executor_function.hpp:19,
                 from /opt/homebrew//include/boost/asio/execution/any_executor.hpp:23,
                 from /opt/homebrew//include/boost/asio/execution.hpp:19,
                 from /opt/homebrew//include/boost/process/detail/posix/on_exit.hpp:9,
                 from /opt/homebrew//include/boost/process/detail/on_exit.hpp:12,
                 from /opt/homebrew//include/boost/process/async.hpp:33,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/asio/multiple_exceptions.hpp:38:39: warning: 'virtual const char* boost::asio::multiple_exceptions::what() const' can be marked override [-Wsuggest-override]
   38 |   BOOST_ASIO_DECL virtual const char* what() const
      |                                       ^~~~
In file included from /opt/homebrew//include/boost/asio/execution/any_executor.hpp:30,
                 from /opt/homebrew//include/boost/asio/execution.hpp:19,
                 from /opt/homebrew//include/boost/process/detail/posix/on_exit.hpp:9,
                 from /opt/homebrew//include/boost/process/detail/on_exit.hpp:12,
                 from /opt/homebrew//include/boost/process/async.hpp:33,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/asio/execution/bad_executor.hpp:35:39: warning: virtual const char* boost::asio::execution::bad_executor::what() const' can be marked override [-Wsuggest-override]
   35 |   BOOST_ASIO_DECL virtual const char* what() const
      |                                       ^~~~
In file included from /opt/homebrew//include/boost/asio/io_context.hpp:44,
                 from /opt/homebrew//include/boost/process/async.hpp:35,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/asio/detail/scheduler.hpp:60:24: warning: 'virtual void boost::asio::detail::scheduler::shutdown()' can be marked override [-Wsuggest-override]
   60 |   BOOST_ASIO_DECL void shutdown();
      |                        ^~~~~~~~
In file included from /opt/homebrew//include/boost/asio/detail/reactor.hpp:27,
                 from /opt/homebrew//include/boost/asio/detail/impl/scheduler.ipp:30,
                 from /opt/homebrew//include/boost/asio/detail/scheduler.hpp:240,
                 from /opt/homebrew//include/boost/asio/io_context.hpp:44,
                 from /opt/homebrew//include/boost/process/async.hpp:35,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/asio/detail/kqueue_reactor.hpp:94:24: warning: 'virtual void boost::asio::detail::kqueue_reactor::shutdown()' can be marked override [-Wsuggest-override]
   94 |   BOOST_ASIO_DECL void shutdown();
      |                        ^~~~~~~~
/opt/homebrew//include/boost/asio/detail/kqueue_reactor.hpp:97:24: warning: 'virtual void boost::asio::detail::kqueue_reactor::notify_fork(boost::asio::execution_context::fork_event)' can be marked override [-Wsuggest-override]
   97 |   BOOST_ASIO_DECL void notify_fork(
      |                        ^~~~~~~~~~~
/opt/homebrew//include/boost/asio/detail/kqueue_reactor.hpp:193:24: warning: virtual void boost::asio::detail::kqueue_reactor::run(long int, boost::asio::detail::op_queue<boost::asio::detail::scheduler_operation>&)' can be marked override [-Wsuggest-override]
  193 |   BOOST_ASIO_DECL void run(long usec, op_queue<operation>& ops);
      |                        ^~~
/opt/homebrew//include/boost/asio/detail/kqueue_reactor.hpp:196:24: warning: virtual void boost::asio::detail::kqueue_reactor::interrupt()' can be marked override [-Wsuggest-override]
  196 |   BOOST_ASIO_DECL void interrupt();
      |                        ^~~~~~~~~
In file included from /opt/homebrew//include/boost/process/async.hpp:35,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/asio/io_context.hpp:1197:32: warning: 'virtual void boost::asio::io_context::service::shutdown()' can be marked override [-Wsuggest-override]
 1197 |   BOOST_ASIO_DECL virtual void shutdown();
      |                                ^~~~~~~~
/opt/homebrew//include/boost/asio/io_context.hpp:1211:32: warning: 'virtual void boost::asio::io_context::service::notify_fork(boost::asio::execution_context::fork_event)' can be marked override [-Wsuggest-override]
 1211 |   BOOST_ASIO_DECL virtual void notify_fork(
      |                                ^~~~~~~~~~~
In file included from /opt/homebrew//include/boost/asio/basic_signal_set.hpp:25,
                 from /opt/homebrew//include/boost/asio/signal_set.hpp:19,
                 from /opt/homebrew//include/boost/process/detail/posix/sigchld_service.hpp:12,
                 from /opt/homebrew//include/boost/process/detail/posix/io_context_ref.hpp:20,
                 from /opt/homebrew//include/boost/process/async.hpp:42,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/asio/detail/signal_set_service.hpp:131:24: warning: 'virtual void boost::asio::detail::signal_set_service::shutdown()' can be marked override [-Wsuggest-override]
  131 |   BOOST_ASIO_DECL void shutdown();
      |                        ^~~~~~~~
/opt/homebrew//include/boost/asio/detail/signal_set_service.hpp:134:24: warning: 'virtual void boost::asio::detail::signal_set_service::notify_fork(boost::asio::execution_context::fork_event)' can be marked override [-Wsuggest-override]
  134 |   BOOST_ASIO_DECL void notify_fork(
      |                        ^~~~~~~~~~~
In file included from /opt/homebrew//include/boost/asio/strand.hpp:19,
                 from /opt/homebrew//include/boost/process/detail/posix/sigchld_service.hpp:13,
                 from /opt/homebrew//include/boost/process/detail/posix/io_context_ref.hpp:20,
                 from /opt/homebrew//include/boost/process/async.hpp:42,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/asio/detail/strand_executor_service.hpp:86:24: warning: 'virtual void boost::asio::detail::strand_executor_service::shutdown()' can be marked override [-Wsuggest-override]
   86 |   BOOST_ASIO_DECL void shutdown();
      |                        ^~~~~~~~
In file included from /opt/homebrew//include/boost/asio/io_context_strand.hpp:25,
                 from /opt/homebrew//include/boost/asio/strand.hpp:578,
                 from /opt/homebrew//include/boost/process/detail/posix/sigchld_service.hpp:13,
                 from /opt/homebrew//include/boost/process/detail/posix/io_context_ref.hpp:20,
                 from /opt/homebrew//include/boost/process/async.hpp:42,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/asio/detail/strand_service.hpp:82:24: warning: 'virtual void boost::asio::detail::strand_service::shutdown()' can be marked override [-Wsuggest-override]
   82 |   BOOST_ASIO_DECL void shutdown();
      |                        ^~~~~~~~
In file included from /opt/homebrew//include/boost/asio/posix/basic_descriptor.hpp:36,
                 from /opt/homebrew//include/boost/asio/posix/basic_stream_descriptor.hpp:19,
                 from /opt/homebrew//include/boost/asio/posix/stream_descriptor.hpp:23,
                 from /opt/homebrew//include/boost/process/detail/posix/async_pipe.hpp:11,
                 from /opt/homebrew//include/boost/process/async_pipe.hpp:18,
                 from /opt/homebrew//include/boost/process/detail/posix/async_in.hpp:16,
                 from /opt/homebrew//include/boost/process/async.hpp:43,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/asio/detail/reactive_descriptor_service.hpp:85:24: warning: 'virtual void boost::asio::detail::reactive_descriptor_service::shutdown()' can be marked override [-Wsuggest-override]
   85 |   BOOST_ASIO_DECL void shutdown();
      |                        ^~~~~~~~
In file included from /opt/homebrew//include/boost/asio/streambuf.hpp:22,
                 from /opt/homebrew//include/boost/process/async.hpp:36,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/asio/basic_streambuf.hpp: In instantiation of 'class boost::asio::basic_streambuf<>':
/opt/homebrew//include/boost/process/detail/posix/async_out.hpp:136:42:   required from here
/opt/homebrew//include/boost/asio/basic_streambuf.hpp:264:12: warning: 'std::basic_streambuf<char>::int_type boost::asio::basic_streambuf<Allocator>::underflow() [with Allocator = std::allocator<char>; std::basic_streambuf<char>::int_type = int]' can be marked override [-Wsuggest-override]
  264 |   int_type underflow()
      |            ^~~~~~~~~
/opt/homebrew//include/boost/asio/basic_streambuf.hpp:284:12: warning: 'std::basic_streambuf<char>::int_type boost::asio::basic_streambuf<Allocator>::overflow(std::basic_streambuf<char>::int_type) [with Allocator = std::allocator<char>; std::basic_streambuf<char>::int_type = int]' can be marked override [-Wsuggest-override]
  284 |   int_type overflow(int_type c)
      |            ^~~~~~~~
In file included from /opt/homebrew//include/boost/asio/detail/thread.hpp:23,
                 from /opt/homebrew//include/boost/asio/detail/scheduler.hpp:28,
                 from /opt/homebrew//include/boost/asio/io_context.hpp:44,
                 from /opt/homebrew//include/boost/process/async.hpp:35,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/asio/detail/posix_thread.hpp: In instantiation of 'class boost::asio::detail::posix_thread::func<boost::asio::detail::scheduler::thread_function>':
/opt/homebrew//include/boost/asio/detail/posix_thread.hpp:46:18:   required from 'boost::asio::detail::posix_thread::posix_thread(Function, unsigned int) [with Function = boost::asio::detail::scheduler::thread_function]'
/opt/homebrew//include/boost/asio/detail/impl/scheduler.ipp:137:68:   required from here
/opt/homebrew//include/boost/asio/detail/posix_thread.hpp:84:18: warning: 'void boost::asio::detail::posix_thread::func<Function>::run() [with Function = boost::asio::detail::scheduler::thread_function]' can be marked override [-Wsuggest-override]
   84 |     virtual void run()
      |                  ^~~
/opt/homebrew//include/boost/asio/detail/posix_thread.hpp: In instantiation of 'class boost::asio::detail::posix_thread::func<boost::asio::system_context::thread_function>':
/opt/homebrew//include/boost/asio/detail/posix_thread.hpp:46:18:   required from 'boost::asio::detail::posix_thread::posix_thread(Function, unsigned int) [with Function = boost::asio::system_context::thread_function]'
/opt/homebrew//include/boost/asio/detail/thread_group.hpp:82:9:   required from 'boost::asio::detail::thread_group::item::item(Function, boost::asio::detail::thread_group::item*) [with Function = boost::asio::system_context::thread_function]'
/opt/homebrew//include/boost/asio/detail/thread_group.hpp:47:14:   required from 'void boost::asio::detail::thread_group::create_thread(Function) [with Function = boost::asio::system_context::thread_function]'
/opt/homebrew//include/boost/asio/detail/thread_group.hpp:55:20:   required from 'void boost::asio::detail::thread_group::create_threads(Function, std::size_t) [with Function = boost::asio::system_context::thread_function; std::size_t = long unsigned int]'
/opt/homebrew//include/boost/asio/impl/system_context.ipp:56:26:   required from here
/opt/homebrew//include/boost/asio/detail/posix_thread.hpp:84:18: warning: 'void boost::asio::detail::posix_thread::func<Function>::run() [with Function = boost::asio::system_context::thread_function]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/asio/associated_cancellation_slot.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/signal_set_service.hpp:22,
                 from /opt/homebrew//include/boost/asio/basic_signal_set.hpp:25,
                 from /opt/homebrew//include/boost/asio/signal_set.hpp:19,
                 from /opt/homebrew//include/boost/process/detail/posix/sigchld_service.hpp:12,
                 from /opt/homebrew//include/boost/process/detail/posix/io_context_ref.hpp:20,
                 from /opt/homebrew//include/boost/process/async.hpp:42,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from util/system.cpp:15:
/opt/homebrew//include/boost/asio/cancellation_signal.hpp: In instantiation of 'class boost::asio::detail::cancellation_handler<boost::asio::detail::signal_set_service::signal_op_cancellation>':
/opt/homebrew//include/boost/asio/cancellation_signal.hpp:171:9:   required from 'CancellationHandler& boost::asio::cancellation_slot::emplace(Args&& ...) [with CancellationHandler = boost::asio::detail::signal_set_service::signal_op_cancellation; Args = {boost::asio::detail::signal_set_service*, boost::asio::detail::signal_set_service::implementation_type*}]'
/opt/homebrew//include/boost/asio/detail/signal_set_service.hpp:181:55:   required from 'void boost::asio::detail::signal_set_service::async_wait(boost::asio::detail::signal_set_service::implementation_type&, Handler&, const IoExecutor&) [with Handler = boost::process::detail::posix::sigchld_service::_handle_signal(const boost::system::error_code&)::<lambda(const boost::system::error_code&, int)>; IoExecutor = boost::asio::any_io_executor]'
/opt/homebrew//include/boost/asio/basic_signal_set.hpp:577:44:   required from 'void boost::asio::basic_signal_set<Executor>::initiate_async_wait::operator()(SignalHandler&&) const [with SignalHandler = boost::process::detail::posix::sigchld_service::_handle_signal(const boost::system::error_code&)::<lambda(const boost::system::error_code&, int)>; Executor = boost::asio::any_io_executor'
/opt/homebrew//include/boost/asio/async_result.hpp:482:49:   required from 'static boost::asio::detail::completion_handler_async_result<CompletionToken, Signatures>::return_type boost::asio::detail::completion_handler_async_result<CompletionToken, Signatures>::initiate(Initiation&&, RawCompletionToken&&, Args&& ...) [with Initiation = boost::asio::basic_signal_set<>::initiate_async_wait; RawCompletionToken = boost::process::detail::posix::sigchld_service::_handle_signal(const boost::system::error_code&)::<lambda(const boost::system::error_code&, int)>; Args = {}; CompletionToken = boost::process::detail::posix::sigchld_service::_handle_signal(const boost::system::error_code&)::<lambda(const boost::system::error_code&, int)>; Signatures = {void(boost::system::error_code, int)}; boost::asio::detail::completion_handler_async_result<CompletionToken, Signatures>::return_type = void]'
/opt/homebrew//include/boost/asio/async_result.hpp:862:29:   required from 'typename boost::asio::constraint<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signatures>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signatures ...>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&&>)()...))>::type boost::asio::async_initiate(Initiation&&, CompletionToken&, Args&& ...) [with CompletionToken = boost::process::detail::posix::sigchld_service::_handle_signal(const boost::system::error_code&)::<lambda(const boost::system::error_code&, int)>; Signatures = {void(boost::system::error_code, int)}; Initiation = boost::asio::basic_signal_set<>::initiate_async_wait; Args = {}; typename boost::asio::constraint<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signatures>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signatures ...>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&&>)()...))>::type = void; decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signatures ...>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&&>)()...)) = void; typename std::decay<_Tp>::type = std::decay<boost::process::detail::posix::sigchld_service::_handle_signal(const boost::system::error_code&)::<lambda(const boost::system::error_code&, int)> >::type]'
/opt/homebrew//include/boost/asio/basic_signal_set.hpp:545:78:   required from 'auto boost::asio::basic_signal_set<Executor>::async_wait(SignalToken&&) [with SignalToken = boost::process::detail::posix::sigchld_service::_handle_signal(const boost::system::error_code&)::<lambda(const boost::system::error_code&, int)>; Executor = boost::asio::any_io_executor]'
/opt/homebrew//include/boost/process/detail/posix/sigchld_service.hpp:131:31:   required from here
/opt/homebrew//include/boost/asio/cancellation_signal.hpp:74:8: warning: 'void boost::asio::detail::cancellation_handler<Handler>::call(boost::asio::cancellation_type_t) [with Handler = boost::asio::detail::signal_set_service::signal_op_cancellation; boost::asio::cancellation_type_t = boost::asio::cancellation_type]' can be marked override [-Wsuggest-override]
   74 |   void call(cancellation_type_t type)
      |        ^~~~
/opt/homebrew//include/boost/asio/cancellation_signal.hpp:79:33: warning: 'std::pair<void*, long unsigned int> boost::asio::detail::cancellation_handler<Handler>::destroy() [with Handler = boost::asio::detail::signal_set_service::signal_op_cancellation]' can be marked override [-Wsuggest-override]
   79 |   std::pair<void*, std::size_t> destroy() BOOST_ASIO_NOEXCEPT
      |                                 ^~~~~~~
  CXX      util/libbitcoin_util_a-message.o
  CXX      util/libbitcoin_util_a-moneystr.o
  CXX      util/libbitcoin_util_a-rbf.o
  CXX      util/libbitcoin_util_a-readwritefile.o
  CXX      util/libbitcoin_util_a-settings.o
  CXX      util/libbitcoin_util_a-thread.o
  CXX      util/libbitcoin_util_a-threadnames.o
  CXX      util/libbitcoin_util_a-serfloat.o
  CXX      util/libbitcoin_util_a-spanparsing.o
  CXX      util/libbitcoin_util_a-strencodings.o
  CXX      util/libbitcoin_util_a-string.o
  CXX      util/libbitcoin_util_a-syscall_sandbox.o
  CXX      util/libbitcoin_util_a-time.o
In file included from /opt/homebrew//include/boost/date_time/posix_time/posix_time_io.hpp:16,
                 from /opt/homebrew//include/boost/date_time/posix_time/posix_time.hpp:31,
                 from util/time.cpp:15:
/opt/homebrew//include/boost/date_time/time_facet.hpp: In instantiation of 'class boost::date_time::time_input_facet<boost::posix_time::ptime, char>':
util/time.cpp:149:69:   required from here
/opt/homebrew//include/boost/date_time/time_facet.hpp:764:20: warning: 'void boost::date_time::time_input_facet<time_type, CharT, InItrT>::set_iso_format() [with time_type = boost::posix_time::ptime; CharT = char; InItrT = std::istreambuf_iterator<char, std::char_traits<char> >]' can be marked override [-Wsuggest-override]
  764 |       virtual void set_iso_format()
      |                    ^~~~~~~~~~~~~~
/opt/homebrew//include/boost/date_time/time_facet.hpp:768:20: warning: 'void boost::date_time::time_input_facet<time_type, CharT, InItrT>::set_iso_extended_format() [with time_type = boost::posix_time::ptime; CharT = char; InItrT = std::istreambuf_iterator<char, std::char_traits<char> >]' can be marked override [-Wsuggest-override]
  768 |       virtual void set_iso_extended_format()
      |                    ^~~~~~~~~~~~~~~~~~~~~~~
  CXX      util/libbitcoin_util_a-tokenpipe.o
  CXX      util/libbitcoin_util_a-url.o
  AR       libbitcoin_util.a
  CXX      univalue/lib/libunivalue_la-univalue.lo
  CXX      univalue/lib/libunivalue_la-univalue_get.lo
  CXX      univalue/lib/libunivalue_la-univalue_read.lo
  CXX      univalue/lib/libunivalue_la-univalue_write.lo
  CXXLD    libunivalue.la
  CXX      libbitcoin_consensus_a-arith_uint256.o
  CXX      consensus/libbitcoin_consensus_a-merkle.o
  CXX      consensus/libbitcoin_consensus_a-tx_check.o
  CXX      libbitcoin_consensus_a-hash.o
  CXX      primitives/libbitcoin_consensus_a-block.o
  CXX      primitives/libbitcoin_consensus_a-transaction.o
  CXX      libbitcoin_consensus_a-pubkey.o
  CXX      script/libbitcoin_consensus_a-bitcoinconsensus.o
  CXX      script/libbitcoin_consensus_a-interpreter.o
  CXX      script/libbitcoin_consensus_a-script.o
  CXX      script/libbitcoin_consensus_a-script_error.o
  CXX      libbitcoin_consensus_a-uint256.o
  CXX      util/libbitcoin_consensus_a-strencodings.o
  AR       libbitcoin_consensus.a
  CXX      crypto/libbitcoin_crypto_base_la-aes.lo
  CXX      crypto/libbitcoin_crypto_base_la-chacha_poly_aead.lo
  CXX      crypto/libbitcoin_crypto_base_la-chacha20.lo
  CXX      crypto/libbitcoin_crypto_base_la-hkdf_sha256_32.lo
  CXX      crypto/libbitcoin_crypto_base_la-hmac_sha256.lo
  CXX      crypto/libbitcoin_crypto_base_la-hmac_sha512.lo
  CXX      crypto/libbitcoin_crypto_base_la-poly1305.lo
  CXX      crypto/libbitcoin_crypto_base_la-muhash.lo
  CXX      crypto/libbitcoin_crypto_base_la-ripemd160.lo
  CXX      crypto/libbitcoin_crypto_base_la-sha1.lo
  CXX      crypto/libbitcoin_crypto_base_la-sha256.lo
  CXX      crypto/libbitcoin_crypto_base_la-sha3.lo
  CXX      crypto/libbitcoin_crypto_base_la-sha512.lo
  CXX      crypto/libbitcoin_crypto_base_la-siphash.lo
  CXX      crypto/libbitcoin_crypto_base_la-sha256_sse4.lo
  CXXLD    crypto/libbitcoin_crypto_base.la
  CXX      leveldb/db/libleveldb_la-builder.lo
  CXX      leveldb/db/libleveldb_la-c.lo
  CXX      leveldb/db/libleveldb_la-dbformat.lo
  CXX      leveldb/db/libleveldb_la-db_impl.lo
  CXX      leveldb/db/libleveldb_la-db_iter.lo
  CXX      leveldb/db/libleveldb_la-dumpfile.lo
  CXX      leveldb/db/libleveldb_la-filename.lo
  CXX      leveldb/db/libleveldb_la-log_reader.lo
  CXX      leveldb/db/libleveldb_la-log_writer.lo
  CXX      leveldb/db/libleveldb_la-memtable.lo
  CXX      leveldb/db/libleveldb_la-repair.lo
  CXX      leveldb/db/libleveldb_la-table_cache.lo
  CXX      leveldb/db/libleveldb_la-version_edit.lo
  CXX      leveldb/db/libleveldb_la-version_set.lo
  CXX      leveldb/db/libleveldb_la-write_batch.lo
  CXX      leveldb/table/libleveldb_la-block_builder.lo
  CXX      leveldb/table/libleveldb_la-block.lo
  CXX      leveldb/table/libleveldb_la-filter_block.lo
  CXX      leveldb/table/libleveldb_la-format.lo
  CXX      leveldb/table/libleveldb_la-iterator.lo
  CXX      leveldb/table/libleveldb_la-merger.lo
  CXX      leveldb/table/libleveldb_la-table_builder.lo
  CXX      leveldb/table/libleveldb_la-table.lo
  CXX      leveldb/table/libleveldb_la-two_level_iterator.lo
  CXX      leveldb/util/libleveldb_la-arena.lo
  CXX      leveldb/util/libleveldb_la-bloom.lo
  CXX      leveldb/util/libleveldb_la-cache.lo
  CXX      leveldb/util/libleveldb_la-coding.lo
  CXX      leveldb/util/libleveldb_la-comparator.lo
  CXX      leveldb/util/libleveldb_la-crc32c.lo
  CXX      leveldb/util/libleveldb_la-env.lo
  CXX      leveldb/util/libleveldb_la-filter_policy.lo
  CXX      leveldb/util/libleveldb_la-hash.lo
  CXX      leveldb/util/libleveldb_la-histogram.lo
  CXX      leveldb/util/libleveldb_la-logging.lo
  CXX      leveldb/util/libleveldb_la-options.lo
  CXX      leveldb/util/libleveldb_la-status.lo
  CXX      leveldb/util/libleveldb_la-env_posix.lo
  CXXLD    leveldb/libleveldb.la
  CXX      crc32c/src/libcrc32c_la-crc32c.lo
  CXX      crc32c/src/libcrc32c_la-crc32c_portable.lo
  CXXLD    crc32c/libcrc32c.la
  CXX      leveldb/helpers/memenv/libmemenv_la-memenv.lo
  CXXLD    leveldb/libmemenv.la
  CC       src/libsecp256k1_la-secp256k1.lo
  CC       src/libsecp256k1_precomputed_la-precomputed_ecmult.lo
  CC       src/libsecp256k1_precomputed_la-precomputed_ecmult_gen.lo
  CCLD     libsecp256k1_precomputed.la
  CCLD     libsecp256k1.la
  CXXLD    bitcoind
  CXX      bitcoin_cli-bitcoin-cli.o
  CXX      compat/libbitcoin_cli_a-stdin.o
  CXX      rpc/libbitcoin_cli_a-client.o
  AR       libbitcoin_cli.a
  CXXLD    bitcoin-cli
  CXX      bitcoin_tx-bitcoin-tx.o
  CXXLD    bitcoin-tx
  CXX      bitcoin_wallet-bitcoin-wallet.o
  CXX      init/bitcoin_wallet-bitcoin-wallet.o
  CXX      wallet/libbitcoin_wallet_tool_a-wallettool.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/wallettool.cpp:16:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/wallettool.cpp:16:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/wallettool.cpp:16:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  AR       libbitcoin_wallet_tool.a
  CXXLD    bitcoin-wallet
  CXX      bitcoin_util-bitcoin-util.o
  CXXLD    bitcoin-util
  CXX      test/test_bitcoin-main.o
In file included from /opt/homebrew//include/boost/test/output/compiler_log_formatter.hpp:17,
                 from /opt/homebrew//include/boost/test/impl/compiler_log_formatter.ipp:19,
                 from /opt/homebrew//include/boost/test/included/unit_test.hpp:18,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/unit_test_log_formatter.hpp:176:25: warning: 'virtual void boost::unit_test::unit_test_log_formatter::test_unit_skipped(std::ostream&, const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
  176 |     virtual void        test_unit_skipped( std::ostream& /* os */, test_unit const& /* tu */) {}
      |                         ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/impl/compiler_log_formatter.ipp:19,
                 from /opt/homebrew//include/boost/test/included/unit_test.hpp:18,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/output/compiler_log_formatter.hpp:45:13: note:   by 'virtual void boost::unit_test::output::compiler_log_formatter::test_unit_skipped(std::ostream&, const boost::unit_test::test_unit&, boost::unit_test::const_string)'
   45 |     void    test_unit_skipped( std::ostream&, test_unit const& tu, const_string reason ) BOOST_OVERRIDE;
      |             ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/output/compiler_log_formatter.hpp:17,
                 from /opt/homebrew//include/boost/test/impl/compiler_log_formatter.ipp:19,
                 from /opt/homebrew//include/boost/test/included/unit_test.hpp:18,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/unit_test_log_formatter.hpp:176:25: warning: 'virtual void boost::unit_test::unit_test_log_formatter::test_unit_skipped(std::ostream&, const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
  176 |     virtual void        test_unit_skipped( std::ostream& /* os */, test_unit const& /* tu */) {}
      |                         ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/impl/junit_log_formatter.ipp:16,
                 from /opt/homebrew//include/boost/test/included/unit_test.hpp:19,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/output/junit_log_formatter.hpp:108:13: note:   by 'virtual void boost::unit_test::output::junit_log_formatter::test_unit_skipped(std::ostream&, const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  108 |     void    test_unit_skipped( std::ostream&, test_unit const& tu, const_string reason ) BOOST_OVERRIDE;
      |             ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/results_collector.hpp:19,
                 from /opt/homebrew//include/boost/test/impl/junit_log_formatter.ipp:27,
                 from /opt/homebrew//include/boost/test/included/unit_test.hpp:19,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/impl/junit_log_formatter.ipp:27,
                 from /opt/homebrew//include/boost/test/included/unit_test.hpp:19,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/results_collector.hpp:128:17: note:   by 'virtual void boost::unit_test::results_collector_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  128 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/impl/junit_log_formatter.ipp:25,
                 from /opt/homebrew//include/boost/test/included/unit_test.hpp:19,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/tree/visitor.hpp:37:21: warning: 'virtual bool boost::unit_test::test_tree_visitor::visit(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   37 |     virtual bool    visit( test_unit const& )               { return true; }
      |                     ^~~~~
In file included from /opt/homebrew//include/boost/test/included/unit_test.hpp:19,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/impl/junit_log_formatter.ipp:400:13: note:   by 'virtual void boost::unit_test::output::junit_result_helper::visit(const boost::unit_test::test_case&)'
  400 |     void    visit( test_case const& tc ) BOOST_OVERRIDE
      |             ^~~~~
In file included from /opt/homebrew//include/boost/test/results_collector.hpp:19,
                 from /opt/homebrew//include/boost/test/impl/junit_log_formatter.ipp:27,
                 from /opt/homebrew//include/boost/test/included/unit_test.hpp:19,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/impl/framework.ipp:24,
                 from /opt/homebrew//include/boost/test/included/unit_test.hpp:22,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/results_collector.hpp:19,
                 from /opt/homebrew//include/boost/test/impl/junit_log_formatter.ipp:27,
                 from /opt/homebrew//include/boost/test/included/unit_test.hpp:19,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/impl/framework.ipp:28,
                 from /opt/homebrew//include/boost/test/included/unit_test.hpp:22,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/progress_monitor.hpp:41:13: note:   by 'virtual void boost::unit_test::progress_monitor_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
   41 |     void    test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |             ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/impl/junit_log_formatter.ipp:25,
                 from /opt/homebrew//include/boost/test/included/unit_test.hpp:19,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/tree/visitor.hpp:37:21: warning: 'virtual bool boost::unit_test::test_tree_visitor::visit(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   37 |     virtual bool    visit( test_unit const& )               { return true; }
      |                     ^~~~~
In file included from /opt/homebrew//include/boost/test/impl/framework.ipp:36,
                 from /opt/homebrew//include/boost/test/included/unit_test.hpp:22,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/tree/test_case_counter.hpp:46:13: note:   by 'virtual void boost::unit_test::test_case_counter::visit(const boost::unit_test::test_case&)'
   46 |     void    visit( test_case const& tc ) BOOST_OVERRIDE                { if( m_ignore_status || tc.is_enabled() ) ++p_count.value; }
      |             ^~~~~
In file included from /opt/homebrew//include/boost/test/impl/junit_log_formatter.ipp:25,
                 from /opt/homebrew//include/boost/test/included/unit_test.hpp:19,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/tree/visitor.hpp:37:21: warning: 'virtual bool boost::unit_test::test_tree_visitor::visit(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   37 |     virtual bool    visit( test_unit const& )               { return true; }
      |                     ^~~~~
In file included from /opt/homebrew//include/boost/test/included/unit_test.hpp:22,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/impl/framework.ipp:277:13: note:   by 'virtual void boost::unit_test::framework::impl::name_filter::visit(const boost::unit_test::test_case&)'
  277 |     void    visit( test_case const& tc ) BOOST_OVERRIDE
      |             ^~~~~
In file included from /opt/homebrew//include/boost/test/impl/junit_log_formatter.ipp:25,
                 from /opt/homebrew//include/boost/test/included/unit_test.hpp:19,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/tree/visitor.hpp:38:21: warning: 'virtual void boost::unit_test::test_tree_visitor::visit(const boost::unit_test::test_case&)' was hidden [-Woverloaded-virtual]
   38 |     virtual void    visit( test_case const& tc )            { visit( (test_unit const&)tc ); }
      |                     ^~~~~
In file included from /opt/homebrew//include/boost/test/included/unit_test.hpp:22,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/impl/framework.ipp:323:13: note:   by 'virtual bool boost::unit_test::framework::impl::label_filter::visit(const boost::unit_test::test_unit&)'
  323 |     bool    visit( test_unit const& tu ) BOOST_OVERRIDE
      |             ^~~~~
In file included from /opt/homebrew//include/boost/test/impl/junit_log_formatter.ipp:25,
                 from /opt/homebrew//include/boost/test/included/unit_test.hpp:19,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/tree/visitor.hpp:38:21: warning: 'virtual void boost::unit_test::test_tree_visitor::visit(const boost::unit_test::test_case&)' was hidden [-Woverloaded-virtual]
   38 |     virtual void    visit( test_case const& tc )            { visit( (test_unit const&)tc ); }
      |                     ^~~~~
In file included from /opt/homebrew//include/boost/test/included/unit_test.hpp:22,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/impl/framework.ipp:351:13: note:   by 'virtual bool boost::unit_test::framework::impl::set_run_status::visit(const boost::unit_test::test_unit&)'
  351 |     bool    visit( test_unit const& tu ) BOOST_OVERRIDE
      |             ^~~~~
In file included from /opt/homebrew//include/boost/test/impl/junit_log_formatter.ipp:25,
                 from /opt/homebrew//include/boost/test/included/unit_test.hpp:19,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/tree/visitor.hpp: In function 'void boost::unit_test::framework::finalize_setup_phase(boost::unit_test::test_unit_id)':
/opt/homebrew//include/boost/test/tree/visitor.hpp:38:21: warning: 'virtual void boost::unit_test::test_tree_visitor::visit(const boost::unit_test::test_case&)' was hidden [-Woverloaded-virtual]
   38 |     virtual void    visit( test_case const& tc )            { visit( (test_unit const&)tc ); }
      |                     ^~~~~
In file included from /opt/homebrew//include/boost/test/included/unit_test.hpp:22,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/impl/framework.ipp:1237:17: note:   by 'virtual bool boost::unit_test::framework::finalize_setup_phase(boost::unit_test::test_unit_id)::apply_decorators::visit(const boost::unit_test::test_unit&)'
 1237 |         bool    visit( test_unit const& tu ) BOOST_OVERRIDE
      |                 ^~~~~
In file included from /opt/homebrew//include/boost/test/impl/junit_log_formatter.ipp:25,
                 from /opt/homebrew//include/boost/test/included/unit_test.hpp:19,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/tree/visitor.hpp: At global scope:
/opt/homebrew//include/boost/test/tree/visitor.hpp:38:21: warning: 'virtual void boost::unit_test::test_tree_visitor::visit(const boost::unit_test::test_case&)' was hidden [-Woverloaded-virtual]
   38 |     virtual void    visit( test_case const& tc )            { visit( (test_unit const&)tc ); }
      |                     ^~~~~
In file included from /opt/homebrew//include/boost/test/included/unit_test.hpp:26,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/impl/results_collector.ipp:156:10: note:   by 'virtual bool boost::unit_test::{anonymous}::clear_subtree_result::visit(const boost::unit_test::test_unit&)'
  156 |     bool visit( test_unit const& tu) BOOST_OVERRIDE
      |          ^~~~~
In file included from /opt/homebrew//include/boost/test/impl/junit_log_formatter.ipp:25,
                 from /opt/homebrew//include/boost/test/included/unit_test.hpp:19,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/tree/visitor.hpp:37:21: warning: 'virtual bool boost::unit_test::test_tree_visitor::visit(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   37 |     virtual bool    visit( test_unit const& )               { return true; }
      |                     ^~~~~
In file included from /opt/homebrew//include/boost/test/included/unit_test.hpp:26,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/impl/results_collector.ipp:204:13: note:   by 'virtual void boost::unit_test::results_collect_helper::visit(const boost::unit_test::test_case&)'
  204 |     void    visit( test_case const& tc ) BOOST_OVERRIDE
      |             ^~~~~
In file included from /opt/homebrew//include/boost/test/impl/junit_log_formatter.ipp:25,
                 from /opt/homebrew//include/boost/test/included/unit_test.hpp:19,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/tree/visitor.hpp:37:21: warning: 'virtual bool boost::unit_test::test_tree_visitor::visit(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   37 |     virtual bool    visit( test_unit const& )               { return true; }
      |                     ^~~~~
In file included from /opt/homebrew//include/boost/test/included/unit_test.hpp:27,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/impl/results_reporter.ipp:62:13: note:   by 'virtual void boost::unit_test::results_reporter::{anonymous}::results_reporter_impl::visit(const boost::unit_test::test_case&)'
   62 |     void    visit( test_case const& tc ) BOOST_OVERRIDE
      |             ^~~~~
In file included from /opt/homebrew//include/boost/test/output/compiler_log_formatter.hpp:17,
                 from /opt/homebrew//include/boost/test/impl/compiler_log_formatter.ipp:19,
                 from /opt/homebrew//include/boost/test/included/unit_test.hpp:18,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/unit_test_log_formatter.hpp:176:25: warning: 'virtual void boost::unit_test::unit_test_log_formatter::test_unit_skipped(std::ostream&, const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
  176 |     virtual void        test_unit_skipped( std::ostream& /* os */, test_unit const& /* tu */) {}
      |                         ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/impl/unit_test_log.ipp:29,
                 from /opt/homebrew//include/boost/test/included/unit_test.hpp:31,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/output/xml_log_formatter.hpp:46:13: note:   by 'virtual void boost::unit_test::output::xml_log_formatter::test_unit_skipped(std::ostream&, const boost::unit_test::test_unit&, boost::unit_test::const_string)'
   46 |     void    test_unit_skipped( std::ostream&, test_unit const& tu, const_string reason ) BOOST_OVERRIDE;
      |             ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/impl/junit_log_formatter.ipp:25,
                 from /opt/homebrew//include/boost/test/included/unit_test.hpp:19,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/tree/visitor.hpp:37:21: warning: 'virtual bool boost::unit_test::test_tree_visitor::visit(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   37 |     virtual bool    visit( test_unit const& )               { return true; }
      |                     ^~~~~
In file included from /opt/homebrew//include/boost/test/included/unit_test.hpp:32,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/impl/unit_test_main.ipp:71:13: note:   by 'virtual void boost::unit_test::ut_detail::hrf_content_reporter::visit(const boost::unit_test::test_case&)'
   71 |     void    visit( test_case const& tc ) BOOST_OVERRIDE { report_test_unit( tc ); }
      |             ^~~~~
In file included from /opt/homebrew//include/boost/test/impl/junit_log_formatter.ipp:25,
                 from /opt/homebrew//include/boost/test/included/unit_test.hpp:19,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/tree/visitor.hpp:37:21: warning: 'virtual bool boost::unit_test::test_tree_visitor::visit(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   37 |     virtual bool    visit( test_unit const& )               { return true; }
      |                     ^~~~~
In file included from /opt/homebrew//include/boost/test/included/unit_test.hpp:32,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/impl/unit_test_main.ipp:136:13: note:   by virtual void boost::unit_test::ut_detail::dot_content_reporter::visit(const boost::unit_test::test_case&)'
  136 |     void    visit( test_case const& tc ) BOOST_OVERRIDE
      |             ^~~~~
In file included from /opt/homebrew//include/boost/test/impl/junit_log_formatter.ipp:25,
                 from /opt/homebrew//include/boost/test/included/unit_test.hpp:19,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/tree/visitor.hpp:38:21: warning: 'virtual void boost::unit_test::test_tree_visitor::visit(const boost::unit_test::test_case&)' was hidden [-Woverloaded-virtual]
   38 |     virtual void    visit( test_case const& tc )            { visit( (test_unit const&)tc ); }
      |                     ^~~~~
In file included from /opt/homebrew//include/boost/test/included/unit_test.hpp:32,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/impl/unit_test_main.ipp:169:21: note:   by virtual bool boost::unit_test::ut_detail::labels_collector::visit(const boost::unit_test::test_unit&)'
  169 |     bool            visit( test_unit const& tu ) BOOST_OVERRIDE
      |                     ^~~~~
In file included from /opt/homebrew//include/boost/test/included/unit_test.hpp:38,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/unit_test.hpp:46:21: warning: redundant redeclaration of 'int boost::unit_test::unit_test_main(boost::unit_test::init_unit_test_func, int, char**)' in same scope [-Wredundant-decls]
   46 | int BOOST_TEST_DECL unit_test_main( init_unit_test_func init_func, int argc, char* argv[] );
      |                     ^~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/included/unit_test.hpp:32,
                 from test/main.cpp:10:
/opt/homebrew//include/boost/test/impl/unit_test_main.ipp:199:1: note: previous declaration of 'int boost::unit_test::unit_test_main(boost::unit_test::init_unit_test_func, int, char**)'
  199 | unit_test_main( init_unit_test_func init_func, int argc, char* argv[] )
      | ^~~~~~~~~~~~~~
  CXX      wallet/test/test_test_bitcoin-util.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/test/util.cpp:11:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/test/util.cpp:11:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from wallet/test/util.cpp:14:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from wallet/test/util.cpp:14:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/test/util.cpp:11:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/test/test_test_bitcoin-wallet_test_fixture.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/test/wallet_test_fixture.h:14,
                 from wallet/test/wallet_test_fixture.cpp:5:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/test/wallet_test_fixture.h:14,
                 from wallet/test/wallet_test_fixture.cpp:5:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/test/wallet_test_fixture.h:14,
                 from wallet/test/wallet_test_fixture.cpp:5:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/test/test_test_bitcoin-init_test_fixture.o
Generated test/data/script_tests.json.h
Generated test/data/bip341_wallet_vectors.json.h
Generated test/data/base58_encode_decode.json.h
Generated test/data/blockfilters.json.h
Generated test/data/key_io_valid.json.h
Generated test/data/key_io_invalid.json.h
Generated test/data/sighash.json.h
Generated test/data/tx_invalid.json.h
Generated test/data/tx_valid.json.h
Generated test/data/asmap.raw.h
  CXX      test/test_bitcoin-addrman_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/addrman_tests.cpp:18:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/addrman_tests.cpp:18:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/addrman_tests.cpp:18:
/opt/homebrew//include/boost/test/tools/old/impl.hpp: In instantiation of 'boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl(const Left&, const Right&) [with Left = int; Right = unsigned int]':
/opt/homebrew//include/boost/test/tools/old/impl.hpp:130:26:   required from boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl_frwd::call_impl(const Left&, const Right&, mpl_::false_) const [with Left = int; Right = unsigned int; mpl_::false_ = mpl_::bool_<false>]'
/opt/homebrew//include/boost/test/tools/old/impl.hpp:145:25:   required from boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl_frwd::operator()(const Left&, const Right&) const [with Left = int; Right = unsigned int]'
/opt/homebrew//include/boost/test/tools/old/impl.hpp:92:1:   required from 'bool boost::test_tools::tt_detail::check_frwd(Pred, const boost::unit_test::lazy_ostream&, boost::unit_test::const_string, std::size_t, boost::test_tools::tt_detail::tool_level, boost::test_tools::tt_detail::check_type, const Arg0&, const char*, const Arg1&, const char*) [with Pred = boost::test_tools::tt_detail::equal_impl_frwd; Arg0 = int; Arg1 = unsigned int; boost::unit_test::const_string = boost::unit_test::basic_cstring<const char>; std::size_t = long unsigned int]'
test/addrman_tests.cpp:238:5:   required from here
/opt/homebrew//include/boost/test/tools/old/impl.hpp:107:17: warning: comparison of integer expressions of different signedness: 'const int' and 'const unsigned int' [-Wsign-compare]
  107 |     return left == right;
      |            ~~~~~^~~~~~~~
/opt/homebrew//include/boost/test/tools/old/impl.hpp: In instantiation of 'boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl(const Left&, const Right&) [with Left = long unsigned int; Right = int]':
/opt/homebrew//include/boost/test/tools/old/impl.hpp:130:26:   required from boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl_frwd::call_impl(const Left&, const Right&, mpl_::false_) const [with Left = long unsigned int; Right = int; mpl_::false_ = mpl_::bool_<false>]'
/opt/homebrew//include/boost/test/tools/old/impl.hpp:145:25:   required from boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl_frwd::operator()(const Left&, const Right&) const [with Left = long unsigned int; Right = int]'
/opt/homebrew//include/boost/test/tools/old/impl.hpp:92:1:   required from 'bool boost::test_tools::tt_detail::check_frwd(Pred, const boost::unit_test::lazy_ostream&, boost::unit_test::const_string, std::size_t, boost::test_tools::tt_detail::tool_level, boost::test_tools::tt_detail::check_type, const Arg0&, const char*, const Arg1&, const char*) [with Pred = boost::test_tools::tt_detail::equal_impl_frwd; Arg0 = long unsigned int; Arg1 = int; boost::unit_test::const_string = boost::unit_test::basic_cstring<const char>; std::size_t = long unsigned int]'
test/addrman_tests.cpp:684:5:   required from here
/opt/homebrew//include/boost/test/tools/old/impl.hpp:107:17: warning: comparison of integer expressions of different signedness: 'const long unsigned int' and 'const int' [-Wsign-compare]
  CXX      test/test_bitcoin-allocator_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/allocator_tests.cpp:14:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/allocator_tests.cpp:14:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-amount_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/amount_tests.cpp:10:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/amount_tests.cpp:10:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-arith_uint256_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/arith_uint256_tests.cpp:8:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/arith_uint256_tests.cpp:8:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-banman_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/banman_tests.cpp:14:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/banman_tests.cpp:14:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-base32_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/base32_tests.cpp:7:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/base32_tests.cpp:7:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-base58_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/base58_tests.cpp:14:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/base58_tests.cpp:14:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-base64_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/base64_tests.cpp:7:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/base64_tests.cpp:7:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-bech32_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/bech32_tests.cpp:9:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/bech32_tests.cpp:9:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-bip32_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/bip32_tests.cpp:5:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/bip32_tests.cpp:5:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-blockchain_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/blockchain_tests.cpp:5:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/blockchain_tests.cpp:5:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-blockencodings_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/blockencodings_tests.cpp:13:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/blockencodings_tests.cpp:13:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-blockfilter_index_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/blockfilter_index_tests.cpp:19:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/blockfilter_index_tests.cpp:19:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-blockfilter_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/blockfilter_tests.cpp:15:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/blockfilter_tests.cpp:15:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-bloom_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/bloom_tests.cpp:22:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/bloom_tests.cpp:22:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-bswap_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/bswap_tests.cpp:7:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/bswap_tests.cpp:7:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-checkqueue_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/checkqueue_tests.cpp:11:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/checkqueue_tests.cpp:11:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-coins_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/coins_tests.cpp:18:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/coins_tests.cpp:18:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-coinstatsindex_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/coinstatsindex_tests.cpp:13:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/coinstatsindex_tests.cpp:13:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-compilerbug_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/compilerbug_tests.cpp:5:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/compilerbug_tests.cpp:5:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-compress_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/compress_tests.cpp:11:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/compress_tests.cpp:11:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-crypto_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/crypto_tests.cpp:25:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/crypto_tests.cpp:25:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-cuckoocache_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/cuckoocache_tests.cpp:9:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/cuckoocache_tests.cpp:9:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-dbwrapper_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/dbwrapper_tests.cpp:11:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/dbwrapper_tests.cpp:11:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-denialofservice_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/denialofservice_tests.cpp:27:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/denialofservice_tests.cpp:27:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-descriptor_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/descriptor_tests.cpp:12:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/descriptor_tests.cpp:12:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/descriptor_tests.cpp:12:
/opt/homebrew//include/boost/test/tools/old/impl.hpp: In instantiation of 'boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl(const Left&, const Right&) [with Left = unsigned int; Right = int]':
/opt/homebrew//include/boost/test/tools/old/impl.hpp:130:26:   required from boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl_frwd::call_impl(const Left&, const Right&, mpl_::false_) const [with Left = unsigned int; Right = int; mpl_::false_ = mpl_::bool_<false>]'
/opt/homebrew//include/boost/test/tools/old/impl.hpp:145:25:   required from boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl_frwd::operator()(const Left&, const Right&) const [with Left = unsigned int; Right = int]'
/opt/homebrew//include/boost/test/tools/old/impl.hpp:92:1:   required from 'bool boost::test_tools::tt_detail::check_frwd(Pred, const boost::unit_test::lazy_ostream&, boost::unit_test::const_string, std::size_t, boost::test_tools::tt_detail::tool_level, boost::test_tools::tt_detail::check_type, const Arg0&, const char*, const Arg1&, const char*) [with Pred = boost::test_tools::tt_detail::equal_impl_frwd; Arg0 = unsigned int; Arg1 = int; boost::unit_test::const_string = boost::unit_test::basic_cstring<const char>; std::size_t = long unsigned int]'
test/descriptor_tests.cpp:98:13:   required from here
/opt/homebrew//include/boost/test/tools/old/impl.hpp:107:17: warning: comparison of integer expressions of different signedness: 'const unsigned int' and 'const int' [-Wsign-compare]
  107 |     return left == right;
      |            ~~~~~^~~~~~~~
/opt/homebrew//include/boost/test/tools/old/impl.hpp: In instantiation of 'boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl(const Left&, const Right&) [with Left = long unsigned int; Right = int]':
/opt/homebrew//include/boost/test/tools/old/impl.hpp:130:26:   required from boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl_frwd::call_impl(const Left&, const Right&, mpl_::false_) const [with Left = long unsigned int; Right = int; mpl_::false_ = mpl_::bool_<false>]'
/opt/homebrew//include/boost/test/tools/old/impl.hpp:145:25:   required from boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl_frwd::operator()(const Left&, const Right&) const [with Left = long unsigned int; Right = int]'
/opt/homebrew//include/boost/test/tools/old/impl.hpp:92:1:   required from 'bool boost::test_tools::tt_detail::check_frwd(Pred, const boost::unit_test::lazy_ostream&, boost::unit_test::const_string, std::size_t, boost::test_tools::tt_detail::tool_level, boost::test_tools::tt_detail::check_type, const Arg0&, const char*, const Arg1&, const char*) [with Pred = boost::test_tools::tt_detail::equal_impl_frwd; Arg0 = long unsigned int; Arg1 = int; boost::unit_test::const_string = boost::unit_test::basic_cstring<const char>; std::size_t = long unsigned int]'
test/descriptor_tests.cpp:245:21:   required from here
/opt/homebrew//include/boost/test/tools/old/impl.hpp:107:17: warning: comparison of integer expressions of different signedness: 'const long unsigned int' and 'const int' [-Wsign-compare]
  CXX      test/test_bitcoin-flatfile_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/flatfile_tests.cpp:11:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/flatfile_tests.cpp:11:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-fs_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/fs_tests.cpp:10:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/fs_tests.cpp:10:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/fs_tests.cpp:10:
/opt/homebrew//include/boost/test/tools/old/impl.hpp: In instantiation of 'boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl(const Left&, const Right&) [with Left = long unsigned int; Right = int]':
/opt/homebrew//include/boost/test/tools/old/impl.hpp:130:26:   required from boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl_frwd::call_impl(const Left&, const Right&, mpl_::false_) const [with Left = long unsigned int; Right = int; mpl_::false_ = mpl_::bool_<false>]'
/opt/homebrew//include/boost/test/tools/old/impl.hpp:145:25:   required from boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl_frwd::operator()(const Left&, const Right&) const [with Left = long unsigned int; Right = int]'
/opt/homebrew//include/boost/test/tools/old/impl.hpp:92:1:   required from 'bool boost::test_tools::tt_detail::check_frwd(Pred, const boost::unit_test::lazy_ostream&, boost::unit_test::const_string, std::size_t, boost::test_tools::tt_detail::tool_level, boost::test_tools::tt_detail::check_type, const Arg0&, const char*, const Arg1&, const char*) [with Pred = boost::test_tools::tt_detail::equal_impl_frwd; Arg0 = long unsigned int; Arg1 = int; boost::unit_test::const_string = boost::unit_test::basic_cstring<const char>; std::size_t = long unsigned int]'
test/fs_tests.cpp:33:5:   required from here
/opt/homebrew//include/boost/test/tools/old/impl.hpp:107:17: warning: comparison of integer expressions of different signedness: 'const long unsigned int' and 'const int' [-Wsign-compare]
  107 |     return left == right;
      |            ~~~~~^~~~~~~~
  CXX      test/test_bitcoin-getarg_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/getarg_tests.cpp:16:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/getarg_tests.cpp:16:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-hash_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/hash_tests.cpp:11:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/hash_tests.cpp:11:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-httpserver_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/httpserver_tests.cpp:8:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/httpserver_tests.cpp:8:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-i2p_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/i2p_tests.cpp:13:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/i2p_tests.cpp:13:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-interfaces_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/interfaces_tests.cpp:12:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/interfaces_tests.cpp:12:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-key_io_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/key_io_tests.cpp:14:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/key_io_tests.cpp:14:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-key_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/key_tests.cpp:18:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/key_tests.cpp:18:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-logging_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/logging_tests.cpp:16:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/logging_tests.cpp:16:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-mempool_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/mempool_tests.cpp:12:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/mempool_tests.cpp:12:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-merkle_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/merkle_tests.cpp:8:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/merkle_tests.cpp:8:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-merkleblock_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/merkleblock_tests.cpp:9:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/merkleblock_tests.cpp:9:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-miner_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/miner_tests.cpp:26:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/miner_tests.cpp:26:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-miniscript_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/miniscript_tests.cpp:9:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/miniscript_tests.cpp:9:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/miniscript_tests.cpp:9:
/opt/homebrew//include/boost/test/tools/old/impl.hpp: In instantiation of 'boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl(const Left&, const Right&) [with Left = unsigned int; Right = int]':
/opt/homebrew//include/boost/test/tools/old/impl.hpp:130:26:   required from boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl_frwd::call_impl(const Left&, const Right&, mpl_::false_) const [with Left = unsigned int; Right = int; mpl_::false_ = mpl_::bool_<false>]'
/opt/homebrew//include/boost/test/tools/old/impl.hpp:145:25:   required from boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl_frwd::operator()(const Left&, const Right&) const [with Left = unsigned int; Right = int]'
/opt/homebrew//include/boost/test/tools/old/impl.hpp:92:1:   required from 'bool boost::test_tools::tt_detail::check_frwd(Pred, const boost::unit_test::lazy_ostream&, boost::unit_test::const_string, std::size_t, boost::test_tools::tt_detail::tool_level, boost::test_tools::tt_detail::check_type, const Arg0&, const char*, const Arg1&, const char*) [with Pred = boost::test_tools::tt_detail::equal_impl_frwd; Arg0 = unsigned int; Arg1 = int; boost::unit_test::const_string = boost::unit_test::basic_cstring<const char>; std::size_t = long unsigned int]'
test/miniscript_tests.cpp:275:5:   required from here
/opt/homebrew//include/boost/test/tools/old/impl.hpp:107:17: warning: comparison of integer expressions of different signedness: 'const unsigned int' and 'const int' [-Wsign-compare]
  107 |     return left == right;
      |            ~~~~~^~~~~~~~
  CXX      test/test_bitcoin-minisketch_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/minisketch_tests.cpp:10:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/minisketch_tests.cpp:10:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-multisig_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/multisig_tests.cpp:17:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/multisig_tests.cpp:17:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-net_peer_eviction_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/net_peer_eviction_tests.cpp:10:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/net_peer_eviction_tests.cpp:10:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-net_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/net_tests.cpp:26:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/net_tests.cpp:26:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-netbase_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/netbase_tests.cpp:19:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/netbase_tests.cpp:19:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/netbase_tests.cpp:19:
/opt/homebrew//include/boost/test/tools/old/impl.hpp: In instantiation of 'boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl(const Left&, const Right&) [with Left = long unsigned int; Right = int]':
/opt/homebrew//include/boost/test/tools/old/impl.hpp:130:26:   required from boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl_frwd::call_impl(const Left&, const Right&, mpl_::false_) const [with Left = long unsigned int; Right = int; mpl_::false_ = mpl_::bool_<false>]'
/opt/homebrew//include/boost/test/tools/old/impl.hpp:145:25:   required from boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl_frwd::operator()(const Left&, const Right&) const [with Left = long unsigned int; Right = int]'
/opt/homebrew//include/boost/test/tools/old/impl.hpp:92:1:   required from 'bool boost::test_tools::tt_detail::check_frwd(Pred, const boost::unit_test::lazy_ostream&, boost::unit_test::const_string, std::size_t, boost::test_tools::tt_detail::tool_level, boost::test_tools::tt_detail::check_type, const Arg0&, const char*, const Arg1&, const char*) [with Pred = boost::test_tools::tt_detail::equal_impl_frwd; Arg0 = long unsigned int; Arg1 = int; boost::unit_test::const_string = boost::unit_test::basic_cstring<const char>; std::size_t = long unsigned int]'
test/netbase_tests.cpp:597:5:   required from here
/opt/homebrew//include/boost/test/tools/old/impl.hpp:107:17: warning: comparison of integer expressions of different signedness: 'const long unsigned int' and 'const int' [-Wsign-compare]
  107 |     return left == right;
      |            ~~~~~^~~~~~~~
  CXX      test/test_bitcoin-orphanage_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/orphanage_tests.cpp:16:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/orphanage_tests.cpp:16:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-pmt_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/pmt_tests.cpp:15:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/pmt_tests.cpp:15:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-policy_fee_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/policy_fee_tests.cpp:8:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/policy_fee_tests.cpp:8:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-policyestimator_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/policyestimator_tests.cpp:13:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/policyestimator_tests.cpp:13:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-pow_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/pow_tests.cpp:10:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/pow_tests.cpp:10:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-prevector_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/prevector_tests.cpp:14:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/prevector_tests.cpp:14:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-raii_event_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/raii_event_tests.cpp:14:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/raii_event_tests.cpp:14:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-random_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/random_tests.cpp:9:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/random_tests.cpp:9:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-rbf_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/rbf_tests.cpp:12:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/rbf_tests.cpp:12:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/rbf_tests.cpp:12:
/opt/homebrew//include/boost/test/tools/old/impl.hpp: In instantiation of 'boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl(const Left&, const Right&) [with Left = long unsigned int; Right = int]':
/opt/homebrew//include/boost/test/tools/old/impl.hpp:130:26:   required from boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl_frwd::call_impl(const Left&, const Right&, mpl_::false_) const [with Left = long unsigned int; Right = int; mpl_::false_ = mpl_::bool_<false>]'
/opt/homebrew//include/boost/test/tools/old/impl.hpp:145:25:   required from boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl_frwd::operator()(const Left&, const Right&) const [with Left = long unsigned int; Right = int]'
/opt/homebrew//include/boost/test/tools/old/impl.hpp:92:1:   required from 'bool boost::test_tools::tt_detail::check_frwd(Pred, const boost::unit_test::lazy_ostream&, boost::unit_test::const_string, std::size_t, boost::test_tools::tt_detail::tool_level, boost::test_tools::tt_detail::check_type, const Arg0&, const char*, const Arg1&, const char*) [with Pred = boost::test_tools::tt_detail::equal_impl_frwd; Arg0 = long unsigned int; Arg1 = int; boost::unit_test::const_string = boost::unit_test::basic_cstring<const char>; std::size_t = long unsigned int]'
test/rbf_tests.cpp:203:5:   required from here
/opt/homebrew//include/boost/test/tools/old/impl.hpp:107:17: warning: comparison of integer expressions of different signedness: 'const long unsigned int' and 'const int' [-Wsign-compare]
  107 |     return left == right;
      |            ~~~~~^~~~~~~~
  CXX      test/test_bitcoin-rest_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/rest_tests.cpp:8:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/rest_tests.cpp:8:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-result_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/result_tests.cpp:7:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/result_tests.cpp:7:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-reverselock_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/reverselock_tests.cpp:8:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/reverselock_tests.cpp:8:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-rpc_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/rpc_tests.cpp:18:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/rpc_tests.cpp:18:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-sanity_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/sanity_tests.cpp:9:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/sanity_tests.cpp:9:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-scheduler_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/scheduler_tests.cpp:9:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/scheduler_tests.cpp:9:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-script_p2sh_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/script_p2sh_tests.cpp:18:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/script_p2sh_tests.cpp:18:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-script_parse_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/script_parse_tests.cpp:10:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/script_parse_tests.cpp:10:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-script_segwit_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/script_segwit_tests.cpp:8:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/script_segwit_tests.cpp:8:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-script_standard_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/script_standard_tests.cpp:15:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/script_standard_tests.cpp:15:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-script_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/script_tests.cpp:32:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/script_tests.cpp:32:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-scriptnum_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/scriptnum_tests.cpp:9:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/scriptnum_tests.cpp:9:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-serfloat_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/serfloat_tests.cpp:11:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/serfloat_tests.cpp:11:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-serialize_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/serialize_tests.cpp:13:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/serialize_tests.cpp:13:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-settings_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/settings_tests.cpp:12:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/settings_tests.cpp:12:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-sighash_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/sighash_tests.cpp:20:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/sighash_tests.cpp:20:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-sigopcount_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/sigopcount_tests.cpp:16:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/sigopcount_tests.cpp:16:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-skiplist_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/skiplist_tests.cpp:10:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/skiplist_tests.cpp:10:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-sock_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/sock_tests.cpp:11:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/sock_tests.cpp:11:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-streams_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/streams_tests.cpp:9:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/streams_tests.cpp:9:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-sync_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/sync_tests.cpp:8:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/sync_tests.cpp:8:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-system_tests.o
In file included from /opt/homebrew//include/boost/system/detail/error_category_impl.hpp:15,
                 from /opt/homebrew//include/boost/system/error_category.hpp:11,
                 from /opt/homebrew//include/boost/filesystem/path_traits.hpp:14,
                 from /opt/homebrew//include/boost/filesystem/path.hpp:21,
                 from /opt/homebrew//include/boost/process/detail/traits/cmd_or_exe.hpp:14,
                 from /opt/homebrew//include/boost/process/detail/basic_cmd.hpp:13,
                 from /opt/homebrew//include/boost/process/args.hpp:33,
                 from /opt/homebrew//include/boost/process.hpp:22,
                 from test/system_tests.cpp:16:
/opt/homebrew//include/boost/system/detail/error_code.hpp:55:13: warning: redundant redeclaration of 'std::size_t boost::system::hash_value(const boost::system::error_code&)' in same scope [-Wredundant-decls]
   55 | std::size_t hash_value( error_code const & ec );
      |             ^~~~~~~~~~
In file included from /opt/homebrew//include/boost/system/error_category.hpp:10,
                 from /opt/homebrew//include/boost/filesystem/path_traits.hpp:14,
                 from /opt/homebrew//include/boost/filesystem/path.hpp:21,
                 from /opt/homebrew//include/boost/process/detail/traits/cmd_or_exe.hpp:14,
                 from /opt/homebrew//include/boost/process/detail/basic_cmd.hpp:13,
                 from /opt/homebrew//include/boost/process/args.hpp:33,
                 from /opt/homebrew//include/boost/process.hpp:22,
                 from test/system_tests.cpp:16:
/opt/homebrew//include/boost/system/detail/error_category.hpp:55:24: note: previous declaration of 'std::size_t boost::system::hash_value(const boost::system::error_code&)'
   55 |     friend std::size_t hash_value( error_code const & ec );
      |                        ^~~~~~~~~~
In file included from /opt/homebrew//include/boost/asio/error.hpp:358,
                 from /opt/homebrew//include/boost/asio/detail/impl/posix_tss_ptr.ipp:24,
                 from /opt/homebrew//include/boost/asio/detail/posix_tss_ptr.hpp:76,
                 from /opt/homebrew//include/boost/asio/detail/tss_ptr.hpp:27,
                 from /opt/homebrew//include/boost/asio/detail/call_stack.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/thread_context.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/recycling_allocator.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/handler_alloc_helpers.hpp:21,
                 from /opt/homebrew//include/boost/asio/detail/executor_function.hpp:19,
                 from /opt/homebrew//include/boost/asio/execution/any_executor.hpp:23,
                 from /opt/homebrew//include/boost/asio/execution.hpp:19,
                 from /opt/homebrew//include/boost/process/detail/posix/on_exit.hpp:9,
                 from /opt/homebrew//include/boost/process/detail/on_exit.hpp:12,
                 from /opt/homebrew//include/boost/process/async.hpp:33,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from test/system_tests.cpp:16:
/opt/homebrew//include/boost/asio/impl/error.ipp:35:15: warning: 'virtual const char* boost::asio::error::detail::netdb_category::name() const' can be marked override [-Wsuggest-override]
   35 |   const char* name() const BOOST_ASIO_ERROR_CATEGORY_NOEXCEPT
      |               ^~~~
/opt/homebrew//include/boost/asio/impl/error.ipp:40:15: warning: 'virtual std::string boost::asio::error::detail::netdb_category::message(int) const' can be marked override [-Wsuggest-override]
   40 |   std::string message(int value) const
      |               ^~~~~~~
In file included from /opt/homebrew//include/boost/system/error_category.hpp:11,
                 from /opt/homebrew//include/boost/filesystem/path_traits.hpp:14,
                 from /opt/homebrew//include/boost/filesystem/path.hpp:21,
                 from /opt/homebrew//include/boost/process/detail/traits/cmd_or_exe.hpp:14,
                 from /opt/homebrew//include/boost/process/detail/basic_cmd.hpp:13,
                 from /opt/homebrew//include/boost/process/args.hpp:33,
                 from /opt/homebrew//include/boost/process.hpp:22,
                 from test/system_tests.cpp:16:
/opt/homebrew//include/boost/system/detail/error_category_impl.hpp:44:21: warning: 'virtual const char* boost::system::error_category::message(int, char*, std::size_t) const' was hidden [-Woverloaded-virtual]
   44 | inline char const * error_category::message( int ev, char * buffer, std::size_t len ) const BOOST_NOEXCEPT
      |                     ^~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/asio/error.hpp:358,
                 from /opt/homebrew//include/boost/asio/detail/impl/posix_tss_ptr.ipp:24,
                 from /opt/homebrew//include/boost/asio/detail/posix_tss_ptr.hpp:76,
                 from /opt/homebrew//include/boost/asio/detail/tss_ptr.hpp:27,
                 from /opt/homebrew//include/boost/asio/detail/call_stack.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/thread_context.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/recycling_allocator.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/handler_alloc_helpers.hpp:21,
                 from /opt/homebrew//include/boost/asio/detail/executor_function.hpp:19,
                 from /opt/homebrew//include/boost/asio/execution/any_executor.hpp:23,
                 from /opt/homebrew//include/boost/asio/execution.hpp:19,
                 from /opt/homebrew//include/boost/process/detail/posix/on_exit.hpp:9,
                 from /opt/homebrew//include/boost/process/detail/on_exit.hpp:12,
                 from /opt/homebrew//include/boost/process/async.hpp:33,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from test/system_tests.cpp:16:
/opt/homebrew//include/boost/asio/impl/error.ipp:40:15: note:   by 'virtual std::string boost::asio::error::detail::netdb_category::message(int) const'
   40 |   std::string message(int value) const
      |               ^~~~~~~
/opt/homebrew//include/boost/asio/impl/error.ipp:67:15: warning: 'virtual const char* boost::asio::error::detail::addrinfo_category::name() const' can be marked override [-Wsuggest-override]
   67 |   const char* name() const BOOST_ASIO_ERROR_CATEGORY_NOEXCEPT
      |               ^~~~
/opt/homebrew//include/boost/asio/impl/error.ipp:72:15: warning: 'virtual std::string boost::asio::error::detail::addrinfo_category::message(int) const' can be marked override [-Wsuggest-override]
   72 |   std::string message(int value) const
      |               ^~~~~~~
In file included from /opt/homebrew//include/boost/system/error_category.hpp:11,
                 from /opt/homebrew//include/boost/filesystem/path_traits.hpp:14,
                 from /opt/homebrew//include/boost/filesystem/path.hpp:21,
                 from /opt/homebrew//include/boost/process/detail/traits/cmd_or_exe.hpp:14,
                 from /opt/homebrew//include/boost/process/detail/basic_cmd.hpp:13,
                 from /opt/homebrew//include/boost/process/args.hpp:33,
                 from /opt/homebrew//include/boost/process.hpp:22,
                 from test/system_tests.cpp:16:
/opt/homebrew//include/boost/system/detail/error_category_impl.hpp:44:21: warning: 'virtual const char* boost::system::error_category::message(int, char*, std::size_t) const' was hidden [-Woverloaded-virtual]
   44 | inline char const * error_category::message( int ev, char * buffer, std::size_t len ) const BOOST_NOEXCEPT
      |                     ^~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/asio/error.hpp:358,
                 from /opt/homebrew//include/boost/asio/detail/impl/posix_tss_ptr.ipp:24,
                 from /opt/homebrew//include/boost/asio/detail/posix_tss_ptr.hpp:76,
                 from /opt/homebrew//include/boost/asio/detail/tss_ptr.hpp:27,
                 from /opt/homebrew//include/boost/asio/detail/call_stack.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/thread_context.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/recycling_allocator.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/handler_alloc_helpers.hpp:21,
                 from /opt/homebrew//include/boost/asio/detail/executor_function.hpp:19,
                 from /opt/homebrew//include/boost/asio/execution/any_executor.hpp:23,
                 from /opt/homebrew//include/boost/asio/execution.hpp:19,
                 from /opt/homebrew//include/boost/process/detail/posix/on_exit.hpp:9,
                 from /opt/homebrew//include/boost/process/detail/on_exit.hpp:12,
                 from /opt/homebrew//include/boost/process/async.hpp:33,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from test/system_tests.cpp:16:
/opt/homebrew//include/boost/asio/impl/error.ipp:72:15: note:   by 'virtual std::string boost::asio::error::detail::addrinfo_category::message(int) const'
   72 |   std::string message(int value) const
      |               ^~~~~~~
/opt/homebrew//include/boost/asio/impl/error.ipp:97:15: warning: 'virtual const char* boost::asio::error::detail::misc_category::name() const' can be marked override [-Wsuggest-override]
   97 |   const char* name() const BOOST_ASIO_ERROR_CATEGORY_NOEXCEPT
      |               ^~~~
/opt/homebrew//include/boost/asio/impl/error.ipp:102:15: warning: 'virtual std::string boost::asio::error::detail::misc_category::message(int) const' can be marked override [-Wsuggest-override]
  102 |   std::string message(int value) const
      |               ^~~~~~~
In file included from /opt/homebrew//include/boost/system/error_category.hpp:11,
                 from /opt/homebrew//include/boost/filesystem/path_traits.hpp:14,
                 from /opt/homebrew//include/boost/filesystem/path.hpp:21,
                 from /opt/homebrew//include/boost/process/detail/traits/cmd_or_exe.hpp:14,
                 from /opt/homebrew//include/boost/process/detail/basic_cmd.hpp:13,
                 from /opt/homebrew//include/boost/process/args.hpp:33,
                 from /opt/homebrew//include/boost/process.hpp:22,
                 from test/system_tests.cpp:16:
/opt/homebrew//include/boost/system/detail/error_category_impl.hpp:44:21: warning: 'virtual const char* boost::system::error_category::message(int, char*, std::size_t) const' was hidden [-Woverloaded-virtual]
   44 | inline char const * error_category::message( int ev, char * buffer, std::size_t len ) const BOOST_NOEXCEPT
      |                     ^~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/asio/error.hpp:358,
                 from /opt/homebrew//include/boost/asio/detail/impl/posix_tss_ptr.ipp:24,
                 from /opt/homebrew//include/boost/asio/detail/posix_tss_ptr.hpp:76,
                 from /opt/homebrew//include/boost/asio/detail/tss_ptr.hpp:27,
                 from /opt/homebrew//include/boost/asio/detail/call_stack.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/thread_context.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/recycling_allocator.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/handler_alloc_helpers.hpp:21,
                 from /opt/homebrew//include/boost/asio/detail/executor_function.hpp:19,
                 from /opt/homebrew//include/boost/asio/execution/any_executor.hpp:23,
                 from /opt/homebrew//include/boost/asio/execution.hpp:19,
                 from /opt/homebrew//include/boost/process/detail/posix/on_exit.hpp:9,
                 from /opt/homebrew//include/boost/process/detail/on_exit.hpp:12,
                 from /opt/homebrew//include/boost/process/async.hpp:33,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from test/system_tests.cpp:16:
/opt/homebrew//include/boost/asio/impl/error.ipp:102:15: note:   by 'virtual std::string boost::asio::error::detail::misc_category::message(int) const'
  102 |   std::string message(int value) const
      |               ^~~~~~~
In file included from /opt/homebrew//include/boost/asio/detail/thread_info_base.hpp:27,
                 from /opt/homebrew//include/boost/asio/detail/recycling_allocator.hpp:21,
                 from /opt/homebrew//include/boost/asio/detail/handler_alloc_helpers.hpp:21,
                 from /opt/homebrew//include/boost/asio/detail/executor_function.hpp:19,
                 from /opt/homebrew//include/boost/asio/execution/any_executor.hpp:23,
                 from /opt/homebrew//include/boost/asio/execution.hpp:19,
                 from /opt/homebrew//include/boost/process/detail/posix/on_exit.hpp:9,
                 from /opt/homebrew//include/boost/process/detail/on_exit.hpp:12,
                 from /opt/homebrew//include/boost/process/async.hpp:33,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from test/system_tests.cpp:16:
/opt/homebrew//include/boost/asio/multiple_exceptions.hpp:38:39: warning: 'virtual const char* boost::asio::multiple_exceptions::what() const' can be marked override [-Wsuggest-override]
   38 |   BOOST_ASIO_DECL virtual const char* what() const
      |                                       ^~~~
In file included from /opt/homebrew//include/boost/asio/execution/any_executor.hpp:30,
                 from /opt/homebrew//include/boost/asio/execution.hpp:19,
                 from /opt/homebrew//include/boost/process/detail/posix/on_exit.hpp:9,
                 from /opt/homebrew//include/boost/process/detail/on_exit.hpp:12,
                 from /opt/homebrew//include/boost/process/async.hpp:33,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from test/system_tests.cpp:16:
/opt/homebrew//include/boost/asio/execution/bad_executor.hpp:35:39: warning: virtual const char* boost::asio::execution::bad_executor::what() const' can be marked override [-Wsuggest-override]
   35 |   BOOST_ASIO_DECL virtual const char* what() const
      |                                       ^~~~
In file included from /opt/homebrew//include/boost/asio/io_context.hpp:44,
                 from /opt/homebrew//include/boost/process/async.hpp:35,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from test/system_tests.cpp:16:
/opt/homebrew//include/boost/asio/detail/scheduler.hpp:60:24: warning: 'virtual void boost::asio::detail::scheduler::shutdown()' can be marked override [-Wsuggest-override]
   60 |   BOOST_ASIO_DECL void shutdown();
      |                        ^~~~~~~~
In file included from /opt/homebrew//include/boost/asio/detail/reactor.hpp:27,
                 from /opt/homebrew//include/boost/asio/detail/impl/scheduler.ipp:30,
                 from /opt/homebrew//include/boost/asio/detail/scheduler.hpp:240,
                 from /opt/homebrew//include/boost/asio/io_context.hpp:44,
                 from /opt/homebrew//include/boost/process/async.hpp:35,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from test/system_tests.cpp:16:
/opt/homebrew//include/boost/asio/detail/kqueue_reactor.hpp:94:24: warning: 'virtual void boost::asio::detail::kqueue_reactor::shutdown()' can be marked override [-Wsuggest-override]
   94 |   BOOST_ASIO_DECL void shutdown();
      |                        ^~~~~~~~
/opt/homebrew//include/boost/asio/detail/kqueue_reactor.hpp:97:24: warning: 'virtual void boost::asio::detail::kqueue_reactor::notify_fork(boost::asio::execution_context::fork_event)' can be marked override [-Wsuggest-override]
   97 |   BOOST_ASIO_DECL void notify_fork(
      |                        ^~~~~~~~~~~
/opt/homebrew//include/boost/asio/detail/kqueue_reactor.hpp:193:24: warning: virtual void boost::asio::detail::kqueue_reactor::run(long int, boost::asio::detail::op_queue<boost::asio::detail::scheduler_operation>&)' can be marked override [-Wsuggest-override]
  193 |   BOOST_ASIO_DECL void run(long usec, op_queue<operation>& ops);
      |                        ^~~
/opt/homebrew//include/boost/asio/detail/kqueue_reactor.hpp:196:24: warning: virtual void boost::asio::detail::kqueue_reactor::interrupt()' can be marked override [-Wsuggest-override]
  196 |   BOOST_ASIO_DECL void interrupt();
      |                        ^~~~~~~~~
In file included from /opt/homebrew//include/boost/process/async.hpp:35,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from test/system_tests.cpp:16:
/opt/homebrew//include/boost/asio/io_context.hpp:1197:32: warning: 'virtual void boost::asio::io_context::service::shutdown()' can be marked override [-Wsuggest-override]
 1197 |   BOOST_ASIO_DECL virtual void shutdown();
      |                                ^~~~~~~~
/opt/homebrew//include/boost/asio/io_context.hpp:1211:32: warning: 'virtual void boost::asio::io_context::service::notify_fork(boost::asio::execution_context::fork_event)' can be marked override [-Wsuggest-override]
 1211 |   BOOST_ASIO_DECL virtual void notify_fork(
      |                                ^~~~~~~~~~~
In file included from /opt/homebrew//include/boost/asio/basic_signal_set.hpp:25,
                 from /opt/homebrew//include/boost/asio/signal_set.hpp:19,
                 from /opt/homebrew//include/boost/process/detail/posix/sigchld_service.hpp:12,
                 from /opt/homebrew//include/boost/process/detail/posix/io_context_ref.hpp:20,
                 from /opt/homebrew//include/boost/process/async.hpp:42,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from test/system_tests.cpp:16:
/opt/homebrew//include/boost/asio/detail/signal_set_service.hpp:131:24: warning: 'virtual void boost::asio::detail::signal_set_service::shutdown()' can be marked override [-Wsuggest-override]
  131 |   BOOST_ASIO_DECL void shutdown();
      |                        ^~~~~~~~
/opt/homebrew//include/boost/asio/detail/signal_set_service.hpp:134:24: warning: 'virtual void boost::asio::detail::signal_set_service::notify_fork(boost::asio::execution_context::fork_event)' can be marked override [-Wsuggest-override]
  134 |   BOOST_ASIO_DECL void notify_fork(
      |                        ^~~~~~~~~~~
In file included from /opt/homebrew//include/boost/asio/strand.hpp:19,
                 from /opt/homebrew//include/boost/process/detail/posix/sigchld_service.hpp:13,
                 from /opt/homebrew//include/boost/process/detail/posix/io_context_ref.hpp:20,
                 from /opt/homebrew//include/boost/process/async.hpp:42,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from test/system_tests.cpp:16:
/opt/homebrew//include/boost/asio/detail/strand_executor_service.hpp:86:24: warning: 'virtual void boost::asio::detail::strand_executor_service::shutdown()' can be marked override [-Wsuggest-override]
   86 |   BOOST_ASIO_DECL void shutdown();
      |                        ^~~~~~~~
In file included from /opt/homebrew//include/boost/asio/io_context_strand.hpp:25,
                 from /opt/homebrew//include/boost/asio/strand.hpp:578,
                 from /opt/homebrew//include/boost/process/detail/posix/sigchld_service.hpp:13,
                 from /opt/homebrew//include/boost/process/detail/posix/io_context_ref.hpp:20,
                 from /opt/homebrew//include/boost/process/async.hpp:42,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from test/system_tests.cpp:16:
/opt/homebrew//include/boost/asio/detail/strand_service.hpp:82:24: warning: 'virtual void boost::asio::detail::strand_service::shutdown()' can be marked override [-Wsuggest-override]
   82 |   BOOST_ASIO_DECL void shutdown();
      |                        ^~~~~~~~
In file included from /opt/homebrew//include/boost/asio/posix/basic_descriptor.hpp:36,
                 from /opt/homebrew//include/boost/asio/posix/basic_stream_descriptor.hpp:19,
                 from /opt/homebrew//include/boost/asio/posix/stream_descriptor.hpp:23,
                 from /opt/homebrew//include/boost/process/detail/posix/async_pipe.hpp:11,
                 from /opt/homebrew//include/boost/process/async_pipe.hpp:18,
                 from /opt/homebrew//include/boost/process/detail/posix/async_in.hpp:16,
                 from /opt/homebrew//include/boost/process/async.hpp:43,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from test/system_tests.cpp:16:
/opt/homebrew//include/boost/asio/detail/reactive_descriptor_service.hpp:85:24: warning: 'virtual void boost::asio::detail::reactive_descriptor_service::shutdown()' can be marked override [-Wsuggest-override]
   85 |   BOOST_ASIO_DECL void shutdown();
      |                        ^~~~~~~~
In file included from /opt/homebrew//include/boost/asio/streambuf.hpp:22,
                 from /opt/homebrew//include/boost/process/async.hpp:36,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from test/system_tests.cpp:16:
/opt/homebrew//include/boost/asio/basic_streambuf.hpp: In instantiation of 'class boost::asio::basic_streambuf<>':
/opt/homebrew//include/boost/process/detail/posix/async_out.hpp:136:42:   required from here
/opt/homebrew//include/boost/asio/basic_streambuf.hpp:264:12: warning: 'std::basic_streambuf<char>::int_type boost::asio::basic_streambuf<Allocator>::underflow() [with Allocator = std::allocator<char>; std::basic_streambuf<char>::int_type = int]' can be marked override [-Wsuggest-override]
  264 |   int_type underflow()
      |            ^~~~~~~~~
/opt/homebrew//include/boost/asio/basic_streambuf.hpp:284:12: warning: 'std::basic_streambuf<char>::int_type boost::asio::basic_streambuf<Allocator>::overflow(std::basic_streambuf<char>::int_type) [with Allocator = std::allocator<char>; std::basic_streambuf<char>::int_type = int]' can be marked override [-Wsuggest-override]
  284 |   int_type overflow(int_type c)
      |            ^~~~~~~~
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/system_tests.cpp:22:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/system_tests.cpp:22:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/asio/detail/thread.hpp:23,
                 from /opt/homebrew//include/boost/asio/detail/scheduler.hpp:28,
                 from /opt/homebrew//include/boost/asio/io_context.hpp:44,
                 from /opt/homebrew//include/boost/process/async.hpp:35,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from test/system_tests.cpp:16:
/opt/homebrew//include/boost/asio/detail/posix_thread.hpp: In instantiation of 'class boost::asio::detail::posix_thread::func<boost::asio::detail::scheduler::thread_function>':
/opt/homebrew//include/boost/asio/detail/posix_thread.hpp:46:18:   required from 'boost::asio::detail::posix_thread::posix_thread(Function, unsigned int) [with Function = boost::asio::detail::scheduler::thread_function]'
/opt/homebrew//include/boost/asio/detail/impl/scheduler.ipp:137:68:   required from here
/opt/homebrew//include/boost/asio/detail/posix_thread.hpp:84:18: warning: 'void boost::asio::detail::posix_thread::func<Function>::run() [with Function = boost::asio::detail::scheduler::thread_function]' can be marked override [-Wsuggest-override]
   84 |     virtual void run()
      |                  ^~~
/opt/homebrew//include/boost/asio/detail/posix_thread.hpp: In instantiation of 'class boost::asio::detail::posix_thread::func<boost::asio::system_context::thread_function>':
/opt/homebrew//include/boost/asio/detail/posix_thread.hpp:46:18:   required from 'boost::asio::detail::posix_thread::posix_thread(Function, unsigned int) [with Function = boost::asio::system_context::thread_function]'
/opt/homebrew//include/boost/asio/detail/thread_group.hpp:82:9:   required from 'boost::asio::detail::thread_group::item::item(Function, boost::asio::detail::thread_group::item*) [with Function = boost::asio::system_context::thread_function]'
/opt/homebrew//include/boost/asio/detail/thread_group.hpp:47:14:   required from 'void boost::asio::detail::thread_group::create_thread(Function) [with Function = boost::asio::system_context::thread_function]'
/opt/homebrew//include/boost/asio/detail/thread_group.hpp:55:20:   required from 'void boost::asio::detail::thread_group::create_threads(Function, std::size_t) [with Function = boost::asio::system_context::thread_function; std::size_t = long unsigned int]'
/opt/homebrew//include/boost/asio/impl/system_context.ipp:56:26:   required from here
/opt/homebrew//include/boost/asio/detail/posix_thread.hpp:84:18: warning: 'void boost::asio::detail::posix_thread::func<Function>::run() [with Function = boost::asio::system_context::thread_function]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/asio/associated_cancellation_slot.hpp:20,
                 from /opt/homebrew//include/boost/asio/detail/signal_set_service.hpp:22,
                 from /opt/homebrew//include/boost/asio/basic_signal_set.hpp:25,
                 from /opt/homebrew//include/boost/asio/signal_set.hpp:19,
                 from /opt/homebrew//include/boost/process/detail/posix/sigchld_service.hpp:12,
                 from /opt/homebrew//include/boost/process/detail/posix/io_context_ref.hpp:20,
                 from /opt/homebrew//include/boost/process/async.hpp:42,
                 from /opt/homebrew//include/boost/process.hpp:23,
                 from test/system_tests.cpp:16:
/opt/homebrew//include/boost/asio/cancellation_signal.hpp: In instantiation of 'class boost::asio::detail::cancellation_handler<boost::asio::detail::signal_set_service::signal_op_cancellation>':
/opt/homebrew//include/boost/asio/cancellation_signal.hpp:171:9:   required from 'CancellationHandler& boost::asio::cancellation_slot::emplace(Args&& ...) [with CancellationHandler = boost::asio::detail::signal_set_service::signal_op_cancellation; Args = {boost::asio::detail::signal_set_service*, boost::asio::detail::signal_set_service::implementation_type*}]'
/opt/homebrew//include/boost/asio/detail/signal_set_service.hpp:181:55:   required from 'void boost::asio::detail::signal_set_service::async_wait(boost::asio::detail::signal_set_service::implementation_type&, Handler&, const IoExecutor&) [with Handler = boost::process::detail::posix::sigchld_service::_handle_signal(const boost::system::error_code&)::<lambda(const boost::system::error_code&, int)>; IoExecutor = boost::asio::any_io_executor]'
/opt/homebrew//include/boost/asio/basic_signal_set.hpp:577:44:   required from 'void boost::asio::basic_signal_set<Executor>::initiate_async_wait::operator()(SignalHandler&&) const [with SignalHandler = boost::process::detail::posix::sigchld_service::_handle_signal(const boost::system::error_code&)::<lambda(const boost::system::error_code&, int)>; Executor = boost::asio::any_io_executor'
/opt/homebrew//include/boost/asio/async_result.hpp:482:49:   required from 'static boost::asio::detail::completion_handler_async_result<CompletionToken, Signatures>::return_type boost::asio::detail::completion_handler_async_result<CompletionToken, Signatures>::initiate(Initiation&&, RawCompletionToken&&, Args&& ...) [with Initiation = boost::asio::basic_signal_set<>::initiate_async_wait; RawCompletionToken = boost::process::detail::posix::sigchld_service::_handle_signal(const boost::system::error_code&)::<lambda(const boost::system::error_code&, int)>; Args = {}; CompletionToken = boost::process::detail::posix::sigchld_service::_handle_signal(const boost::system::error_code&)::<lambda(const boost::system::error_code&, int)>; Signatures = {void(boost::system::error_code, int)}; boost::asio::detail::completion_handler_async_result<CompletionToken, Signatures>::return_type = void]'
/opt/homebrew//include/boost/asio/async_result.hpp:862:29:   required from 'typename boost::asio::constraint<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signatures>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signatures ...>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&&>)()...))>::type boost::asio::async_initiate(Initiation&&, CompletionToken&, Args&& ...) [with CompletionToken = boost::process::detail::posix::sigchld_service::_handle_signal(const boost::system::error_code&)::<lambda(const boost::system::error_code&, int)>; Signatures = {void(boost::system::error_code, int)}; Initiation = boost::asio::basic_signal_set<>::initiate_async_wait; Args = {}; typename boost::asio::constraint<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signatures>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signatures ...>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&&>)()...))>::type = void; decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signatures ...>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&&>)()...)) = void; typename std::decay<_Tp>::type = std::decay<boost::process::detail::posix::sigchld_service::_handle_signal(const boost::system::error_code&)::<lambda(const boost::system::error_code&, int)> >::type]'
/opt/homebrew//include/boost/asio/basic_signal_set.hpp:545:78:   required from 'auto boost::asio::basic_signal_set<Executor>::async_wait(SignalToken&&) [with SignalToken = boost::process::detail::posix::sigchld_service::_handle_signal(const boost::system::error_code&)::<lambda(const boost::system::error_code&, int)>; Executor = boost::asio::any_io_executor]'
/opt/homebrew//include/boost/process/detail/posix/sigchld_service.hpp:131:31:   required from here
/opt/homebrew//include/boost/asio/cancellation_signal.hpp:74:8: warning: 'void boost::asio::detail::cancellation_handler<Handler>::call(boost::asio::cancellation_type_t) [with Handler = boost::asio::detail::signal_set_service::signal_op_cancellation; boost::asio::cancellation_type_t = boost::asio::cancellation_type]' can be marked override [-Wsuggest-override]
   74 |   void call(cancellation_type_t type)
      |        ^~~~
/opt/homebrew//include/boost/asio/cancellation_signal.hpp:79:33: warning: 'std::pair<void*, long unsigned int> boost::asio::detail::cancellation_handler<Handler>::destroy() [with Handler = boost::asio::detail::signal_set_service::signal_op_cancellation]' can be marked override [-Wsuggest-override]
   79 |   std::pair<void*, std::size_t> destroy() BOOST_ASIO_NOEXCEPT
      |                                 ^~~~~~~
  CXX      test/test_bitcoin-timedata_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/timedata_tests.cpp:17:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/timedata_tests.cpp:17:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-torcontrol_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/torcontrol_tests.cpp:6:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/torcontrol_tests.cpp:6:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-transaction_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/transaction_tests.cpp:34:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/transaction_tests.cpp:34:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-txindex_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/txindex_tests.cpp:13:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/txindex_tests.cpp:13:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-txpackage_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/txpackage_tests.cpp:15:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/txpackage_tests.cpp:15:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-txrequest_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/txrequest_tests.cpp:15:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/txrequest_tests.cpp:15:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-txvalidation_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/txvalidation_tests.cpp:15:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/txvalidation_tests.cpp:15:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-txvalidationcache_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/txvalidationcache_tests.cpp:14:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/txvalidationcache_tests.cpp:14:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-uint256_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/uint256_tests.cpp:11:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/uint256_tests.cpp:11:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-util_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/util_tests.cpp:44:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/util_tests.cpp:44:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/test_tools.hpp:53,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/util_tests.cpp:44:
/opt/homebrew//include/boost/test/tools/assertion.hpp: In instantiation of 'static boost::test_tools::assertion::op::EQ<Lhs, Rhs, Enabler>::result_type boost::test_tools::assertion::op::EQ<Lhs, Rhs, Enabler>::eval(const Lhs&, const Rhs&) [with Lhs = long unsigned int; Rhs = int; Enabler = void; boost::test_tools::assertion::op::EQ<Lhs, Rhs, Enabler>::result_type = bool]':
/opt/homebrew//include/boost/test/tools/assertion.hpp:365:24:   required from 'boost::test_tools::assertion::binary_expr<Lhs, Rhs, OP>::result_type boost::test_tools::assertion::binary_expr<Lhs, Rhs, OP>::value() const [with LExpr = boost::test_tools::assertion::value_expr<long unsigned int>; Rhs = int; OP = boost::test_tools::assertion::op::EQ<long unsigned int, int, void>; boost::test_tools::assertion::binary_expr<Lhs, Rhs, OP>::result_type = bool]'
/opt/homebrew//include/boost/test/tools/assertion.hpp:374:42:   required from 'boost::test_tools::assertion_result boost::test_tools::assertion::binary_expr<Lhs, Rhs, OP>::evaluate(bool) const [with LExpr = boost::test_tools::assertion::value_expr<long unsigned int>; Rhs = int; OP = boost::test_tools::assertion::op::EQ<long unsigned int, int, void>]'
test/util_tests.cpp:217:9:   required from here
/opt/homebrew//include/boost/test/tools/assertion.hpp:72:13: warning: comparison of integer expressions of different signedness: 'const long unsigned int' and 'const int' [-Wsign-compare]
   72 |     action( ==, EQ, !=, NE )                \
      |             ^
/opt/homebrew//include/boost/test/tools/assertion.hpp:153:20: note: in definition of macro 'DEFINE_CONST_OPER'
  153 |         return lhs oper rhs;                        \
      |                    ^~~~
/opt/homebrew//include/boost/test/tools/assertion.hpp:93:5: note: in expansion of macro 'BOOST_TEST_FOR_EACH_COMP_OP'
   93 |     BOOST_TEST_FOR_EACH_COMP_OP(action)     \
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~
/opt/homebrew//include/boost/test/tools/assertion.hpp:174:1: note: in expansion of macro 'BOOST_TEST_FOR_EACH_CONST_OP'
  174 | BOOST_TEST_FOR_EACH_CONST_OP( DEFINE_CONST_OPER )
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/util_tests.cpp:44:
/opt/homebrew//include/boost/test/tools/old/impl.hpp: In instantiation of 'boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl(const Left&, const Right&) [with Left = long unsigned int; Right = int]':
/opt/homebrew//include/boost/test/tools/old/impl.hpp:130:26:   required from boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl_frwd::call_impl(const Left&, const Right&, mpl_::false_) const [with Left = long unsigned int; Right = int; mpl_::false_ = mpl_::bool_<false>]'
/opt/homebrew//include/boost/test/tools/old/impl.hpp:145:25:   required from boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl_frwd::operator()(const Left&, const Right&) const [with Left = long unsigned int; Right = int]'
/opt/homebrew//include/boost/test/tools/old/impl.hpp:92:1:   required from 'bool boost::test_tools::tt_detail::check_frwd(Pred, const boost::unit_test::lazy_ostream&, boost::unit_test::const_string, std::size_t, boost::test_tools::tt_detail::tool_level, boost::test_tools::tt_detail::check_type, const Arg0&, const char*, const Arg1&, const char*) [with Pred = boost::test_tools::tt_detail::equal_impl_frwd; Arg0 = long unsigned int; Arg1 = int; boost::unit_test::const_string = boost::unit_test::basic_cstring<const char>; std::size_t = long unsigned int]'
test/util_tests.cpp:176:5:   required from here
/opt/homebrew//include/boost/test/tools/old/impl.hpp:107:17: warning: comparison of integer expressions of different signedness: 'const long unsigned int' and 'const int' [-Wsign-compare]
  107 |     return left == right;
      |            ~~~~~^~~~~~~~
/opt/homebrew//include/boost/test/tools/old/impl.hpp: In instantiation of 'boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl(const Left&, const Right&) [with Left = long long unsigned int; Right = int]':
/opt/homebrew//include/boost/test/tools/old/impl.hpp:130:26:   required from boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl_frwd::call_impl(const Left&, const Right&, mpl_::false_) const [with Left = long long unsigned int; Right = int; mpl_::false_ = mpl_::bool_<false>]'
/opt/homebrew//include/boost/test/tools/old/impl.hpp:145:25:   required from boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl_frwd::operator()(const Left&, const Right&) const [with Left = long long unsigned int; Right = int]'
/opt/homebrew//include/boost/test/tools/old/impl.hpp:92:1:   required from 'bool boost::test_tools::tt_detail::check_frwd(Pred, const boost::unit_test::lazy_ostream&, boost::unit_test::const_string, std::size_t, boost::test_tools::tt_detail::tool_level, boost::test_tools::tt_detail::check_type, const Arg0&, const char*, const Arg1&, const char*) [with Pred = boost::test_tools::tt_detail::equal_impl_frwd; Arg0 = long long unsigned int; Arg1 = int; boost::unit_test::const_string = boost::unit_test::basic_cstring<const char>; std::size_t = long unsigned int]'
test/util_tests.cpp:2680:5:   required from here
/opt/homebrew//include/boost/test/tools/old/impl.hpp:107:17: warning: comparison of integer expressions of different signedness: 'const long long unsigned int' and 'const int' [-Wsign-compare]
/opt/homebrew//include/boost/test/tools/old/impl.hpp: In instantiation of 'boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl(const Left&, const Right&) [with Left = int; Right = unsigned int]':
/opt/homebrew//include/boost/test/tools/old/impl.hpp:130:26:   required from boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl_frwd::call_impl(const Left&, const Right&, mpl_::false_) const [with Left = int; Right = unsigned int; mpl_::false_ = mpl_::bool_<false>]'
/opt/homebrew//include/boost/test/tools/old/impl.hpp:145:25:   required from boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl_frwd::operator()(const Left&, const Right&) const [with Left = int; Right = unsigned int]'
/opt/homebrew//include/boost/test/tools/old/impl.hpp:92:1:   required from 'bool boost::test_tools::tt_detail::check_frwd(Pred, const boost::unit_test::lazy_ostream&, boost::unit_test::const_string, std::size_t, boost::test_tools::tt_detail::tool_level, boost::test_tools::tt_detail::check_type, const Arg0&, const char*, const Arg1&, const char*) [with Pred = boost::test_tools::tt_detail::equal_impl_frwd; Arg0 = int; Arg1 = unsigned int; boost::unit_test::const_string = boost::unit_test::basic_cstring<const char>; std::size_t = long unsigned int]'
test/util_tests.cpp:1546:5:   required from 'void util_tests::TestAddMatrixOverflow() [with T = unsigned int]'
test/util_tests.cpp:1580:36:   required from here
/opt/homebrew//include/boost/test/tools/old/impl.hpp:107:17: warning: comparison of integer expressions of different signedness: 'const int' and 'const unsigned int' [-Wsign-compare]
  CXX      test/test_bitcoin-util_threadnames_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/util_threadnames_tests.cpp:18:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/util_threadnames_tests.cpp:18:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-validation_block_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/validation_block_tests.cpp:5:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/validation_block_tests.cpp:5:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-validation_chainstate_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from ./test/util/chainstate.h:17,
                 from test/validation_chainstate_tests.cpp:10:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from ./test/util/chainstate.h:17,
                 from test/validation_chainstate_tests.cpp:10:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from ./test/util/chainstate.h:17,
                 from test/validation_chainstate_tests.cpp:10:
/opt/homebrew//include/boost/test/tools/old/impl.hpp: In instantiation of 'boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl(const Left&, const Right&) [with Left = long unsigned int; Right = int]':
/opt/homebrew//include/boost/test/tools/old/impl.hpp:130:26:   required from boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl_frwd::call_impl(const Left&, const Right&, mpl_::false_) const [with Left = long unsigned int; Right = int; mpl_::false_ = mpl_::bool_<false>]'
/opt/homebrew//include/boost/test/tools/old/impl.hpp:145:25:   required from boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl_frwd::operator()(const Left&, const Right&) const [with Left = long unsigned int; Right = int]'
/opt/homebrew//include/boost/test/tools/old/impl.hpp:92:1:   required from 'bool boost::test_tools::tt_detail::check_frwd(Pred, const boost::unit_test::lazy_ostream&, boost::unit_test::const_string, std::size_t, boost::test_tools::tt_detail::tool_level, boost::test_tools::tt_detail::check_type, const Arg0&, const char*, const Arg1&, const char*) [with Pred = boost::test_tools::tt_detail::equal_impl_frwd; Arg0 = long unsigned int; Arg1 = int; boost::unit_test::const_string = boost::unit_test::basic_cstring<const char>; std::size_t = long unsigned int]'
test/validation_chainstate_tests.cpp:114:5:   required from here
/opt/homebrew//include/boost/test/tools/old/impl.hpp:107:17: warning: comparison of integer expressions of different signedness: 'const long unsigned int' and 'const int' [-Wsign-compare]
  107 |     return left == right;
      |            ~~~~~^~~~~~~~
  CXX      test/test_bitcoin-validation_chainstatemanager_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from ./test/util/chainstate.h:17,
                 from test/validation_chainstatemanager_tests.cpp:11:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from ./test/util/chainstate.h:17,
                 from test/validation_chainstatemanager_tests.cpp:11:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from ./test/util/chainstate.h:17,
                 from test/validation_chainstatemanager_tests.cpp:11:
/opt/homebrew//include/boost/test/tools/old/impl.hpp: In instantiation of 'boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl(const Left&, const Right&) [with Left = long unsigned int; Right = int]':
/opt/homebrew//include/boost/test/tools/old/impl.hpp:130:26:   required from boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl_frwd::call_impl(const Left&, const Right&, mpl_::false_) const [with Left = long unsigned int; Right = int; mpl_::false_ = mpl_::bool_<false>]'
/opt/homebrew//include/boost/test/tools/old/impl.hpp:145:25:   required from boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl_frwd::operator()(const Left&, const Right&) const [with Left = long unsigned int; Right = int]'
/opt/homebrew//include/boost/test/tools/old/impl.hpp:92:1:   required from 'bool boost::test_tools::tt_detail::check_frwd(Pred, const boost::unit_test::lazy_ostream&, boost::unit_test::const_string, std::size_t, boost::test_tools::tt_detail::tool_level, boost::test_tools::tt_detail::check_type, const Arg0&, const char*, const Arg1&, const char*) [with Pred = boost::test_tools::tt_detail::equal_impl_frwd; Arg0 = long unsigned int; Arg1 = int; boost::unit_test::const_string = boost::unit_test::basic_cstring<const char>; std::size_t = long unsigned int]'
test/validation_chainstatemanager_tests.cpp:353:5:   required from here
/opt/homebrew//include/boost/test/tools/old/impl.hpp:107:17: warning: comparison of integer expressions of different signedness: 'const long unsigned int' and 'const int' [-Wsign-compare]
  107 |     return left == right;
      |            ~~~~~^~~~~~~~
  CXX      test/test_bitcoin-validation_flush_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/validation_flush_tests.cpp:10:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/validation_flush_tests.cpp:10:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-validation_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/validation_tests.cpp:14:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/validation_tests.cpp:14:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-validationinterface_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/validationinterface_tests.cpp:5:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/validationinterface_tests.cpp:5:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      test/test_bitcoin-versionbits_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/versionbits_tests.cpp:11:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from test/versionbits_tests.cpp:11:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      wallet/test/test_test_bitcoin-psbt_wallet_tests.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/test/psbt_wallet_tests.cpp:8:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/test/psbt_wallet_tests.cpp:8:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from wallet/test/psbt_wallet_tests.cpp:10:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from wallet/test/psbt_wallet_tests.cpp:10:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/test/psbt_wallet_tests.cpp:8:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/test/test_test_bitcoin-spend_tests.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/spend.h:13,
                 from wallet/test/spend_tests.cpp:9:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/spend.h:13,
                 from wallet/test/spend_tests.cpp:9:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from wallet/test/spend_tests.cpp:13:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from wallet/test/spend_tests.cpp:13:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/spend.h:13,
                 from wallet/test/spend_tests.cpp:9:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from wallet/test/spend_tests.cpp:13:
/opt/homebrew//include/boost/test/tools/old/impl.hpp: In instantiation of 'boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl(const Left&, const Right&) [with Left = long unsigned int; Right = int]':
/opt/homebrew//include/boost/test/tools/old/impl.hpp:130:26:   required from boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl_frwd::call_impl(const Left&, const Right&, mpl_::false_) const [with Left = long unsigned int; Right = int; mpl_::false_ = mpl_::bool_<false>]'
/opt/homebrew//include/boost/test/tools/old/impl.hpp:145:25:   required from boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl_frwd::operator()(const Left&, const Right&) const [with Left = long unsigned int; Right = int]'
/opt/homebrew//include/boost/test/tools/old/impl.hpp:92:1:   required from 'bool boost::test_tools::tt_detail::check_frwd(Pred, const boost::unit_test::lazy_ostream&, boost::unit_test::const_string, std::size_t, boost::test_tools::tt_detail::tool_level, boost::test_tools::tt_detail::check_type, const Arg0&, const char*, const Arg1&, const char*) [with Pred = boost::test_tools::tt_detail::equal_impl_frwd; Arg0 = long unsigned int; Arg1 = int; boost::unit_test::const_string = boost::unit_test::basic_cstring<const char>; std::size_t = long unsigned int]'
wallet/test/spend_tests.cpp:39:9:   required from here
/opt/homebrew//include/boost/test/tools/old/impl.hpp:107:17: warning: comparison of integer expressions of different signedness: 'const long unsigned int' and 'const int' [-Wsign-compare]
  107 |     return left == right;
      |            ~~~~~^~~~~~~~
/opt/homebrew//include/boost/test/tools/old/impl.hpp: In instantiation of 'boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl(const Left&, const Right&) [with Left = long unsigned int; Right = long long int]':
/opt/homebrew//include/boost/test/tools/old/impl.hpp:130:26:   required from boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl_frwd::call_impl(const Left&, const Right&, mpl_::false_) const [with Left = long unsigned int; Right = long long int; mpl_::false_ = mpl_::bool_<false>]'
/opt/homebrew//include/boost/test/tools/old/impl.hpp:145:25:   required from boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl_frwd::operator()(const Left&, const Right&) const [with Left = long unsigned int; Right = long long int]'
/opt/homebrew//include/boost/test/tools/old/impl.hpp:92:1:   required from 'bool boost::test_tools::tt_detail::check_frwd(Pred, const boost::unit_test::lazy_ostream&, boost::unit_test::const_string, std::size_t, boost::test_tools::tt_detail::tool_level, boost::test_tools::tt_detail::check_type, const Arg0&, const char*, const Arg1&, const char*) [with Pred = boost::test_tools::tt_detail::equal_impl_frwd; Arg0 = long unsigned int; Arg1 = long long int; boost::unit_test::const_string = boost::unit_test::basic_cstring<const char>; std::size_t = long unsigned int]'
wallet/test/spend_tests.cpp:74:9:   required from here
/opt/homebrew//include/boost/test/tools/old/impl.hpp:107:17: warning: comparison of integer expressions of different signedness: 'const long unsigned int' and 'const long long int' [-Wsign-compare]
  CXX      wallet/test/test_test_bitcoin-wallet_tests.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/test/wallet_tests.cpp:5:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/test/wallet_tests.cpp:5:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from wallet/test/wallet_tests.cpp:28:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from wallet/test/wallet_tests.cpp:28:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/test/wallet_tests.cpp:5:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/test/test_test_bitcoin-walletdb_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from wallet/test/walletdb_tests.cpp:10:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from wallet/test/walletdb_tests.cpp:10:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      wallet/test/test_test_bitcoin-wallet_crypto_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from wallet/test/wallet_crypto_tests.cpp:11:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from wallet/test/wallet_crypto_tests.cpp:11:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      wallet/test/test_test_bitcoin-wallet_transaction_tests.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/test/wallet_test_fixture.h:14,
                 from wallet/test/wallet_transaction_tests.cpp:7:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/test/wallet_test_fixture.h:14,
                 from wallet/test/wallet_transaction_tests.cpp:7:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from wallet/test/wallet_transaction_tests.cpp:9:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from wallet/test/wallet_transaction_tests.cpp:9:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/test/wallet_test_fixture.h:14,
                 from wallet/test/wallet_transaction_tests.cpp:7:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/test/test_test_bitcoin-coinselector_tests.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/spend.h:13,
                 from wallet/test/coinselector_tests.cpp:13:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/spend.h:13,
                 from wallet/test/coinselector_tests.cpp:13:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from wallet/test/coinselector_tests.cpp:18:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from wallet/test/coinselector_tests.cpp:18:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/spend.h:13,
                 from wallet/test/coinselector_tests.cpp:13:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/test/test_test_bitcoin-availablecoins_tests.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/spend.h:13,
                 from wallet/test/availablecoins_tests.cpp:7:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/spend.h:13,
                 from wallet/test/availablecoins_tests.cpp:7:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from wallet/test/availablecoins_tests.cpp:11:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from wallet/test/availablecoins_tests.cpp:11:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/spend.h:13,
                 from wallet/test/availablecoins_tests.cpp:7:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/test/test_test_bitcoin-init_tests.o
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from wallet/test/init_tests.cpp:5:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from wallet/test/init_tests.cpp:5:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
  CXX      wallet/test/test_test_bitcoin-ismine_tests.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/test/ismine_tests.cpp:11:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/test/ismine_tests.cpp:11:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from wallet/test/ismine_tests.cpp:13:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from wallet/test/ismine_tests.cpp:13:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from wallet/test/ismine_tests.cpp:11:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      wallet/test/test_test_bitcoin-scriptpubkeyman_tests.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from wallet/test/scriptpubkeyman_tests.cpp:8:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from wallet/test/scriptpubkeyman_tests.cpp:8:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/test/unit_test_log.hpp:18,
                 from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from wallet/test/scriptpubkeyman_tests.cpp:11:
/opt/homebrew//include/boost/test/tree/observer.hpp:74:21: warning: 'virtual void boost::unit_test::test_observer::test_unit_skipped(const boost::unit_test::test_unit&)' was hidden [-Woverloaded-virtual]
   74 |     virtual void    test_unit_skipped( test_unit const& ) {} ///< backward compatibility
      |                     ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/test/tools/old/impl.hpp:19,
                 from /opt/homebrew//include/boost/test/test_tools.hpp:46,
                 from /opt/homebrew//include/boost/test/unit_test.hpp:18,
                 from wallet/test/scriptpubkeyman_tests.cpp:11:
/opt/homebrew//include/boost/test/unit_test_log.hpp:120:17: note:   by 'virtual void boost::unit_test::unit_test_log_t::test_unit_skipped(const boost::unit_test::test_unit&, boost::unit_test::const_string)'
  120 |     void        test_unit_skipped( test_unit const&, const_string ) BOOST_OVERRIDE;
      |                 ^~~~~~~~~~~~~~~~~
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from wallet/test/scriptpubkeyman_tests.cpp:8:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      test/util/libtest_util_a-blockfilter.o
  CXX      test/util/libtest_util_a-logging.o
  CXX      test/util/libtest_util_a-mining.o
  CXX      test/util/libtest_util_a-net.o
  CXX      test/util/libtest_util_a-script.o
  CXX      test/util/libtest_util_a-setup_common.o
  CXX      test/util/libtest_util_a-str.o
  CXX      test/util/libtest_util_a-transaction_utils.o
  CXX      test/util/libtest_util_a-validation.o
  CXX      test/util/libtest_util_a-wallet.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from test/util/wallet.cpp:13:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from test/util/wallet.cpp:13:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from test/util/wallet.cpp:13:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  AR       libtest_util.a
  CXX      minisketch/src/fields/libminisketch_a-generic_1byte.o
  CXX      minisketch/src/fields/libminisketch_a-generic_2bytes.o
  CXX      minisketch/src/fields/libminisketch_a-generic_3bytes.o
  CXX      minisketch/src/fields/libminisketch_a-generic_4bytes.o
  CXX      minisketch/src/fields/libminisketch_a-generic_5bytes.o
  CXX      minisketch/src/fields/libminisketch_a-generic_6bytes.o
  CXX      minisketch/src/fields/libminisketch_a-generic_7bytes.o
  CXX      minisketch/src/fields/libminisketch_a-generic_8bytes.o
  CXX      minisketch/src/libminisketch_a-minisketch.o
  AR       minisketch/libminisketch.a
  CXXLD    test/test_bitcoin
  CXX      bench/bench_bitcoin-addrman.o
  CXX      bench/bench_bitcoin-base58.o
  CXX      bench/bench_bitcoin-bech32.o
  CXX      bench/bench_bitcoin-bench.o
  CXX      bench/bench_bitcoin-bench_bitcoin.o
  CXX      bench/bench_bitcoin-block_assemble.o
  CXX      bench/bench_bitcoin-ccoins_caching.o
  CXX      bench/bench_bitcoin-chacha20.o
  CXX      bench/bench_bitcoin-chacha_poly_aead.o
  CXX      bench/bench_bitcoin-checkblock.o
  CXX      bench/bench_bitcoin-checkqueue.o
  CXX      bench/bench_bitcoin-crypto_hash.o
Generated bench/data/block413567.raw.h
  CXX      bench/bench_bitcoin-data.o
  CXX      bench/bench_bitcoin-duplicate_inputs.o
  CXX      bench/bench_bitcoin-examples.o
  CXX      bench/bench_bitcoin-gcs_filter.o
  CXX      bench/bench_bitcoin-hashpadding.o
  CXX      bench/bench_bitcoin-lockedpool.o
  CXX      bench/bench_bitcoin-logging.o
  CXX      bench/bench_bitcoin-mempool_eviction.o
  CXX      bench/bench_bitcoin-mempool_stress.o
  CXX      bench/bench_bitcoin-merkle_root.o
  CXX      bench/bench_bitcoin-nanobench.o
  CXX      bench/bench_bitcoin-peer_eviction.o
  CXX      bench/bench_bitcoin-poly1305.o
  CXX      bench/bench_bitcoin-prevector.o
  CXX      bench/bench_bitcoin-rollingbloom.o
  CXX      bench/bench_bitcoin-rpc_blockchain.o
  CXX      bench/bench_bitcoin-rpc_mempool.o
  CXX      bench/bench_bitcoin-strencodings.o
  CXX      bench/bench_bitcoin-util_time.o
  CXX      bench/bench_bitcoin-verify_script.o
  CXX      bench/bench_bitcoin-coin_selection.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/spend.h:13,
                 from bench/coin_selection.cpp:9:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/spend.h:13,
                 from bench/coin_selection.cpp:9:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/spend.h:13,
                 from bench/coin_selection.cpp:9:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      bench/bench_bitcoin-wallet_balance.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from bench/wallet_balance.cpp:12:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from bench/wallet_balance.cpp:12:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from bench/wallet_balance.cpp:12:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      bench/bench_bitcoin-wallet_loading.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from bench/wallet_loading.cpp:14:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from bench/wallet_loading.cpp:14:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from bench/wallet_loading.cpp:14:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXXLD    bench/bench_bitcoin
  CXX      minisketch/src/test-test.o
  CXXLD    minisketch/test
  CXX      wallet/test/fuzz/test_fuzz_fuzz-coinselection.o
  CXX      wallet/test/fuzz/test_fuzz_fuzz-notifications.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/test/fuzz/notifications.cpp:11:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/test/fuzz/notifications.cpp:11:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(bool)>':
./wallet/scriptpubkeyman.h:252:57:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void()>':
./wallet/scriptpubkeyman.h:255:38:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>':
./wallet/wallet.h:735:9:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const uint256&, ChangeType)>':
./wallet/wallet.h:741:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(const std::__cxx11::basic_string<char>&, int)>':
./wallet/wallet.h:744:77:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]' can be marked override [-Wsuggest-override]
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(wallet::CWallet*)>':
./wallet/wallet.h:756:53:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}]' can be marked override [-Wsuggest-override]
In file included from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./wallet/scriptpubkeyman.h:21,
                 from ./wallet/wallet.h:26,
                 from ./wallet/receive.h:11,
                 from wallet/test/fuzz/notifications.cpp:11:
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:292:16:   required from 'bool boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:734:31:   required from 'bool boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::empty() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]'
./wallet/wallet.h:383:9:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-overrid]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(), boost::function<void()> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/scriptpubkeyman.h:173:73:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(bool), boost::function<void(bool)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(const std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp: In instantiation of 'class boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex>':
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:394:63:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type& boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::invocation_state::connection_bodies() [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >, boost::signals2::mutex> > >]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:157:65:   required from 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal_impl(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:660:16:   required from 'boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::signal(const combiner_type&, const group_compare_type&) [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(wallet::CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, wallet::CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {wallet::CWallet*}; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::combiner_type = boost::signals2::optional_last_value<void>; boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::group_compare_type = std::less<int>]'
./wallet/wallet.h:376:41:   required from here
/opt/homebrew//include/boost/signals2/connection.hpp:150:22: warning: 'bool boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::connected() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  150 |         virtual bool connected() const
      |                      ^~~~~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:195:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::lock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  195 |         virtual void lock()
      |                      ^~~~
/opt/homebrew//include/boost/signals2/connection.hpp:199:22: warning: 'void boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::unlock() [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  199 |         virtual void unlock()
      |                      ^~~~~~
/opt/homebrew//include/boost/signals2/connection.hpp:212:34: warning: 'boost::shared_ptr<void> boost::signals2::detail::connection_body<GroupKey, SlotType, Mutex>::release_slot() const [with GroupKey = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >; SlotType = boost::signals2::slot<void(wallet::CWallet*), boost::function<void(wallet::CWallet*)> >; Mutex = boost::signals2::mutex]' can be marked override [-Wsuggest-override]
  212 |         virtual shared_ptr<void> release_slot() const
      |                                  ^~~~~~~~~~~~
  CXX      test/fuzz/fuzz-addition_overflow.o
  CXX      test/fuzz/fuzz-addrman.o
  CXX      test/fuzz/fuzz-asmap.o
  CXX      test/fuzz/fuzz-asmap_direct.o
  CXX      test/fuzz/fuzz-autofile.o
  CXX      test/fuzz/fuzz-banman.o
  CXX      test/fuzz/fuzz-base_encode_decode.o
  CXX      test/fuzz/fuzz-bech32.o
  CXX      test/fuzz/fuzz-block.o
  CXX      test/fuzz/fuzz-block_header.o
  CXX      test/fuzz/fuzz-blockfilter.o
  CXX      test/fuzz/fuzz-bloom_filter.o
  CXX      test/fuzz/fuzz-buffered_file.o
  CXX      test/fuzz/fuzz-chain.o
  CXX      test/fuzz/fuzz-checkqueue.o
  CXX      test/fuzz/fuzz-coins_view.o
  CXX      test/fuzz/fuzz-connman.o
  CXX      test/fuzz/fuzz-crypto.o
  CXX      test/fuzz/fuzz-crypto_aes256.o
  CXX      test/fuzz/fuzz-crypto_aes256cbc.o
  CXX      test/fuzz/fuzz-crypto_chacha20.o
  CXX      test/fuzz/fuzz-crypto_chacha20_poly1305_aead.o
  CXX      test/fuzz/fuzz-crypto_common.o
  CXX      test/fuzz/fuzz-crypto_diff_fuzz_chacha20.o
  CXX      test/fuzz/fuzz-crypto_hkdf_hmac_sha256_l32.o
  CXX      test/fuzz/fuzz-crypto_poly1305.o
  CXX      test/fuzz/fuzz-cuckoocache.o
  CXX      test/fuzz/fuzz-decode_tx.o
  CXX      test/fuzz/fuzz-descriptor_parse.o
  CXX      test/fuzz/fuzz-deserialize.o
  CXX      test/fuzz/fuzz-eval_script.o
  CXX      test/fuzz/fuzz-fee_rate.o
  CXX      test/fuzz/fuzz-fees.o
  CXX      test/fuzz/fuzz-flatfile.o
  CXX      test/fuzz/fuzz-float.o
  CXX      test/fuzz/fuzz-golomb_rice.o
  CXX      test/fuzz/fuzz-hex.o
  CXX      test/fuzz/fuzz-http_request.o
  CXX      test/fuzz/fuzz-i2p.o
  CXX      test/fuzz/fuzz-integer.o
  CXX      test/fuzz/fuzz-key.o
  CXX      test/fuzz/fuzz-key_io.o
  CXX      test/fuzz/fuzz-kitchen_sink.o
  CXX      test/fuzz/fuzz-load_external_block_file.o
  CXX      test/fuzz/fuzz-locale.o
  CXX      test/fuzz/fuzz-merkleblock.o
  CXX      test/fuzz/fuzz-message.o
  CXX      test/fuzz/fuzz-miniscript.o
  CXX      test/fuzz/fuzz-minisketch.o
  CXX      test/fuzz/fuzz-muhash.o
  CXX      test/fuzz/fuzz-multiplication_overflow.o
  CXX      test/fuzz/fuzz-net.o
  CXX      test/fuzz/fuzz-net_permissions.o
  CXX      test/fuzz/fuzz-netaddress.o
  CXX      test/fuzz/fuzz-netbase_dns_lookup.o
  CXX      test/fuzz/fuzz-node_eviction.o
  CXX      test/fuzz/fuzz-p2p_transport_serialization.o
  CXX      test/fuzz/fuzz-parse_hd_keypath.o
  CXX      test/fuzz/fuzz-parse_iso8601.o
  CXX      test/fuzz/fuzz-parse_numbers.o
  CXX      test/fuzz/fuzz-parse_script.o
  CXX      test/fuzz/fuzz-parse_univalue.o
  CXX      test/fuzz/fuzz-policy_estimator.o
  CXX      test/fuzz/fuzz-policy_estimator_io.o
  CXX      test/fuzz/fuzz-pow.o
  CXX      test/fuzz/fuzz-prevector.o
  CXX      test/fuzz/fuzz-primitives_transaction.o
  CXX      test/fuzz/fuzz-process_message.o
  CXX      test/fuzz/fuzz-process_messages.o
  CXX      test/fuzz/fuzz-protocol.o
  CXX      test/fuzz/fuzz-psbt.o
  CXX      test/fuzz/fuzz-random.o
  CXX      test/fuzz/fuzz-rbf.o
  CXX      test/fuzz/fuzz-rolling_bloom_filter.o
  CXX      test/fuzz/fuzz-rpc.o
  CXX      test/fuzz/fuzz-script.o
  CXX      test/fuzz/fuzz-script_assets_test_minimizer.o
  CXX      test/fuzz/fuzz-script_bitcoin_consensus.o
  CXX      test/fuzz/fuzz-script_descriptor_cache.o
  CXX      test/fuzz/fuzz-script_flags.o
  CXX      test/fuzz/fuzz-script_format.o
  CXX      test/fuzz/fuzz-script_interpreter.o
  CXX      test/fuzz/fuzz-script_ops.o
  CXX      test/fuzz/fuzz-script_sigcache.o
  CXX      test/fuzz/fuzz-script_sign.o
  CXX      test/fuzz/fuzz-scriptnum_ops.o
  CXX      test/fuzz/fuzz-secp256k1_ec_seckey_import_export_der.o
  CXX      test/fuzz/fuzz-secp256k1_ecdsa_signature_parse_der_lax.o
  CXX      test/fuzz/fuzz-signature_checker.o
  CXX      test/fuzz/fuzz-signet.o
  CXX      test/fuzz/fuzz-socks5.o
  CXX      test/fuzz/fuzz-span.o
  CXX      test/fuzz/fuzz-spanparsing.o
  CXX      test/fuzz/fuzz-string.o
  CXX      test/fuzz/fuzz-strprintf.o
  CXX      test/fuzz/fuzz-system.o
  CXX      test/fuzz/fuzz-timedata.o
  CXX      test/fuzz/fuzz-torcontrol.o
In file included from /opt/homebrew//include/boost/signals2/slot_base.hpp:18,
                 from /opt/homebrew//include/boost/signals2/detail/tracked_objects_visitor.hpp:18,
                 from /opt/homebrew//include/boost/signals2/slot.hpp:22,
                 from /opt/homebrew//include/boost/signals2/connection.hpp:25,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:22,
                 from ./torcontrol.h:14,
                 from test/fuzz/torcontrol.cpp:9:
/opt/homebrew//include/boost/signals2/expired_slot.hpp:23:28: warning: 'virtual const char* boost::signals2::expired_slot::what() const' can be marked override [-Wsuggest-override]
   23 |       virtual char const * what() const throw()
      |                            ^~~~
In file included from /opt/homebrew//include/boost/signals2/variadic_signal.hpp:44,
                 from /opt/homebrew//include/boost/signals2/signal.hpp:38,
                 from ./torcontrol.h:14,
                 from test/fuzz/torcontrol.cpp:9:
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp: In instantiation of 'class boost::signals2::signal<void(TorControlConnection&, const TorControlReply&)>':
./torcontrol.h:87:83:   required from here
/opt/homebrew//include/boost/signals2/detail/signal_template.hpp:750:32: warning: 'boost::shared_ptr<void> boost::signals2::signal<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::lock_pimpl() const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(TorControlConnection&, const TorControlReply&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, TorControlConnection&, const TorControlReply&)>; Mutex = boost::signals2::mutex; R = void; Args = {TorControlConnection&, const TorControlReply&}]' can be marked override [-Wsuggest-override]
  750 |       virtual shared_ptr<void> lock_pimpl() const
      |                                ^~~~~~~~~~
  CXX      test/fuzz/fuzz-transaction.o
  CXX      test/fuzz/fuzz-tx_in.o
  CXX      test/fuzz/fuzz-tx_out.o
  CXX      test/fuzz/fuzz-tx_pool.o
  CXX      test/fuzz/fuzz-txorphan.o
  CXX      test/fuzz/fuzz-txrequest.o
  CXX      test/fuzz/fuzz-utxo_snapshot.o
  CXX      test/fuzz/fuzz-validation_load_mempool.o
  CXX      test/fuzz/fuzz-versionbits.o
  CXX      test/fuzz/libtest_fuzz_a-fuzz.o
  CXX      test/fuzz/libtest_fuzz_a-util.o
  AR       libtest_fuzz.a
  CXXLD    test/fuzz/fuzz
  CXX      univalue/test/object-object.o
  CXXLD    univalue/test/object
  CXX      univalue/test/unitester-unitester.o
  CXXLD    univalue/test/unitester
  CXX      support/libbitcoinconsensus_la-cleanse.lo
  CXX      crypto/libbitcoinconsensus_la-aes.lo
  CXX      crypto/libbitcoinconsensus_la-chacha_poly_aead.lo
  CXX      crypto/libbitcoinconsensus_la-chacha20.lo
  CXX      crypto/libbitcoinconsensus_la-hkdf_sha256_32.lo
  CXX      crypto/libbitcoinconsensus_la-hmac_sha256.lo
  CXX      crypto/libbitcoinconsensus_la-hmac_sha512.lo
  CXX      crypto/libbitcoinconsensus_la-poly1305.lo
  CXX      crypto/libbitcoinconsensus_la-muhash.lo
  CXX      crypto/libbitcoinconsensus_la-ripemd160.lo
  CXX      crypto/libbitcoinconsensus_la-sha1.lo
  CXX      crypto/libbitcoinconsensus_la-sha256.lo
  CXX      crypto/libbitcoinconsensus_la-sha3.lo
  CXX      crypto/libbitcoinconsensus_la-sha512.lo
  CXX      crypto/libbitcoinconsensus_la-siphash.lo
  CXX      crypto/libbitcoinconsensus_la-sha256_sse4.lo
  CXX      libbitcoinconsensus_la-arith_uint256.lo
  CXX      consensus/libbitcoinconsensus_la-merkle.lo
  CXX      consensus/libbitcoinconsensus_la-tx_check.lo
  CXX      libbitcoinconsensus_la-hash.lo
  CXX      primitives/libbitcoinconsensus_la-block.lo
  CXX      primitives/libbitcoinconsensus_la-transaction.lo
  CXX      libbitcoinconsensus_la-pubkey.lo
  CXX      script/libbitcoinconsensus_la-bitcoinconsensus.lo
  CXX      script/libbitcoinconsensus_la-interpreter.lo
  CXX      script/libbitcoinconsensus_la-script.lo
  CXX      script/libbitcoinconsensus_la-script_error.lo
  CXX      libbitcoinconsensus_la-uint256.lo
  CXX      util/libbitcoinconsensus_la-strencodings.lo
  CXXLD    libbitcoinconsensus.la
Making all in doc/man
make[1]: Nothing to be done for `all'.
make[1]: Nothing to be done for `all-am'.
mehul@Mehuls-MacBook bitcoin % make test
make: Nothing to be done for `test'.
mehul@Mehuls-MacBook bitcoin % make check
Making check in src
/Library/Developer/CommandLineTools/usr/bin/make  check-TESTS check-local
PASS: minisketch/test
PASS: univalue/test/object
PASS: univalue/test/unitester
============================================================================
Testsuite summary for Bitcoin Core 23.99.0
============================================================================
# TOTAL: 3
# PASS:  3
# SKIP:  0
# XFAIL: 0
# FAIL:  0
# XPASS: 0
# ERROR: 0
============================================================================
Running tests: addrman_tests from test/addrman_tests.cpp
Running tests: allocator_tests from test/allocator_tests.cpp
Running tests: amount_tests from test/amount_tests.cpp
Running tests: arith_uint256_tests from test/arith_uint256_tests.cpp
Running tests: banman_tests from test/banman_tests.cpp
Running tests: base32_tests from test/base32_tests.cpp
Running tests: base58_tests from test/base58_tests.cpp
Running tests: base64_tests from test/base64_tests.cpp
Running tests: bech32_tests from test/bech32_tests.cpp
Running tests: bip32_tests from test/bip32_tests.cpp
Running tests: blockchain_tests from test/blockchain_tests.cpp
Running tests: blockencodings_tests from test/blockencodings_tests.cpp
Running tests: blockfilter_index_tests from test/blockfilter_index_tests.cpp
Running tests: blockfilter_tests from test/blockfilter_tests.cpp
Running tests: bloom_tests from test/bloom_tests.cpp
Running tests: bswap_tests from test/bswap_tests.cpp
Running tests: checkqueue_tests from test/checkqueue_tests.cpp
Running tests: coins_tests from test/coins_tests.cpp
Running tests: coinstatsindex_tests from test/coinstatsindex_tests.cpp
Running tests: compilerbug_tests from test/compilerbug_tests.cpp
Running tests: compress_tests from test/compress_tests.cpp
Running tests: crypto_tests from test/crypto_tests.cpp
Running tests: cuckoocache_tests from test/cuckoocache_tests.cpp
Running tests: dbwrapper_tests from test/dbwrapper_tests.cpp
Running tests: denialofservice_tests from test/denialofservice_tests.cpp
Running tests: descriptor_tests from test/descriptor_tests.cpp
Running tests: flatfile_tests from test/flatfile_tests.cpp
Running tests: fs_tests from test/fs_tests.cpp
Running tests: getarg_tests from test/getarg_tests.cpp
Running tests: hash_tests from test/hash_tests.cpp
Running tests: httpserver_tests from test/httpserver_tests.cpp
Running tests: i2p_tests from test/i2p_tests.cpp
Running tests: interfaces_tests from test/interfaces_tests.cpp
Running tests: key_io_tests from test/key_io_tests.cpp
Running tests: key_tests from test/key_tests.cpp
Running tests: logging_tests from test/logging_tests.cpp
Running tests: mempool_tests from test/mempool_tests.cpp
Running tests: merkle_tests from test/merkle_tests.cpp
Running tests: merkleblock_tests from test/merkleblock_tests.cpp
Running tests: miner_tests from test/miner_tests.cpp
Running tests: miniscript_tests from test/miniscript_tests.cpp
Running tests: minisketch_tests from test/minisketch_tests.cpp
Running tests: multisig_tests from test/multisig_tests.cpp
Running tests: net_peer_eviction_tests from test/net_peer_eviction_tests.cpp
Running tests: net_tests from test/net_tests.cpp
Running tests: netbase_tests from test/netbase_tests.cpp
Running tests: orphanage_tests from test/orphanage_tests.cpp
Running tests: pmt_tests from test/pmt_tests.cpp
Running tests: policy_fee_tests from test/policy_fee_tests.cpp
Running tests: policyestimator_tests from test/policyestimator_tests.cpp
Running tests: pow_tests from test/pow_tests.cpp
Running tests: prevector_tests from test/prevector_tests.cpp
Running tests: raii_event_tests from test/raii_event_tests.cpp
Running tests: random_tests from test/random_tests.cpp
Running tests: rbf_tests from test/rbf_tests.cpp
Running tests: rest_tests from test/rest_tests.cpp
Running tests: result_tests from test/result_tests.cpp
Running tests: reverselock_tests from test/reverselock_tests.cpp
Running tests: rpc_tests from test/rpc_tests.cpp
Running tests: sanity_tests from test/sanity_tests.cpp
Running tests: scheduler_tests from test/scheduler_tests.cpp
Running tests: script_p2sh_tests from test/script_p2sh_tests.cpp
Running tests: script_parse_tests from test/script_parse_tests.cpp
Running tests: script_segwit_tests from test/script_segwit_tests.cpp
Running tests: script_standard_tests from test/script_standard_tests.cpp
Running tests: script_tests from test/script_tests.cpp
Running tests: scriptnum_tests from test/scriptnum_tests.cpp
Running tests: serfloat_tests from test/serfloat_tests.cpp
Running tests: serialize_tests from test/serialize_tests.cpp
Running tests: settings_tests from test/settings_tests.cpp
Running tests: sighash_tests from test/sighash_tests.cpp
Running tests: sigopcount_tests from test/sigopcount_tests.cpp
Running tests: skiplist_tests from test/skiplist_tests.cpp
Running tests: sock_tests from test/sock_tests.cpp
Running tests: streams_tests from test/streams_tests.cpp
Running tests: sync_tests from test/sync_tests.cpp
Running tests: system_tests from test/system_tests.cpp
Running tests: timedata_tests from test/timedata_tests.cpp
Running tests: torcontrol_tests from test/torcontrol_tests.cpp
Running tests: transaction_tests from test/transaction_tests.cpp
Running tests: txindex_tests from test/txindex_tests.cpp
Running tests: txpackage_tests from test/txpackage_tests.cpp
Running tests: txrequest_tests from test/txrequest_tests.cpp
Running tests: txvalidation_tests from test/txvalidation_tests.cpp
Running tests: txvalidationcache_tests from test/txvalidationcache_tests.cpp
Running tests: uint256_tests from test/uint256_tests.cpp
Running tests: util_tests from test/util_tests.cpp
Running tests: util_threadnames_tests from test/util_threadnames_tests.cpp
Running tests: validation_block_tests from test/validation_block_tests.cpp
Running tests: validation_chainstate_tests from test/validation_chainstate_tests.cpp
Running tests: validation_chainstatemanager_tests from test/validation_chainstatemanager_tests.cpp
Running tests: validation_flush_tests from test/validation_flush_tests.cpp
Running tests: validation_tests from test/validation_tests.cpp
Running tests: validationinterface_tests from test/validationinterface_tests.cpp
Running tests: versionbits_tests from test/versionbits_tests.cpp
Running tests: psbt_wallet_tests from wallet/test/psbt_wallet_tests.cpp
Running tests: spend_tests from wallet/test/spend_tests.cpp
Running tests: wallet_tests from wallet/test/wallet_tests.cpp
Running tests: walletdb_tests from wallet/test/walletdb_tests.cpp
Running tests: wallet_crypto_tests from wallet/test/wallet_crypto_tests.cpp
Running tests: wallet_transaction_tests from wallet/test/wallet_transaction_tests.cpp
Running tests: coinselector_tests from wallet/test/coinselector_tests.cpp
Running tests: availablecoins_tests from wallet/test/availablecoins_tests.cpp
Running tests: init_tests from wallet/test/init_tests.cpp
Running tests: ismine_tests from wallet/test/ismine_tests.cpp
Running tests: scriptpubkeyman_tests from wallet/test/scriptpubkeyman_tests.cpp
Running test/util/test_runner.py...
/usr/bin/python3 ../test/util/test_runner.py
Running test/util/rpcauth-test.py...
/usr/bin/python3 ../test/util/rpcauth-test.py
...
----------------------------------------------------------------------
Ran 3 tests in 0.003s

OK
Running bench/bench_bitcoin (one iteration sanity check)...
bench/bench_bitcoin --sanity-check > /dev/null
/Library/Developer/CommandLineTools/usr/bin/make  check-am
  CC       src/tests-tests.o
  CCLD     tests
  CC       src/exhaustive_tests-tests_exhaustive.o
  CCLD     exhaustive_tests
/Library/Developer/CommandLineTools/usr/bin/make  check-TESTS
PASS: tests
PASS: exhaustive_tests
============================================================================
Testsuite summary for libsecp256k1 0.1.0-pre
============================================================================
# TOTAL: 2
# PASS:  2
# SKIP:  0
# XFAIL: 0
# FAIL:  0
# XPASS: 0
# ERROR: 0
============================================================================
Making check in doc/man
make[1]: Nothing to be done for `check'.
make[1]: Nothing to be done for `check-am'.
mehul@Mehuls-MacBook bitcoin % pip3 install pyzmq
Defaulting to user installation because normal site-packages is not writeable
Requirement already satisfied: pyzmq in /Users/mehul/Library/Python/3.8/lib/python/site-packages (22.3.0)
WARNING: You are using pip version 21.2.4; however, version 22.2.1 is available.
You should consider upgrading via the '/Library/Developer/CommandLineTools/usr/bin/python3 -m pip install --upgrade pip' command.
mehul@Mehuls-MacBook bitcoin % test/functional/test_runner.py -j 60
Temporary test directory at /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410
Running Unit Tests for Test Framework Modules
..........
----------------------------------------------------------------------
Ran 10 tests in 0.576s

OK
1/246 - wallet_hd.py --legacy-wallet skipped
2/246 - wallet_backup.py --legacy-wallet skipped
3/246 - rpc_fundrawtransaction.py --legacy-wallet skipped
4/246 - feature_segwit.py --legacy-wallet skipped
5/246 - wallet_basic.py --legacy-wallet skipped
6/246 - wallet_labels.py --legacy-wallet skipped
7/246 - wallet_dump.py --legacy-wallet skipped
8/246 - wallet_importmulti.py --legacy-wallet skipped
9/246 - wallet_listreceivedby.py --legacy-wallet skipped
10/246 - wallet_abandonconflict.py --legacy-wallet skipped
11/246 - wallet_address_types.py --legacy-wallet skipped
12/246 - wallet_keypool_topup.py --legacy-wallet skipped
13/246 - interface_zmq.py skipped
14/246 - feature_bind_extra.py skipped
15/246 - tool_wallet.py --legacy-wallet skipped
16/246 - tool_signet_miner.py --legacy-wallet skipped
17/246 - wallet_avoidreuse.py --legacy-wallet skipped
18/246 - wallet_multiwallet.py --legacy-wallet skipped
19/246 - wallet_createwallet.py --legacy-wallet skipped
20/246 - wallet_listtransactions.py --legacy-wallet skipped
21/246 - wallet_watchonly.py --legacy-wallet skipped
22/246 - wallet_watchonly.py --usecli --legacy-wallet skipped
23/246 - interface_usdt_coinselection.py skipped
24/246 - interface_usdt_net.py skipped
25/246 - p2p_timeouts.py passed, Duration: 10 s
26/246 - interface_usdt_utxocache.py skipped
27/246 - interface_usdt_validation.py skipped
28/246 - rpc_psbt.py --legacy-wallet skipped
29/246 - rpc_invalid_address_message.py passed, Duration: 14 s
30/246 - tool_signet_miner.py --descriptors passed, Duration: 15 s
31/246 - mempool_spend_coinbase.py passed, Duration: 16 s
32/246 - feature_syscall_sandbox.py skipped
33/246 - wallet_signrawtransactionwithwallet.py --legacy-wallet skipped
34/246 - p2p_block_sync.py passed, Duration: 20 s
35/246 - interface_rpc.py passed, Duration: 19 s
36/246 - rpc_whitelist.py passed, Duration: 16 s
37/246 - wallet_groups.py --legacy-wallet skipped
38/246 - interface_http.py passed, Duration: 27 s
39/246 - rpc_signer.py passed, Duration: 34 s
40/246 - wallet_transactiontime_rescan.py --legacy-wallet skipped
41/246 - p2p_compactblocks_blocksonly.py passed, Duration: 35 s
42/246 - rpc_misc.py passed, Duration: 35 s
43/246 - mempool_reorg.py passed, Duration: 34 s
44/246 - wallet_createwallet.py --descriptors passed, Duration: 38 s
45/246 - wallet_txn_clone.py --segwit passed, Duration: 43 s
46/246 - wallet_createwallet.py --usecli passed, Duration: 41 s
47/246 - wallet_signer.py --descriptors passed, Duration: 46 s
48/246 - p2p_addrv2_relay.py passed, Duration: 13 s
49/246 - interface_rest.py passed, Duration: 45 s
50/246 - wallet_txn_clone.py passed, Duration: 49 s
51/246 - rpc_decodescript.py passed, Duration: 15 s
52/246 - feature_abortnode.py passed, Duration: 53 s
53/246 - wallet_txn_doublespend.py --mineblock passed, Duration: 53 s
54/246 - wallet_disable.py passed, Duration: 8 s
55/246 - wallet_keypool.py --legacy-wallet skipped
56/246 - rpc_deprecated.py passed, Duration: 10 s
57/246 - feature_reindex.py passed, Duration: 57 s
58/246 - rpc_users.py passed, Duration: 47 s
59/246 - p2p_getdata.py passed, Duration: 12 s
60/246 - p2p_addrfetch.py passed, Duration: 10 s
61/246 - p2p_disconnect_ban.py passed, Duration: 32 s
62/246 - p2p_nobloomfilter_messages.py passed, Duration: 11 s
63/246 - rpc_getchaintips.py passed, Duration: 69 s
64/246 - feature_proxy.py passed, Duration: 55 s
65/246 - wallet_miniscript.py passed, Duration: 16 s
66/246 - tool_wallet.py --descriptors passed, Duration: 76 s
67/246 - wallet_keypool.py --descriptors passed, Duration: 22 s
68/246 - wallet_reorgsrestore.py passed, Duration: 78 s
69/246 - wallet_txn_doublespend.py --legacy-wallet skipped
70/246 - p2p_filter.py passed, Duration: 28 s
71/246 - p2p_blocksonly.py passed, Duration: 27 s
72/246 - mempool_persist.py passed, Duration: 86 s
73/246 - feature_backwards_compatibility.py --legacy-wallet skipped
74/246 - feature_backwards_compatibility.py --descriptors skipped
75/246 - feature_maxuploadtarget.py failed, Duration: 93 s

stdout:
2022-08-07T19:04:13.085000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/feature_maxuploadtarget_240
2022-08-07T19:04:45.311000Z TestFramework (ERROR): JSONRPC error
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 166, in _get_response
    http_response = self.__conn.getresponse()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1344, in getresponse
    response.begin()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
socket.timeout: timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/feature_maxuploadtarget.py", line 62, in run_test
    self.generate(self.wallet, 130)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 648, in generate
    blocks = generator.generate(*args, invalid_call=False, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/wallet.py", line 163, in generate
    blocks = self._test_node.generatetodescriptor(num_blocks, self.get_descriptor(), **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 315, in generatetodescriptor
    return self.__getattr__('generatetodescriptor')(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 108, in _request
    return self._get_response()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 168, in _get_response
    raise JSONRPCException({
test_framework.authproxy.JSONRPCException: 'generatetodescriptor' RPC took longer than 30.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)
2022-08-07T19:04:45.455000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:04:45.571000Z TestFramework.node0 (ERROR): Unable to stop node.
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 336, in stop_node
    self.stop(wait=wait)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 107, in _request
    self.__conn.request(method, path, postdata, headers)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1252, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1263, in _send_request
    self.putrequest(method, url, **skips)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1089, in putrequest
    raise CannotSendRequest(self.__state)
http.client.CannotSendRequest: Request-sent
2022-08-07T19:05:45.616000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
'''
[node 0] Cleaning up leftover process


stderr:
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/feature_maxuploadtarget.py", line 169, in <module>
    MaxUploadTest().main()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 156, in main
    exit_code = self.shutdown()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 311, in shutdown
    self.stop_nodes()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 571, in stop_nodes
    node.wait_until_stopped()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 382, in wait_until_stopped
    wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/util.py", line 281, in wait_until_helper
    raise AssertionError("Predicate {} not true after {} seconds".format(predicate_source, timeout))
AssertionError: Predicate ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
''' not true after 60.0 seconds


76/246 - wallet_listtransactions.py --descriptors passed, Duration: 89 s
77/246 - mempool_limit.py failed, Duration: 95 s

stdout:
2022-08-07T19:04:13.511000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/mempool_limit_218
2022-08-07T19:04:17.500000Z TestFramework (INFO): Check that mempoolminfee is minrelaytxfee
2022-08-07T19:04:47.715000Z TestFramework (ERROR): JSONRPC error
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 166, in _get_response
    http_response = self.__conn.getresponse()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1344, in getresponse
    response.begin()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
socket.timeout: timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/mempool_limit.py", line 48, in run_test
    self.generate(miniwallet, 1 + (num_of_batches * tx_batch_size) + 1)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 648, in generate
    blocks = generator.generate(*args, invalid_call=False, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/wallet.py", line 163, in generate
    blocks = self._test_node.generatetodescriptor(num_blocks, self.get_descriptor(), **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 315, in generatetodescriptor
    return self.__getattr__('generatetodescriptor')(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 108, in _request
    return self._get_response()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 168, in _get_response
    raise JSONRPCException({
test_framework.authproxy.JSONRPCException: 'generatetodescriptor' RPC took longer than 30.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)
2022-08-07T19:04:47.929000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:04:47.958000Z TestFramework.node0 (ERROR): Unable to stop node.
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 336, in stop_node
    self.stop(wait=wait)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 107, in _request
    self.__conn.request(method, path, postdata, headers)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1252, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1263, in _send_request
    self.putrequest(method, url, **skips)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1089, in putrequest
    raise CannotSendRequest(self.__state)
http.client.CannotSendRequest: Request-sent
2022-08-07T19:05:48.023000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
'''
[node 0] Cleaning up leftover process


stderr:
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/mempool_limit.py", line 86, in <module>
    MempoolLimitTest().main()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 156, in main
    exit_code = self.shutdown()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 311, in shutdown
    self.stop_nodes()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 571, in stop_nodes
    node.wait_until_stopped()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 382, in wait_until_stopped
    wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/util.py", line 281, in wait_until_helper
    raise AssertionError("Predicate {} not true after {} seconds".format(predicate_source, timeout))
AssertionError: Predicate ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
''' not true after 60.0 seconds


78/246 - example_test.py passed, Duration: 18 s
79/246 - rpc_setban.py passed, Duration: 35 s
80/246 - p2p_invalid_block.py passed, Duration: 25 s
81/246 - wallet_listreceivedby.py --descriptors passed, Duration: 96 s
82/246 - interface_bitcoin_cli.py --legacy-wallet failed, Duration: 96 s

stdout:
2022-08-07T19:04:13.743000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/interface_bitcoin_cli_198
2022-08-07T19:04:50.099000Z TestFramework (ERROR): JSONRPC error
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 166, in _get_response
    http_response = self.__conn.getresponse()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1344, in getresponse
    response.begin()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
socket.timeout: timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/interface_bitcoin_cli.py", line 80, in run_test
    self.generate(self.nodes[0], BLOCKS)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 648, in generate
    blocks = generator.generate(*args, invalid_call=False, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 303, in generate
    return self.generatetoaddress(nblocks=nblocks, address=self.get_deterministic_priv_key().address, maxtries=maxtries, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 311, in generatetoaddress
    return self.__getattr__('generatetoaddress')(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 108, in _request
    return self._get_response()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 168, in _get_response
    raise JSONRPCException({
test_framework.authproxy.JSONRPCException: 'generatetoaddress' RPC took longer than 30.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)
2022-08-07T19:04:50.223000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:04:50.265000Z TestFramework.node0 (ERROR): Unable to stop node.
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 336, in stop_node
    self.stop(wait=wait)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 107, in _request
    self.__conn.request(method, path, postdata, headers)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1252, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1263, in _send_request
    self.putrequest(method, url, **skips)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1089, in putrequest
    raise CannotSendRequest(self.__state)
http.client.CannotSendRequest: Request-sent
2022-08-07T19:05:50.282000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
'''
[node 0] Cleaning up leftover process


stderr:
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/interface_bitcoin_cli.py", line 326, in <module>
    TestBitcoinCli().main()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 156, in main
    exit_code = self.shutdown()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 311, in shutdown
    self.stop_nodes()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 571, in stop_nodes
    node.wait_until_stopped()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 382, in wait_until_stopped
    wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/util.py", line 281, in wait_until_helper
    raise AssertionError("Predicate {} not true after {} seconds".format(predicate_source, timeout))
AssertionError: Predicate ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
''' not true after 60.0 seconds


83/246 - wallet_hd.py --descriptors failed, Duration: 98 s

stdout:
2022-08-07T19:04:12.991000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/wallet_hd_244
2022-08-07T19:04:50.203000Z TestFramework (ERROR): JSONRPC error
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 166, in _get_response
    http_response = self.__conn.getresponse()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1344, in getresponse
    response.begin()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
socket.timeout: timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/wallet_hd.py", line 52, in run_test
    self.generate(self.nodes[0], COINBASE_MATURITY + 1)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 648, in generate
    blocks = generator.generate(*args, invalid_call=False, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 303, in generate
    return self.generatetoaddress(nblocks=nblocks, address=self.get_deterministic_priv_key().address, maxtries=maxtries, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 311, in generatetoaddress
    return self.__getattr__('generatetoaddress')(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 108, in _request
    return self._get_response()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 168, in _get_response
    raise JSONRPCException({
test_framework.authproxy.JSONRPCException: 'generatetoaddress' RPC took longer than 30.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)
2022-08-07T19:04:50.320000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:04:50.470000Z TestFramework.node0 (ERROR): Unable to stop node.
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 336, in stop_node
    self.stop(wait=wait)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 107, in _request
    self.__conn.request(method, path, postdata, headers)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1252, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1263, in _send_request
    self.putrequest(method, url, **skips)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1089, in putrequest
    raise CannotSendRequest(self.__state)
http.client.CannotSendRequest: Request-sent
2022-08-07T19:05:51.047000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
'''
[node 1] Cleaning up leftover process
[node 0] Cleaning up leftover process


stderr:
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/wallet_hd.py", line 278, in <module>
    WalletHDTest().main()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 156, in main
    exit_code = self.shutdown()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 311, in shutdown
    self.stop_nodes()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 571, in stop_nodes
    node.wait_until_stopped()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 382, in wait_until_stopped
    wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/util.py", line 281, in wait_until_helper
    raise AssertionError("Predicate {} not true after {} seconds".format(predicate_source, timeout))
AssertionError: Predicate ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
''' not true after 60.0 seconds


84/246 - feature_taproot.py failed, Duration: 98 s

stdout:
2022-08-07T19:04:13.471000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/feature_taproot_223
2022-08-07T19:04:20.017000Z TestFramework (INFO): Unit test scenario...
2022-08-07T19:04:50.199000Z TestFramework (ERROR): JSONRPC error
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 166, in _get_response
    http_response = self.__conn.getresponse()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1344, in getresponse
    response.begin()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
socket.timeout: timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/feature_taproot.py", line 1707, in run_test
    self.gen_test_vectors()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/feature_taproot.py", line 1499, in gen_test_vectors
    self.generate(self.nodes[0], COINBASE_MATURITY)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 648, in generate
    blocks = generator.generate(*args, invalid_call=False, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 303, in generate
    return self.generatetoaddress(nblocks=nblocks, address=self.get_deterministic_priv_key().address, maxtries=maxtries, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 311, in generatetoaddress
    return self.__getattr__('generatetoaddress')(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 108, in _request
    return self._get_response()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 168, in _get_response
    raise JSONRPCException({
test_framework.authproxy.JSONRPCException: 'generatetoaddress' RPC took longer than 30.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)
2022-08-07T19:04:50.320000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:04:50.470000Z TestFramework.node0 (ERROR): Unable to stop node.
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 336, in stop_node
    self.stop(wait=wait)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 107, in _request
    self.__conn.request(method, path, postdata, headers)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1252, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1263, in _send_request
    self.putrequest(method, url, **skips)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1089, in putrequest
    raise CannotSendRequest(self.__state)
http.client.CannotSendRequest: Request-sent
2022-08-07T19:05:50.603000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
'''
[node 0] Cleaning up leftover process


stderr:
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/feature_taproot.py", line 1719, in <module>
    TaprootTest().main()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 156, in main
    exit_code = self.shutdown()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 311, in shutdown
    self.stop_nodes()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 571, in stop_nodes
    node.wait_until_stopped()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 382, in wait_until_stopped
    wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/util.py", line 281, in wait_until_helper
    raise AssertionError("Predicate {} not true after {} seconds".format(predicate_source, timeout))
AssertionError: Predicate ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
''' not true after 60.0 seconds


85/246 - feature_csv_activation.py failed, Duration: 98 s

stdout:
2022-08-07T19:04:13.594000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/feature_csv_activation_211
2022-08-07T19:04:20.412000Z TestFramework (INFO): Generate blocks in the past for coinbase outputs.
2022-08-07T19:04:50.600000Z TestFramework (ERROR): JSONRPC error
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 166, in _get_response
    http_response = self.__conn.getresponse()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1344, in getresponse
    response.begin()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
socket.timeout: timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/feature_csv_activation.py", line 194, in run_test
    self.coinbase_blocks = self.generate(self.miniwallet, COINBASE_BLOCK_COUNT)  # blocks generated for inputs
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 648, in generate
    blocks = generator.generate(*args, invalid_call=False, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/wallet.py", line 163, in generate
    blocks = self._test_node.generatetodescriptor(num_blocks, self.get_descriptor(), **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 315, in generatetodescriptor
    return self.__getattr__('generatetodescriptor')(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 108, in _request
    return self._get_response()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 168, in _get_response
    raise JSONRPCException({
test_framework.authproxy.JSONRPCException: 'generatetodescriptor' RPC took longer than 30.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)
2022-08-07T19:04:50.745000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:04:50.878000Z TestFramework.node0 (ERROR): Unable to stop node.
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 336, in stop_node
    self.stop(wait=wait)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 107, in _request
    self.__conn.request(method, path, postdata, headers)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1252, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1263, in _send_request
    self.putrequest(method, url, **skips)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1089, in putrequest
    raise CannotSendRequest(self.__state)
http.client.CannotSendRequest: Request-sent
2022-08-07T19:05:50.927000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
'''
[node 0] Cleaning up leftover process


stderr:
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/feature_csv_activation.py", line 484, in <module>
    BIP68_112_113Test().main()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 156, in main
    exit_code = self.shutdown()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 311, in shutdown
    self.stop_nodes()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 571, in stop_nodes
    node.wait_until_stopped()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 382, in wait_until_stopped
    wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/util.py", line 281, in wait_until_helper
    raise AssertionError("Predicate {} not true after {} seconds".format(predicate_source, timeout))
AssertionError: Predicate ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
''' not true after 60.0 seconds


86/246 - rpc_packages.py failed, Duration: 98 s

stdout:
2022-08-07T19:04:13.743000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/rpc_packages_206
2022-08-07T19:04:20.803000Z TestFramework (INFO): Generate blocks to create UTXOs
2022-08-07T19:04:50.844000Z TestFramework (ERROR): JSONRPC error
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 166, in _get_response
    http_response = self.__conn.getresponse()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1344, in getresponse
    response.begin()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
socket.timeout: timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/rpc_packages.py", line 58, in run_test
    for b in self.generatetoaddress(node, 220, self.address)[:-100]:
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 658, in generatetoaddress
    blocks = generator.generatetoaddress(*args, invalid_call=False, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 311, in generatetoaddress
    return self.__getattr__('generatetoaddress')(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 108, in _request
    return self._get_response()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 168, in _get_response
    raise JSONRPCException({
test_framework.authproxy.JSONRPCException: 'generatetoaddress' RPC took longer than 30.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)
2022-08-07T19:04:50.972000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:04:51.043000Z TestFramework.node0 (ERROR): Unable to stop node.
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 336, in stop_node
    self.stop(wait=wait)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 107, in _request
    self.__conn.request(method, path, postdata, headers)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1252, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1263, in _send_request
    self.putrequest(method, url, **skips)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1089, in putrequest
    raise CannotSendRequest(self.__state)
http.client.CannotSendRequest: Request-sent
2022-08-07T19:05:51.150000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
'''
[node 0] Cleaning up leftover process


stderr:
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/rpc_packages.py", line 435, in <module>
    RPCPackagesTest().main()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 156, in main
    exit_code = self.shutdown()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 311, in shutdown
    self.stop_nodes()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 571, in stop_nodes
    node.wait_until_stopped()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 382, in wait_until_stopped
    wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/util.py", line 281, in wait_until_helper
    raise AssertionError("Predicate {} not true after {} seconds".format(predicate_source, timeout))
AssertionError: Predicate ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
''' not true after 60.0 seconds


87/246 - p2p_compactblocks.py failed, Duration: 99 s

stdout:
2022-08-07T19:04:13.346000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/p2p_compactblocks_236
2022-08-07T19:04:51.896000Z TestFramework (ERROR): JSONRPC error
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 166, in _get_response
    http_response = self.__conn.getresponse()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1344, in getresponse
    response.begin()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
socket.timeout: timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/p2p_compactblocks.py", line 813, in run_test
    self.make_utxos()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/p2p_compactblocks.py", line 159, in make_utxos
    self.generate(self.wallet, COINBASE_MATURITY)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 648, in generate
    blocks = generator.generate(*args, invalid_call=False, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/wallet.py", line 163, in generate
    blocks = self._test_node.generatetodescriptor(num_blocks, self.get_descriptor(), **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 315, in generatetodescriptor
    return self.__getattr__('generatetodescriptor')(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 108, in _request
    return self._get_response()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 168, in _get_response
    raise JSONRPCException({
test_framework.authproxy.JSONRPCException: 'generatetodescriptor' RPC took longer than 30.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)
2022-08-07T19:04:52.126000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:04:52.223000Z TestFramework.node0 (ERROR): Unable to stop node.
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 336, in stop_node
    self.stop(wait=wait)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 107, in _request
    self.__conn.request(method, path, postdata, headers)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1252, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1263, in _send_request
    self.putrequest(method, url, **skips)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1089, in putrequest
    raise CannotSendRequest(self.__state)
http.client.CannotSendRequest: Request-sent
2022-08-07T19:05:52.344000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
'''
[node 0] Cleaning up leftover process


stderr:
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/p2p_compactblocks.py", line 862, in <module>
    CompactBlocksTest().main()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 156, in main
    exit_code = self.shutdown()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 311, in shutdown
    self.stop_nodes()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 571, in stop_nodes
    node.wait_until_stopped()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 382, in wait_until_stopped
    wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/util.py", line 281, in wait_until_helper
    raise AssertionError("Predicate {} not true after {} seconds".format(predicate_source, timeout))
AssertionError: Predicate ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
''' not true after 60.0 seconds


88/246 - interface_bitcoin_cli.py --descriptors failed, Duration: 99 s

stdout:
2022-08-07T19:04:14.204000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/interface_bitcoin_cli_197
2022-08-07T19:04:52.527000Z TestFramework (ERROR): JSONRPC error
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 166, in _get_response
    http_response = self.__conn.getresponse()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1344, in getresponse
    response.begin()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
socket.timeout: timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/interface_bitcoin_cli.py", line 80, in run_test
    self.generate(self.nodes[0], BLOCKS)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 648, in generate
    blocks = generator.generate(*args, invalid_call=False, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 303, in generate
    return self.generatetoaddress(nblocks=nblocks, address=self.get_deterministic_priv_key().address, maxtries=maxtries, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 311, in generatetoaddress
    return self.__getattr__('generatetoaddress')(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 108, in _request
    return self._get_response()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 168, in _get_response
    raise JSONRPCException({
test_framework.authproxy.JSONRPCException: 'generatetoaddress' RPC took longer than 30.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)
2022-08-07T19:04:52.649000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:04:52.765000Z TestFramework.node0 (ERROR): Unable to stop node.
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 336, in stop_node
    self.stop(wait=wait)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 107, in _request
    self.__conn.request(method, path, postdata, headers)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1252, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1263, in _send_request
    self.putrequest(method, url, **skips)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1089, in putrequest
    raise CannotSendRequest(self.__state)
http.client.CannotSendRequest: Request-sent
2022-08-07T19:05:52.819000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
'''
[node 0] Cleaning up leftover process


stderr:
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/interface_bitcoin_cli.py", line 326, in <module>
    TestBitcoinCli().main()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 156, in main
    exit_code = self.shutdown()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 311, in shutdown
    self.stop_nodes()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 571, in stop_nodes
    node.wait_until_stopped()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 382, in wait_until_stopped
    wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/util.py", line 281, in wait_until_helper
    raise AssertionError("Predicate {} not true after {} seconds".format(predicate_source, timeout))
AssertionError: Predicate ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
''' not true after 60.0 seconds


89/246 - wallet_labels.py --descriptors failed, Duration: 101 s

stdout:
2022-08-07T19:04:13.533000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/wallet_labels_229
2022-08-07T19:04:52.974000Z TestFramework (ERROR): JSONRPC error
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 166, in _get_response
    http_response = self.__conn.getresponse()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1344, in getresponse
    response.begin()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
socket.timeout: timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/wallet_labels.py", line 36, in run_test
    self.generatetoaddress(node, nblocks=COINBASE_MATURITY + 1, address=node.getnewaddress(label='coinbase'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 658, in generatetoaddress
    blocks = generator.generatetoaddress(*args, invalid_call=False, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 311, in generatetoaddress
    return self.__getattr__('generatetoaddress')(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 108, in _request
    return self._get_response()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 168, in _get_response
    raise JSONRPCException({
test_framework.authproxy.JSONRPCException: 'generatetoaddress' RPC took longer than 30.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)
2022-08-07T19:04:53.121000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:04:53.275000Z TestFramework.node0 (ERROR): Unable to stop node.
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 336, in stop_node
    self.stop(wait=wait)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 107, in _request
    self.__conn.request(method, path, postdata, headers)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1252, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1263, in _send_request
    self.putrequest(method, url, **skips)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1089, in putrequest
    raise CannotSendRequest(self.__state)
http.client.CannotSendRequest: Request-sent
2022-08-07T19:05:53.601000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
'''
[node 0] Cleaning up leftover process


stderr:
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/wallet_labels.py", line 206, in <module>
    WalletLabelsTest().main()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 156, in main
    exit_code = self.shutdown()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 311, in shutdown
    self.stop_nodes()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 571, in stop_nodes
    node.wait_until_stopped()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 382, in wait_until_stopped
    wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/util.py", line 281, in wait_until_helper
    raise AssertionError("Predicate {} not true after {} seconds".format(predicate_source, timeout))
AssertionError: Predicate ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
''' not true after 60.0 seconds


90/246 - mempool_resurrect.py failed, Duration: 100 s

stdout:
2022-08-07T19:04:14.148000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/mempool_resurrect_195
2022-08-07T19:04:52.578000Z TestFramework (ERROR): JSONRPC error
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 166, in _get_response
    http_response = self.__conn.getresponse()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1344, in getresponse
    response.begin()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
socket.timeout: timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/mempool_resurrect.py", line 24, in run_test
    self.generate(node, COINBASE_MATURITY)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 648, in generate
    blocks = generator.generate(*args, invalid_call=False, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 303, in generate
    return self.generatetoaddress(nblocks=nblocks, address=self.get_deterministic_priv_key().address, maxtries=maxtries, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 311, in generatetoaddress
    return self.__getattr__('generatetoaddress')(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 108, in _request
    return self._get_response()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 168, in _get_response
    raise JSONRPCException({
test_framework.authproxy.JSONRPCException: 'generatetoaddress' RPC took longer than 30.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)
2022-08-07T19:04:52.764000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:04:52.802000Z TestFramework.node0 (ERROR): Unable to stop node.
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 336, in stop_node
    self.stop(wait=wait)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 107, in _request
    self.__conn.request(method, path, postdata, headers)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1252, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1263, in _send_request
    self.putrequest(method, url, **skips)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1089, in putrequest
    raise CannotSendRequest(self.__state)
http.client.CannotSendRequest: Request-sent
2022-08-07T19:05:52.945000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
'''
[node 0] Cleaning up leftover process


stderr:
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/mempool_resurrect.py", line 64, in <module>
    MempoolCoinbaseTest().main()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 156, in main
    exit_code = self.shutdown()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 311, in shutdown
    self.stop_nodes()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 571, in stop_nodes
    node.wait_until_stopped()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 382, in wait_until_stopped
    wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/util.py", line 281, in wait_until_helper
    raise AssertionError("Predicate {} not true after {} seconds".format(predicate_source, timeout))
AssertionError: Predicate ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
''' not true after 60.0 seconds


91/246 - wallet_importprunedfunds.py --legacy-wallet skipped
92/246 - p2p_segwit.py failed, Duration: 102 s

stdout:
2022-08-07T19:04:13.589000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/p2p_segwit_228
2022-08-07T19:04:22.974000Z TestFramework (INFO): Starting tests before segwit activation
2022-08-07T19:04:23.077000Z TestFramework (INFO): Subtest: test_non_witness_transaction (Segwit active = False)
2022-08-07T19:04:53.732000Z TestFramework (ERROR): JSONRPC error
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 166, in _get_response
    http_response = self.__conn.getresponse()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1344, in getresponse
    response.begin()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
socket.timeout: timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/p2p_segwit.py", line 262, in run_test
    self.test_non_witness_transaction()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/p2p_segwit.py", line 112, in func_wrapper
    func(self, *args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/p2p_segwit.py", line 309, in test_non_witness_transaction
    self.generate(self.wallet, 99)  # let the block mature
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 648, in generate
    blocks = generator.generate(*args, invalid_call=False, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/wallet.py", line 163, in generate
    blocks = self._test_node.generatetodescriptor(num_blocks, self.get_descriptor(), **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 315, in generatetodescriptor
    return self.__getattr__('generatetodescriptor')(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 108, in _request
    return self._get_response()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 168, in _get_response
    raise JSONRPCException({
test_framework.authproxy.JSONRPCException: 'generatetodescriptor' RPC took longer than 30.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)
2022-08-07T19:04:53.818000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:04:53.883000Z TestFramework.node0 (ERROR): Unable to stop node.
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 336, in stop_node
    self.stop(wait=wait)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 107, in _request
    self.__conn.request(method, path, postdata, headers)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1252, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1263, in _send_request
    self.putrequest(method, url, **skips)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1089, in putrequest
    raise CannotSendRequest(self.__state)
http.client.CannotSendRequest: Request-sent
2022-08-07T19:05:54.524000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
'''
[node 1] Cleaning up leftover process
[node 0] Cleaning up leftover process


stderr:
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/p2p_segwit.py", line 2076, in <module>
    SegWitTest().main()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 156, in main
    exit_code = self.shutdown()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 311, in shutdown
    self.stop_nodes()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 571, in stop_nodes
    node.wait_until_stopped()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 382, in wait_until_stopped
    wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/util.py", line 281, in wait_until_helper
    raise AssertionError("Predicate {} not true after {} seconds".format(predicate_source, timeout))
AssertionError: Predicate ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
''' not true after 60.0 seconds


93/246 - p2p_invalid_locator.py passed, Duration: 32 s
94/246 - p2p_invalid_messages.py passed, Duration: 31 s
95/246 - wallet_balance.py --legacy-wallet skipped
96/246 - rpc_txoutproof.py failed, Duration: 105 s

stdout:
2022-08-07T19:04:13.533000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/rpc_txoutproof_217
2022-08-07T19:04:56.683000Z TestFramework (ERROR): JSONRPC error
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 166, in _get_response
    http_response = self.__conn.getresponse()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1344, in getresponse
    response.begin()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
socket.timeout: timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/rpc_txoutproof.py", line 33, in run_test
    self.generate(self.nodes[0], COINBASE_MATURITY)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 648, in generate
    blocks = generator.generate(*args, invalid_call=False, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 303, in generate
    return self.generatetoaddress(nblocks=nblocks, address=self.get_deterministic_priv_key().address, maxtries=maxtries, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 311, in generatetoaddress
    return self.__getattr__('generatetoaddress')(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 108, in _request
    return self._get_response()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 168, in _get_response
    raise JSONRPCException({
test_framework.authproxy.JSONRPCException: 'generatetoaddress' RPC took longer than 30.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)
2022-08-07T19:04:56.885000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:04:57.006000Z TestFramework.node0 (ERROR): Unable to stop node.
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 336, in stop_node
    self.stop(wait=wait)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 107, in _request
    self.__conn.request(method, path, postdata, headers)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1252, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1263, in _send_request
    self.putrequest(method, url, **skips)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1089, in putrequest
    raise CannotSendRequest(self.__state)
http.client.CannotSendRequest: Request-sent
2022-08-07T19:05:57.469000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
'''
[node 1] Cleaning up leftover process
[node 0] Cleaning up leftover process


stderr:
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/rpc_txoutproof.py", line 112, in <module>
    MerkleBlockTest().main()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 156, in main
    exit_code = self.shutdown()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 311, in shutdown
    self.stop_nodes()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 571, in stop_nodes
    node.wait_until_stopped()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 382, in wait_until_stopped
    wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/util.py", line 281, in wait_until_helper
    raise AssertionError("Predicate {} not true after {} seconds".format(predicate_source, timeout))
AssertionError: Predicate ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
''' not true after 60.0 seconds


97/246 - wallet_avoid_mixing_output_types.py --descriptors failed, Duration: 103 s

stdout:
2022-08-07T19:04:16.518000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/wallet_avoid_mixing_output_types_181
2022-08-07T19:04:59.103000Z TestFramework (ERROR): JSONRPC error
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 166, in _get_response
    http_response = self.__conn.getresponse()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1344, in getresponse
    response.begin()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
socket.timeout: timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/wallet_avoid_mixing_output_types.py", line 142, in run_test
    self.generate(A, COINBASE_MATURITY + 5)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 648, in generate
    blocks = generator.generate(*args, invalid_call=False, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 303, in generate
    return self.generatetoaddress(nblocks=nblocks, address=self.get_deterministic_priv_key().address, maxtries=maxtries, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 311, in generatetoaddress
    return self.__getattr__('generatetoaddress')(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 108, in _request
    return self._get_response()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 168, in _get_response
    raise JSONRPCException({
test_framework.authproxy.JSONRPCException: 'generatetoaddress' RPC took longer than 30.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)
2022-08-07T19:04:59.230000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:04:59.342000Z TestFramework.node0 (ERROR): Unable to stop node.
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 336, in stop_node
    self.stop(wait=wait)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 107, in _request
    self.__conn.request(method, path, postdata, headers)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1252, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1263, in _send_request
    self.putrequest(method, url, **skips)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1089, in putrequest
    raise CannotSendRequest(self.__state)
http.client.CannotSendRequest: Request-sent
2022-08-07T19:05:59.876000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
'''
[node 1] Cleaning up leftover process
[node 0] Cleaning up leftover process


stderr:
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/wallet_avoid_mixing_output_types.py", line 176, in <module>
    AddressInputTypeGrouping().main()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 156, in main
    exit_code = self.shutdown()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 311, in shutdown
    self.stop_nodes()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 571, in stop_nodes
    node.wait_until_stopped()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 382, in wait_until_stopped
    wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/util.py", line 281, in wait_until_helper
    raise AssertionError("Predicate {} not true after {} seconds".format(predicate_source, timeout))
AssertionError: Predicate ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
''' not true after 60.0 seconds


98/246 - rpc_getblockfrompeer.py passed, Duration: 14 s
99/246 - rpc_signmessagewithprivkey.py passed, Duration: 6 s
100/246 - rpc_getblockfilter.py passed, Duration: 16 s
101/246 - wallet_import_rescan.py --legacy-wallet skipped
102/246 - wallet_keypool_topup.py --descriptors failed, Duration: 110 s

stdout:
2022-08-07T19:04:13.743000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/wallet_keypool_topup_202
2022-08-07T19:05:02.145000Z TestFramework (ERROR): JSONRPC error
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 166, in _get_response
    http_response = self.__conn.getresponse()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1344, in getresponse
    response.begin()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
socket.timeout: timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/wallet_keypool_topup.py", line 35, in run_test
    self.generate(self.nodes[0], COINBASE_MATURITY + 1)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 648, in generate
    blocks = generator.generate(*args, invalid_call=False, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 303, in generate
    return self.generatetoaddress(nblocks=nblocks, address=self.get_deterministic_priv_key().address, maxtries=maxtries, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 311, in generatetoaddress
    return self.__getattr__('generatetoaddress')(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 108, in _request
    return self._get_response()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 168, in _get_response
    raise JSONRPCException({
test_framework.authproxy.JSONRPCException: 'generatetoaddress' RPC took longer than 30.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)
2022-08-07T19:05:02.246000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:05:02.321000Z TestFramework.node0 (ERROR): Unable to stop node.
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 336, in stop_node
    self.stop(wait=wait)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 107, in _request
    self.__conn.request(method, path, postdata, headers)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1252, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1263, in _send_request
    self.putrequest(method, url, **skips)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1089, in putrequest
    raise CannotSendRequest(self.__state)
http.client.CannotSendRequest: Request-sent
2022-08-07T19:06:03.085000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
'''
[node 3] Cleaning up leftover process
[node 2] Cleaning up leftover process
[node 1] Cleaning up leftover process
[node 0] Cleaning up leftover process


stderr:
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/wallet_keypool_topup.py", line 93, in <module>
    KeypoolRestoreTest().main()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 156, in main
    exit_code = self.shutdown()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 311, in shutdown
    self.stop_nodes()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 571, in stop_nodes
    node.wait_until_stopped()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 382, in wait_until_stopped
    wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/util.py", line 281, in wait_until_helper
    raise AssertionError("Predicate {} not true after {} seconds".format(predicate_source, timeout))
AssertionError: Predicate ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
''' not true after 60.0 seconds


103/246 - wallet_txn_doublespend.py --descriptors passed, Duration: 21 s
104/246 - wallet_signmessagewithaddress.py passed, Duration: 8 s
105/246 - wallet_import_with_label.py --legacy-wallet skipped
106/246 - mempool_package_onemore.py passed, Duration: 13 s
107/246 - wallet_upgradewallet.py --legacy-wallet skipped
108/246 - rpc_bind.py --nonloopback skipped
109/246 - rpc_bind.py --ipv4 skipped
110/246 - rpc_bind.py --ipv6 skipped
111/246 - wallet_bumpfee.py --legacy-wallet skipped
112/246 - wallet_txn_clone.py --mineblock passed, Duration: 23 s
113/246 - feature_bip68_sequence.py failed, Duration: 113 s

stdout:
2022-08-07T19:04:13.746000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/feature_bip68_sequence_208
2022-08-07T19:05:05.731000Z TestFramework (ERROR): JSONRPC error
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 166, in _get_response
    http_response = self.__conn.getresponse()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1344, in getresponse
    response.begin()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
socket.timeout: timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/feature_bip68_sequence.py", line 60, in run_test
    self.generate(self.nodes[0], 110)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 648, in generate
    blocks = generator.generate(*args, invalid_call=False, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 303, in generate
    return self.generatetoaddress(nblocks=nblocks, address=self.get_deterministic_priv_key().address, maxtries=maxtries, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 311, in generatetoaddress
    return self.__getattr__('generatetoaddress')(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 108, in _request
    return self._get_response()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 168, in _get_response
    raise JSONRPCException({
test_framework.authproxy.JSONRPCException: 'generatetoaddress' RPC took longer than 30.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)
2022-08-07T19:05:05.846000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:05:05.919000Z TestFramework.node0 (ERROR): Unable to stop node.
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 336, in stop_node
    self.stop(wait=wait)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 107, in _request
    self.__conn.request(method, path, postdata, headers)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1252, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1263, in _send_request
    self.putrequest(method, url, **skips)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1089, in putrequest
    raise CannotSendRequest(self.__state)
http.client.CannotSendRequest: Request-sent
2022-08-07T19:06:06.184000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
'''
[node 1] Cleaning up leftover process
[node 0] Cleaning up leftover process


stderr:
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/feature_bip68_sequence.py", line 422, in <module>
    BIP68Test().main()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 156, in main
    exit_code = self.shutdown()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 311, in shutdown
    self.stop_nodes()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 571, in stop_nodes
    node.wait_until_stopped()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 382, in wait_until_stopped
    wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/util.py", line 281, in wait_until_helper
    raise AssertionError("Predicate {} not true after {} seconds".format(predicate_source, timeout))
AssertionError: Predicate ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
''' not true after 60.0 seconds


114/246 - wallet_implicitsegwit.py --legacy-wallet skipped
115/246 - wallet_simulaterawtx.py --legacy-wallet skipped
116/246 - wallet_abandonconflict.py --descriptors failed, Duration: 116 s

stdout:
2022-08-07T19:04:13.723000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/wallet_abandonconflict_212
2022-08-07T19:05:05.600000Z TestFramework (ERROR): JSONRPC error
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 166, in _get_response
    http_response = self.__conn.getresponse()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1344, in getresponse
    response.begin()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
socket.timeout: timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/wallet_abandonconflict.py", line 37, in run_test
    self.generate(self.nodes[1], COINBASE_MATURITY)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 648, in generate
    blocks = generator.generate(*args, invalid_call=False, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 303, in generate
    return self.generatetoaddress(nblocks=nblocks, address=self.get_deterministic_priv_key().address, maxtries=maxtries, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 311, in generatetoaddress
    return self.__getattr__('generatetoaddress')(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 108, in _request
    return self._get_response()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 168, in _get_response
    raise JSONRPCException({
test_framework.authproxy.JSONRPCException: 'generatetoaddress' RPC took longer than 30.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)
2022-08-07T19:05:05.724000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:05:06.191000Z TestFramework.node1 (ERROR): Unable to stop node.
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 336, in stop_node
    self.stop(wait=wait)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 107, in _request
    self.__conn.request(method, path, postdata, headers)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1252, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1263, in _send_request
    self.putrequest(method, url, **skips)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1089, in putrequest
    raise CannotSendRequest(self.__state)
http.client.CannotSendRequest: Request-sent
2022-08-07T19:06:09.733000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
'''
[node 1] Cleaning up leftover process


stderr:
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/wallet_abandonconflict.py", line 239, in <module>
    AbandonConflictTest().main()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 156, in main
    exit_code = self.shutdown()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 311, in shutdown
    self.stop_nodes()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 571, in stop_nodes
    node.wait_until_stopped()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 382, in wait_until_stopped
    wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/util.py", line 281, in wait_until_helper
    raise AssertionError("Predicate {} not true after {} seconds".format(predicate_source, timeout))
AssertionError: Predicate ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
''' not true after 60.0 seconds


117/246 - rpc_generate.py passed, Duration: 14 s
118/246 - mining_getblocktemplate_longpoll.py failed, Duration: 117 s

stdout:
2022-08-07T19:04:13.167000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/mining_getblocktemplate_longpoll_241
2022-08-07T19:04:20.210000Z TestFramework (INFO): Warning: this test will take about 70 seconds in the best case. Be patient.
2022-08-07T19:04:20.216000Z TestFramework (INFO): Test that longpollid doesn't change between successive getblocktemplate() invocations if nothing else happens
2022-08-07T19:04:28.592000Z TestFramework (INFO): Test that longpoll waits if we do nothing
2022-08-07T19:04:33.871000Z TestFramework (INFO): Test that longpoll will terminate if another node generates a block
2022-08-07T19:04:38.223000Z TestFramework (INFO): Test that longpoll will terminate if we generate a block ourselves
2022-08-07T19:05:09.908000Z TestFramework (ERROR): JSONRPC error
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 166, in _get_response
    http_response = self.__conn.getresponse()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1344, in getresponse
    response.begin()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
socket.timeout: timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/mining_getblocktemplate_longpoll.py", line 66, in run_test
    self.generate(self.nodes[0], COINBASE_MATURITY)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 648, in generate
    blocks = generator.generate(*args, invalid_call=False, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 303, in generate
    return self.generatetoaddress(nblocks=nblocks, address=self.get_deterministic_priv_key().address, maxtries=maxtries, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 311, in generatetoaddress
    return self.__getattr__('generatetoaddress')(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 108, in _request
    return self._get_response()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 168, in _get_response
    raise JSONRPCException({
test_framework.authproxy.JSONRPCException: 'generatetoaddress' RPC took longer than 30.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)
2022-08-07T19:05:10.018000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:05:10.023000Z TestFramework.node0 (ERROR): Unable to stop node.
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 336, in stop_node
    self.stop(wait=wait)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 107, in _request
    self.__conn.request(method, path, postdata, headers)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1252, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1263, in _send_request
    self.putrequest(method, url, **skips)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1089, in putrequest
    raise CannotSendRequest(self.__state)
http.client.CannotSendRequest: Request-sent
2022-08-07T19:06:10.366000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
'''
[node 1] Cleaning up leftover process
[node 0] Cleaning up leftover process


stderr:
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/mining_getblocktemplate_longpoll.py", line 81, in <module>
    GetBlockTemplateLPTest().main()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 156, in main
    exit_code = self.shutdown()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 311, in shutdown
    self.stop_nodes()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 571, in stop_nodes
    node.wait_until_stopped()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 382, in wait_until_stopped
    wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/util.py", line 281, in wait_until_helper
    raise AssertionError("Predicate {} not true after {} seconds".format(predicate_source, timeout))
AssertionError: Predicate ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
''' not true after 60.0 seconds


119/246 - rpc_invalidateblock.py passed, Duration: 22 s
120/246 - wallet_listsinceblock.py --legacy-wallet skipped
121/246 - wallet_encryption.py --legacy-wallet skipped
122/246 - wallet_basic.py --descriptors failed, Duration: 119 s

stdout:
2022-08-07T19:04:13.532000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/wallet_basic_231
2022-08-07T19:04:35.849000Z TestFramework (INFO): Mining blocks...
2022-08-07T19:05:08.806000Z TestFramework (ERROR): JSONRPC error
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 166, in _get_response
    http_response = self.__conn.getresponse()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1344, in getresponse
    response.begin()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
socket.timeout: timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/wallet_basic.py", line 70, in run_test
    self.generate(self.nodes[1], COINBASE_MATURITY + 1, sync_fun=lambda: self.sync_all(self.nodes[0:3]))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 648, in generate
    blocks = generator.generate(*args, invalid_call=False, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 303, in generate
    return self.generatetoaddress(nblocks=nblocks, address=self.get_deterministic_priv_key().address, maxtries=maxtries, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 311, in generatetoaddress
    return self.__getattr__('generatetoaddress')(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 108, in _request
    return self._get_response()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 168, in _get_response
    raise JSONRPCException({
test_framework.authproxy.JSONRPCException: 'generatetoaddress' RPC took longer than 30.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)
2022-08-07T19:05:08.903000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:05:09.278000Z TestFramework.node1 (ERROR): Unable to stop node.
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 336, in stop_node
    self.stop(wait=wait)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 107, in _request
    self.__conn.request(method, path, postdata, headers)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1252, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1263, in _send_request
    self.putrequest(method, url, **skips)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1089, in putrequest
    raise CannotSendRequest(self.__state)
http.client.CannotSendRequest: Request-sent
2022-08-07T19:06:11.943000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
'''
[node 2] Cleaning up leftover process
[node 1] Cleaning up leftover process


stderr:
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/wallet_basic.py", line 705, in <module>
    WalletTest().main()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 156, in main
    exit_code = self.shutdown()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 311, in shutdown
    self.stop_nodes()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 571, in stop_nodes
    node.wait_until_stopped()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 382, in wait_until_stopped
    wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/util.py", line 281, in wait_until_helper
    raise AssertionError("Predicate {} not true after {} seconds".format(predicate_source, timeout))
AssertionError: Predicate ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
''' not true after 60.0 seconds


123/246 - wallet_crosschain.py passed, Duration: 8 s
124/246 - mining_prioritisetransaction.py passed, Duration: 51 s
125/246 - rpc_signrawtransactionwithkey.py failed, Duration: 98 s

stdout:
2022-08-07T19:04:37.189000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/rpc_signrawtransactionwithkey_152
2022-08-07T19:04:43.945000Z TestFramework (INFO): Test valid raw transaction with one input
2022-08-07T19:04:44.125000Z TestFramework (INFO): Test signing transaction to P2SH-P2WSH addresses without wallet
2022-08-07T19:05:14.240000Z TestFramework (ERROR): JSONRPC error
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 166, in _get_response
    http_response = self.__conn.getresponse()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1344, in getresponse
    response.begin()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
socket.timeout: timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/rpc_signrawtransactionwithkey.py", line 136, in run_test
    self.witness_script_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/rpc_signrawtransactionwithkey.py", line 88, in witness_script_test
    self.block_hash = self.generate(self.nodes[0], COINBASE_MATURITY + 1)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 648, in generate
    blocks = generator.generate(*args, invalid_call=False, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 303, in generate
    return self.generatetoaddress(nblocks=nblocks, address=self.get_deterministic_priv_key().address, maxtries=maxtries, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 311, in generatetoaddress
    return self.__getattr__('generatetoaddress')(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 108, in _request
    return self._get_response()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 168, in _get_response
    raise JSONRPCException({
test_framework.authproxy.JSONRPCException: 'generatetoaddress' RPC took longer than 30.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)
2022-08-07T19:05:14.361000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:05:14.456000Z TestFramework.node0 (ERROR): Unable to stop node.
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 336, in stop_node
    self.stop(wait=wait)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 107, in _request
    self.__conn.request(method, path, postdata, headers)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1252, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1263, in _send_request
    self.putrequest(method, url, **skips)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1089, in putrequest
    raise CannotSendRequest(self.__state)
http.client.CannotSendRequest: Request-sent
2022-08-07T19:06:14.721000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
'''
[node 1] Cleaning up leftover process
[node 0] Cleaning up leftover process


stderr:
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/rpc_signrawtransactionwithkey.py", line 140, in <module>
    SignRawTransactionWithKeyTest().main()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 156, in main
    exit_code = self.shutdown()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 311, in shutdown
    self.stop_nodes()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 571, in stop_nodes
    node.wait_until_stopped()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 382, in wait_until_stopped
    wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/util.py", line 281, in wait_until_helper
    raise AssertionError("Predicate {} not true after {} seconds".format(predicate_source, timeout))
AssertionError: Predicate ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
''' not true after 60.0 seconds


126/246 - p2p_invalid_tx.py passed, Duration: 50 s
127/246 - rpc_named_arguments.py passed, Duration: 8 s
128/246 - wallet_resendwallettransactions.py --legacy-wallet skipped
129/246 - wallet_fallbackfee.py --legacy-wallet skipped
130/246 - mempool_accept.py passed, Duration: 18 s
131/246 - wallet_signrawtransactionwithwallet.py --descriptors failed, Duration: 104 s

stdout:
2022-08-07T19:04:35.115000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/wallet_signrawtransactionwithwallet_153
2022-08-07T19:04:46.462000Z TestFramework (INFO): Test script verification errors
2022-08-07T19:04:46.775000Z TestFramework (INFO): Test OP_1NEGATE (0x4f) satisfies BIP62 minimal push standardness rule
2022-08-07T19:04:46.819000Z TestFramework (INFO): Test correct error reporting when trying to sign a locked output
2022-08-07T19:04:47.649000Z TestFramework (INFO): Test signing a fully signed transaction does nothing
2022-08-07T19:05:17.912000Z TestFramework (ERROR): JSONRPC error
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 166, in _get_response
    http_response = self.__conn.getresponse()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1344, in getresponse
    response.begin()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
socket.timeout: timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/wallet_signrawtransactionwithwallet.py", line 299, in run_test
    self.test_fully_signed_tx()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/wallet_signrawtransactionwithwallet.py", line 146, in test_fully_signed_tx
    self.generate(self.nodes[0], COINBASE_MATURITY + 1)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 648, in generate
    blocks = generator.generate(*args, invalid_call=False, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 303, in generate
    return self.generatetoaddress(nblocks=nblocks, address=self.get_deterministic_priv_key().address, maxtries=maxtries, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 311, in generatetoaddress
    return self.__getattr__('generatetoaddress')(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 108, in _request
    return self._get_response()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 168, in _get_response
    raise JSONRPCException({
test_framework.authproxy.JSONRPCException: 'generatetoaddress' RPC took longer than 30.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)
2022-08-07T19:05:18.025000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:05:18.125000Z TestFramework.node0 (ERROR): Unable to stop node.
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 336, in stop_node
    self.stop(wait=wait)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 107, in _request
    self.__conn.request(method, path, postdata, headers)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1252, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1263, in _send_request
    self.putrequest(method, url, **skips)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1089, in putrequest
    raise CannotSendRequest(self.__state)
http.client.CannotSendRequest: Request-sent
2022-08-07T19:06:18.732000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
'''
[node 1] Cleaning up leftover process
[node 0] Cleaning up leftover process


stderr:
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/wallet_signrawtransactionwithwallet.py", line 306, in <module>
    SignRawTransactionWithWalletTest().main()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 156, in main
    exit_code = self.shutdown()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 311, in shutdown
    self.stop_nodes()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 571, in stop_nodes
    node.wait_until_stopped()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 382, in wait_until_stopped
    wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/util.py", line 281, in wait_until_helper
    raise AssertionError("Predicate {} not true after {} seconds".format(predicate_source, timeout))
AssertionError: Predicate ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
''' not true after 60.0 seconds


132/246 - feature_startupnotify.py passed, Duration: 12 s
133/246 - wallet_multisig_descriptor_psbt.py passed, Duration: 42 s
134/246 - feature_utxo_set_hash.py passed, Duration: 31 s
135/246 - p2p_leak_tx.py passed, Duration: 25 s
136/246 - rpc_uptime.py passed, Duration: 7 s
137/246 - feature_bind_port_externalip.py skipped
138/246 - wallet_send.py --legacy-wallet skipped
139/246 - wallet_create_tx.py --legacy-wallet skipped
140/246 - wallet_sendall.py --legacy-wallet skipped
141/246 - wallet_avoidreuse.py --descriptors failed, Duration: 126 s

stdout:
2022-08-07T19:04:16.433000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/wallet_avoidreuse_182
2022-08-07T19:04:38.830000Z TestFramework (INFO): Test wallet files persist avoid_reuse flag
2022-08-07T19:04:49.513000Z TestFramework (INFO): Test immutable wallet flags
2022-08-07T19:05:20.804000Z TestFramework (ERROR): JSONRPC error
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 166, in _get_response
    http_response = self.__conn.getresponse()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1344, in getresponse
    response.begin()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
socket.timeout: timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/wallet_avoidreuse.py", line 82, in run_test
    self.generate(self.nodes[0], 110)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 648, in generate
    blocks = generator.generate(*args, invalid_call=False, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 303, in generate
    return self.generatetoaddress(nblocks=nblocks, address=self.get_deterministic_priv_key().address, maxtries=maxtries, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 311, in generatetoaddress
    return self.__getattr__('generatetoaddress')(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 108, in _request
    return self._get_response()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 168, in _get_response
    raise JSONRPCException({
test_framework.authproxy.JSONRPCException: 'generatetoaddress' RPC took longer than 30.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)
2022-08-07T19:05:20.900000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:05:20.989000Z TestFramework.node0 (ERROR): Unable to stop node.
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 336, in stop_node
    self.stop(wait=wait)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 107, in _request
    self.__conn.request(method, path, postdata, headers)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1252, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1263, in _send_request
    self.putrequest(method, url, **skips)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1089, in putrequest
    raise CannotSendRequest(self.__state)
http.client.CannotSendRequest: Request-sent
2022-08-07T19:06:21.938000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
'''
[node 1] Cleaning up leftover process
[node 0] Cleaning up leftover process


stderr:
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/wallet_avoidreuse.py", line 380, in <module>
    AvoidReuseTest().main()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 156, in main
    exit_code = self.shutdown()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 311, in shutdown
    self.stop_nodes()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 571, in stop_nodes
    node.wait_until_stopped()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 382, in wait_until_stopped
    wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/util.py", line 281, in wait_until_helper
    raise AssertionError("Predicate {} not true after {} seconds".format(predicate_source, timeout))
AssertionError: Predicate ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
''' not true after 60.0 seconds


142/246 - p2p_feefilter.py failed, Duration: 129 s

stdout:
2022-08-07T19:04:13.750000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/p2p_feefilter_207
2022-08-07T19:04:26.019000Z TestFramework (INFO): Check that peers without forcerelay permission (default) get a feefilter message
2022-08-07T19:04:27.269000Z TestFramework (INFO): Check that peers with forcerelay permission do not get a feefilter message
2022-08-07T19:05:18.139000Z TestFramework (ERROR): JSONRPC error
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 166, in _get_response
    http_response = self.__conn.getresponse()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1344, in getresponse
    response.begin()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
socket.timeout: timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/p2p_feefilter.py", line 64, in run_test
    self.test_feefilter()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/p2p_feefilter.py", line 85, in test_feefilter
    self.generate(node1, COINBASE_MATURITY)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 648, in generate
    blocks = generator.generate(*args, invalid_call=False, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 303, in generate
    return self.generatetoaddress(nblocks=nblocks, address=self.get_deterministic_priv_key().address, maxtries=maxtries, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 311, in generatetoaddress
    return self.__getattr__('generatetoaddress')(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 108, in _request
    return self._get_response()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 168, in _get_response
    raise JSONRPCException({
test_framework.authproxy.JSONRPCException: 'generatetoaddress' RPC took longer than 30.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)
2022-08-07T19:05:18.261000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:05:19.092000Z TestFramework.node1 (ERROR): Unable to stop node.
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 336, in stop_node
    self.stop(wait=wait)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 107, in _request
    self.__conn.request(method, path, postdata, headers)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1252, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1263, in _send_request
    self.putrequest(method, url, **skips)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1089, in putrequest
    raise CannotSendRequest(self.__state)
http.client.CannotSendRequest: Request-sent
2022-08-07T19:06:22.299000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
'''
[node 1] Cleaning up leftover process


stderr:
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/p2p_feefilter.py", line 139, in <module>
    FeeFilterTest().main()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 156, in main
    exit_code = self.shutdown()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 311, in shutdown
    self.stop_nodes()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 571, in stop_nodes
    node.wait_until_stopped()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 382, in wait_until_stopped
    wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/util.py", line 281, in wait_until_helper
    raise AssertionError("Predicate {} not true after {} seconds".format(predicate_source, timeout))
AssertionError: Predicate ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
''' not true after 60.0 seconds


143/246 - rpc_preciousblock.py passed, Duration: 31 s
144/246 - wallet_inactive_hdchains.py skipped
145/246 - rpc_fundrawtransaction.py --descriptors failed, Duration: 131 s

stdout:
2022-08-07T19:04:13.470000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/rpc_fundrawtransaction_237
2022-08-07T19:04:31.881000Z TestFramework (INFO): Connect nodes, set fees, generate blocks, and sync
2022-08-07T19:05:22.402000Z TestFramework (ERROR): JSONRPC error
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 166, in _get_response
    http_response = self.__conn.getresponse()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1344, in getresponse
    response.begin()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
socket.timeout: timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/rpc_fundrawtransaction.py", line 107, in run_test
    self.generate(self.nodes[0], 121)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 648, in generate
    blocks = generator.generate(*args, invalid_call=False, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 303, in generate
    return self.generatetoaddress(nblocks=nblocks, address=self.get_deterministic_priv_key().address, maxtries=maxtries, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 311, in generatetoaddress
    return self.__getattr__('generatetoaddress')(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 108, in _request
    return self._get_response()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 168, in _get_response
    raise JSONRPCException({
test_framework.authproxy.JSONRPCException: 'generatetoaddress' RPC took longer than 45.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)
2022-08-07T19:05:22.492000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:05:22.552000Z TestFramework.node0 (ERROR): Unable to stop node.
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 336, in stop_node
    self.stop(wait=wait)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 107, in _request
    self.__conn.request(method, path, postdata, headers)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1252, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1263, in _send_request
    self.putrequest(method, url, **skips)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1089, in putrequest
    raise CannotSendRequest(self.__state)
http.client.CannotSendRequest: Request-sent
2022-08-07T19:06:23.618000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
'''
[node 3] Cleaning up leftover process
[node 2] Cleaning up leftover process
[node 1] Cleaning up leftover process
[node 0] Cleaning up leftover process


stderr:
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/rpc_fundrawtransaction.py", line 1216, in <module>
    RawTransactionsTest().main()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 156, in main
    exit_code = self.shutdown()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 311, in shutdown
    self.stop_nodes()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 571, in stop_nodes
    node.wait_until_stopped()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 382, in wait_until_stopped
    wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/util.py", line 281, in wait_until_helper
    raise AssertionError("Predicate {} not true after {} seconds".format(predicate_source, timeout))
AssertionError: Predicate ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
''' not true after 60.0 seconds


146/246 - feature_nulldummy.py passed, Duration: 27 s
147/246 - wallet_coinbase_category.py --legacy-wallet skipped
148/246 - p2p_leak.py passed, Duration: 15 s
149/246 - wallet_listdescriptors.py --descriptors passed, Duration: 16 s
150/246 - wallet_encryption.py --descriptors passed, Duration: 16 s
151/246 - rpc_estimatefee.py passed, Duration: 10 s
152/246 - feature_segwit.py --descriptors failed, Duration: 137 s

stdout:
2022-08-07T19:04:13.453000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/feature_segwit_233
2022-08-07T19:05:29.611000Z TestFramework (ERROR): JSONRPC error
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 166, in _get_response
    http_response = self.__conn.getresponse()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1344, in getresponse
    response.begin()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
socket.timeout: timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/feature_segwit.py", line 124, in run_test
    self.generate(self.nodes[0], 161)  # block 161
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 648, in generate
    blocks = generator.generate(*args, invalid_call=False, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 303, in generate
    return self.generatetoaddress(nblocks=nblocks, address=self.get_deterministic_priv_key().address, maxtries=maxtries, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 311, in generatetoaddress
    return self.__getattr__('generatetoaddress')(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 108, in _request
    return self._get_response()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 168, in _get_response
    raise JSONRPCException({
test_framework.authproxy.JSONRPCException: 'generatetoaddress' RPC took longer than 60.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)
2022-08-07T19:05:29.715000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:05:29.737000Z TestFramework.node0 (ERROR): Unable to stop node.
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 336, in stop_node
    self.stop(wait=wait)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 107, in _request
    self.__conn.request(method, path, postdata, headers)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1252, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1263, in _send_request
    self.putrequest(method, url, **skips)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1089, in putrequest
    raise CannotSendRequest(self.__state)
http.client.CannotSendRequest: Request-sent
2022-08-07T19:06:29.895000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
'''
[node 2] Cleaning up leftover process
[node 1] Cleaning up leftover process
[node 0] Cleaning up leftover process


stderr:
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/feature_segwit.py", line 674, in <module>
    SegWitTest().main()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 156, in main
    exit_code = self.shutdown()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 311, in shutdown
    self.stop_nodes()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 571, in stop_nodes
    node.wait_until_stopped()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 382, in wait_until_stopped
    wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/util.py", line 281, in wait_until_helper
    raise AssertionError("Predicate {} not true after {} seconds".format(predicate_source, timeout))
AssertionError: Predicate ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
''' not true after 60.0 seconds


153/246 - feature_signet.py passed, Duration: 25 s
154/246 - feature_bind_port_discover.py skipped
155/246 - p2p_compactblocks_hb.py passed, Duration: 104 s
156/246 - rpc_rawtransaction.py --legacy-wallet failed, Duration: 114 s

stdout:
2022-08-07T19:04:39.757000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/rpc_rawtransaction_151
2022-08-07T19:04:49.729000Z TestFramework (INFO): Prepare some coins for multiple *rawtransaction commands
2022-08-07T19:05:32.666000Z TestFramework (ERROR): JSONRPC error
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 166, in _get_response
    http_response = self.__conn.getresponse()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1344, in getresponse
    response.begin()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
socket.timeout: timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/rpc_rawtransaction.py", line 80, in run_test
    self.generate(self.nodes[0], COINBASE_MATURITY + 1)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 648, in generate
    blocks = generator.generate(*args, invalid_call=False, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 303, in generate
    return self.generatetoaddress(nblocks=nblocks, address=self.get_deterministic_priv_key().address, maxtries=maxtries, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 311, in generatetoaddress
    return self.__getattr__('generatetoaddress')(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 108, in _request
    return self._get_response()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 168, in _get_response
    raise JSONRPCException({
test_framework.authproxy.JSONRPCException: 'generatetoaddress' RPC took longer than 30.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)
2022-08-07T19:05:32.828000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:05:32.927000Z TestFramework.node0 (ERROR): Unable to stop node.
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 336, in stop_node
    self.stop(wait=wait)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 107, in _request
    self.__conn.request(method, path, postdata, headers)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1252, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1263, in _send_request
    self.putrequest(method, url, **skips)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1089, in putrequest
    raise CannotSendRequest(self.__state)
http.client.CannotSendRequest: Request-sent
2022-08-07T19:06:33.243000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
'''
[node 2] Cleaning up leftover process
[node 1] Cleaning up leftover process
[node 0] Cleaning up leftover process


stderr:
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/rpc_rawtransaction.py", line 465, in <module>
    RawTransactionsTest().main()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 156, in main
    exit_code = self.shutdown()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 311, in shutdown
    self.stop_nodes()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 571, in stop_nodes
    node.wait_until_stopped()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 382, in wait_until_stopped
    wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/util.py", line 281, in wait_until_helper
    raise AssertionError("Predicate {} not true after {} seconds".format(predicate_source, timeout))
AssertionError: Predicate ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
''' not true after 60.0 seconds


157/246 - wallet_resendwallettransactions.py --descriptors passed, Duration: 21 s
158/246 - feature_filelock.py passed, Duration: 11 s
159/246 - p2p_eviction.py passed, Duration: 43 s
160/246 - p2p_fingerprint.py passed, Duration: 15 s
161/246 - mempool_compatibility.py skipped
162/246 - p2p_message_capture.py passed, Duration: 8 s
163/246 - wallet_importprunedfunds.py --descriptors passed, Duration: 50 s
164/246 - p2p_dos_header_tree.py passed, Duration: 16 s
165/246 - feature_notifications.py passed, Duration: 62 s
166/246 - wallet_simulaterawtx.py --descriptors passed, Duration: 37 s
167/246 - wallet_descriptor.py --descriptors passed, Duration: 99 s
168/246 - rpc_dumptxoutset.py passed, Duration: 30 s
169/246 - rpc_deriveaddresses.py passed, Duration: 8 s
170/246 - feature_txindex_compatibility.py skipped
171/246 - feature_unsupported_utxo_db.py skipped
172/246 - p2p_sendheaders.py passed, Duration: 155 s
173/246 - feature_uacomment.py passed, Duration: 25 s
174/246 - rpc_deriveaddresses.py --usecli passed, Duration: 9 s
175/246 - feature_includeconf.py passed, Duration: 20 s
176/246 - p2p_ping.py passed, Duration: 10 s
177/246 - wallet_fallbackfee.py --descriptors passed, Duration: 40 s
178/246 - feature_cltv.py passed, Duration: 44 s
179/246 - feature_dersig.py passed, Duration: 45 s
180/246 - wallet_timelock.py passed, Duration: 17 s
181/246 - mempool_expiry.py passed, Duration: 64 s
182/246 - wallet_multiwallet.py --descriptors passed, Duration: 170 s
183/246 - wallet_coinbase_category.py --descriptors passed, Duration: 42 s
184/246 - rpc_psbt.py --descriptors passed, Duration: 163 s
185/246 - p2p_i2p_ports.py passed, Duration: 14 s
186/246 - wallet_multiwallet.py --usecli passed, Duration: 172 s
187/246 - rpc_getblockstats.py passed, Duration: 50 s
Remaining jobs: [wallet_backup.py --descriptors, feature_block.py, p2p_tx_download.py, mempool_updatefromblock.py, p2p_dns_seeds.py, wallet_address_types.py --descriptors, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, wallet_groups.py --descriptors, rpc_blockchain.py, p2p_addr_relay.py, p2p_getaddr_caching.py, rpc_net.py, feature_maxtipage.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, feature_rbf.py --descriptors, mempool_packages.py, rpc_createmultisig.py, mempool_package_limits.py, feature_versionbits_warning.py, wallet_balance.py --descriptors, wallet_importdescriptors.py --descriptors, mining_basic.py, wallet_bumpfee.py --descriptors, wallet_listsinceblock.py --descriptors, feature_minchainwork.py, wallet_send.py --descriptors, wallet_sendall.py --descriptors, wallet_create_tx.py --descriptors, wallet_taproot.py, feature_init.py, feature_loadblock.py, p2p_add_connections.py, p2p_unrequested_blocks.py, p2p_blockfilters.py, feature_addrman.py, feature_asmap.py, mempool_unbroadcast.py, mempool_accept_wtxid.py, rpc_scantxoutset.py, feature_logging.py, feature_anchors.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py, feature_blocksdir.py, wallet_startup.py, feature_config_args.py, feature_presegwit_node_upgrade.py, feature_settings.py, rpc_getdescriptorinfo.py, rpc_mempool_info.py, rpc_help.py, feature_dirsymlinks.py, feature_help.py, feature_shutdown.py, p2p_ibd_txrelay.py]
188/246 - feature_blocksdir.py passed, Duration: 21 s
Remaining jobs: [wallet_backup.py --descriptors, feature_block.py, p2p_tx_download.py, mempool_updatefromblock.py, p2p_dns_seeds.py, wallet_address_types.py --descriptors, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, wallet_groups.py --descriptors, rpc_blockchain.py, p2p_addr_relay.py, p2p_getaddr_caching.py, rpc_net.py, feature_maxtipage.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, feature_rbf.py --descriptors, mempool_packages.py, rpc_createmultisig.py, mempool_package_limits.py, feature_versionbits_warning.py, wallet_balance.py --descriptors, wallet_importdescriptors.py --descriptors, mining_basic.py, wallet_bumpfee.py --descriptors, wallet_listsinceblock.py --descriptors, feature_minchainwork.py, wallet_send.py --descriptors, wallet_sendall.py --descriptors, wallet_create_tx.py --descriptors, wallet_taproot.py, feature_init.py, feature_loadblock.py, p2p_add_connections.py, p2p_unrequested_blocks.py, p2p_blockfilters.py, feature_addrman.py, feature_asmap.py, mempool_unbroadcast.py, mempool_accept_wtxid.py, rpc_scantxoutset.py, feature_logging.py, feature_anchors.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py, wallet_startup.py, feature_config_args.py, feature_presegwit_node_upgrade.py, feature_settings.py, rpc_getdescriptorinfo.py, rpc_mempool_info.py, rpc_help.py, feature_dirsymlinks.py, feature_help.py, feature_shutdown.py, p2p_ibd_txrelay.py]
189/246 - feature_anchors.py passed, Duration: 24 s
190/246 - feature_help.py passed, Duration: 2 s
Remaining jobs: [wallet_backup.py --descriptors, feature_block.py, p2p_tx_download.py, mempool_updatefromblock.py, p2p_dns_seeds.py, wallet_address_types.py --descriptors, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, wallet_groups.py --descriptors, rpc_blockchain.py, p2p_addr_relay.py, p2p_getaddr_caching.py, rpc_net.py, feature_maxtipage.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, feature_rbf.py --descriptors, mempool_packages.py, rpc_createmultisig.py, mempool_package_limits.py, feature_versionbits_warning.py, wallet_balance.py --descriptors, wallet_importdescriptors.py --descriptors, mining_basic.py, wallet_bumpfee.py --descriptors, wallet_listsinceblock.py --descriptors, feature_minchainwork.py, wallet_send.py --descriptors, wallet_sendall.py --descriptors, wallet_create_tx.py --descriptors, wallet_taproot.py, feature_init.py, feature_loadblock.py, p2p_add_connections.py, p2p_unrequested_blocks.py, p2p_blockfilters.py, feature_addrman.py, feature_asmap.py, mempool_unbroadcast.py, mempool_accept_wtxid.py, rpc_scantxoutset.py, feature_logging.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py, wallet_startup.py, feature_config_args.py, feature_presegwit_node_upgrade.py, feature_settings.py, rpc_getdescriptorinfo.py, rpc_mempool_info.py, rpc_help.py, feature_dirsymlinks.py, feature_shutdown.py, p2p_ibd_txrelay.py]
191/246 - mempool_package_limits.py passed, Duration: 81 s
Remaining jobs: [wallet_backup.py --descriptors, feature_block.py, p2p_tx_download.py, mempool_updatefromblock.py, p2p_dns_seeds.py, wallet_address_types.py --descriptors, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, wallet_groups.py --descriptors, rpc_blockchain.py, p2p_addr_relay.py, p2p_getaddr_caching.py, rpc_net.py, feature_maxtipage.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, feature_rbf.py --descriptors, mempool_packages.py, rpc_createmultisig.py, feature_versionbits_warning.py, wallet_balance.py --descriptors, wallet_importdescriptors.py --descriptors, mining_basic.py, wallet_bumpfee.py --descriptors, wallet_listsinceblock.py --descriptors, feature_minchainwork.py, wallet_send.py --descriptors, wallet_sendall.py --descriptors, wallet_create_tx.py --descriptors, wallet_taproot.py, feature_init.py, feature_loadblock.py, p2p_add_connections.py, p2p_unrequested_blocks.py, p2p_blockfilters.py, feature_addrman.py, feature_asmap.py, mempool_unbroadcast.py, mempool_accept_wtxid.py, rpc_scantxoutset.py, feature_logging.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py, wallet_startup.py, feature_config_args.py, feature_presegwit_node_upgrade.py, feature_settings.py, rpc_getdescriptorinfo.py, rpc_mempool_info.py, rpc_help.py, feature_dirsymlinks.py, feature_shutdown.py, p2p_ibd_txrelay.py]
192/246 - wallet_balance.py --descriptors passed, Duration: 77 s
Remaining jobs: [wallet_backup.py --descriptors, feature_block.py, p2p_tx_download.py, mempool_updatefromblock.py, p2p_dns_seeds.py, wallet_address_types.py --descriptors, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, wallet_groups.py --descriptors, rpc_blockchain.py, p2p_addr_relay.py, p2p_getaddr_caching.py, rpc_net.py, feature_maxtipage.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, feature_rbf.py --descriptors, mempool_packages.py, rpc_createmultisig.py, feature_versionbits_warning.py, wallet_importdescriptors.py --descriptors, mining_basic.py, wallet_bumpfee.py --descriptors, wallet_listsinceblock.py --descriptors, feature_minchainwork.py, wallet_send.py --descriptors, wallet_sendall.py --descriptors, wallet_create_tx.py --descriptors, wallet_taproot.py, feature_init.py, feature_loadblock.py, p2p_add_connections.py, p2p_unrequested_blocks.py, p2p_blockfilters.py, feature_addrman.py, feature_asmap.py, mempool_unbroadcast.py, mempool_accept_wtxid.py, rpc_scantxoutset.py, feature_logging.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py, wallet_startup.py, feature_config_args.py, feature_presegwit_node_upgrade.py, feature_settings.py, rpc_getdescriptorinfo.py, rpc_mempool_info.py, rpc_help.py, feature_dirsymlinks.py, feature_shutdown.py, p2p_ibd_txrelay.py]
193/246 - feature_addrman.py passed, Duration: 40 s
Remaining jobs: [wallet_backup.py --descriptors, feature_block.py, p2p_tx_download.py, mempool_updatefromblock.py, p2p_dns_seeds.py, wallet_address_types.py --descriptors, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, wallet_groups.py --descriptors, rpc_blockchain.py, p2p_addr_relay.py, p2p_getaddr_caching.py, rpc_net.py, feature_maxtipage.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, feature_rbf.py --descriptors, mempool_packages.py, rpc_createmultisig.py, feature_versionbits_warning.py, wallet_importdescriptors.py --descriptors, mining_basic.py, wallet_bumpfee.py --descriptors, wallet_listsinceblock.py --descriptors, feature_minchainwork.py, wallet_send.py --descriptors, wallet_sendall.py --descriptors, wallet_create_tx.py --descriptors, wallet_taproot.py, feature_init.py, feature_loadblock.py, p2p_add_connections.py, p2p_unrequested_blocks.py, p2p_blockfilters.py, feature_asmap.py, mempool_unbroadcast.py, mempool_accept_wtxid.py, rpc_scantxoutset.py, feature_logging.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py, wallet_startup.py, feature_config_args.py, feature_presegwit_node_upgrade.py, feature_settings.py, rpc_getdescriptorinfo.py, rpc_mempool_info.py, rpc_help.py, feature_dirsymlinks.py, feature_shutdown.py, p2p_ibd_txrelay.py]
194/246 - mempool_unbroadcast.py passed, Duration: 39 s
195/246 - rpc_getdescriptorinfo.py passed, Duration: 11 s
Remaining jobs: [wallet_backup.py --descriptors, feature_block.py, p2p_tx_download.py, mempool_updatefromblock.py, p2p_dns_seeds.py, wallet_address_types.py --descriptors, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, wallet_groups.py --descriptors, rpc_blockchain.py, p2p_addr_relay.py, p2p_getaddr_caching.py, rpc_net.py, feature_maxtipage.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, feature_rbf.py --descriptors, mempool_packages.py, rpc_createmultisig.py, feature_versionbits_warning.py, wallet_importdescriptors.py --descriptors, mining_basic.py, wallet_bumpfee.py --descriptors, wallet_listsinceblock.py --descriptors, feature_minchainwork.py, wallet_send.py --descriptors, wallet_sendall.py --descriptors, wallet_create_tx.py --descriptors, wallet_taproot.py, feature_init.py, feature_loadblock.py, p2p_add_connections.py, p2p_unrequested_blocks.py, p2p_blockfilters.py, feature_asmap.py, mempool_accept_wtxid.py, rpc_scantxoutset.py, feature_logging.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py, wallet_startup.py, feature_config_args.py, feature_presegwit_node_upgrade.py, feature_settings.py, rpc_mempool_info.py, rpc_help.py, feature_dirsymlinks.py, feature_shutdown.py, p2p_ibd_txrelay.py]
196/246 - feature_maxtipage.py passed, Duration: 129 s
Remaining jobs: [wallet_backup.py --descriptors, feature_block.py, p2p_tx_download.py, mempool_updatefromblock.py, p2p_dns_seeds.py, wallet_address_types.py --descriptors, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, wallet_groups.py --descriptors, rpc_blockchain.py, p2p_addr_relay.py, p2p_getaddr_caching.py, rpc_net.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, feature_rbf.py --descriptors, mempool_packages.py, rpc_createmultisig.py, feature_versionbits_warning.py, wallet_importdescriptors.py --descriptors, mining_basic.py, wallet_bumpfee.py --descriptors, wallet_listsinceblock.py --descriptors, feature_minchainwork.py, wallet_send.py --descriptors, wallet_sendall.py --descriptors, wallet_create_tx.py --descriptors, wallet_taproot.py, feature_init.py, feature_loadblock.py, p2p_add_connections.py, p2p_unrequested_blocks.py, p2p_blockfilters.py, feature_asmap.py, mempool_accept_wtxid.py, rpc_scantxoutset.py, feature_logging.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py, wallet_startup.py, feature_config_args.py, feature_presegwit_node_upgrade.py, feature_settings.py, rpc_mempool_info.py, rpc_help.py, feature_dirsymlinks.py, feature_shutdown.py, p2p_ibd_txrelay.py]
197/246 - p2p_tx_download.py passed, Duration: 185 s
198/246 - feature_shutdown.py passed, Duration: 10 s
Remaining jobs: [wallet_backup.py --descriptors, feature_block.py, mempool_updatefromblock.py, p2p_dns_seeds.py, wallet_address_types.py --descriptors, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, wallet_groups.py --descriptors, rpc_blockchain.py, p2p_addr_relay.py, p2p_getaddr_caching.py, rpc_net.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, feature_rbf.py --descriptors, mempool_packages.py, rpc_createmultisig.py, feature_versionbits_warning.py, wallet_importdescriptors.py --descriptors, mining_basic.py, wallet_bumpfee.py --descriptors, wallet_listsinceblock.py --descriptors, feature_minchainwork.py, wallet_send.py --descriptors, wallet_sendall.py --descriptors, wallet_create_tx.py --descriptors, wallet_taproot.py, feature_init.py, feature_loadblock.py, p2p_add_connections.py, p2p_unrequested_blocks.py, p2p_blockfilters.py, feature_asmap.py, mempool_accept_wtxid.py, rpc_scantxoutset.py, feature_logging.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py, wallet_startup.py, feature_config_args.py, feature_presegwit_node_upgrade.py, feature_settings.py, rpc_mempool_info.py, rpc_help.py, feature_dirsymlinks.py, p2p_ibd_txrelay.py]
199/246 - rpc_scantxoutset.py passed, Duration: 36 s
Remaining jobs: [wallet_backup.py --descriptors, feature_block.py, mempool_updatefromblock.py, p2p_dns_seeds.py, wallet_address_types.py --descriptors, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, wallet_groups.py --descriptors, rpc_blockchain.py, p2p_addr_relay.py, p2p_getaddr_caching.py, rpc_net.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, feature_rbf.py --descriptors, mempool_packages.py, rpc_createmultisig.py, feature_versionbits_warning.py, wallet_importdescriptors.py --descriptors, mining_basic.py, wallet_bumpfee.py --descriptors, wallet_listsinceblock.py --descriptors, feature_minchainwork.py, wallet_send.py --descriptors, wallet_sendall.py --descriptors, wallet_create_tx.py --descriptors, wallet_taproot.py, feature_init.py, feature_loadblock.py, p2p_add_connections.py, p2p_unrequested_blocks.py, p2p_blockfilters.py, feature_asmap.py, mempool_accept_wtxid.py, feature_logging.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py, wallet_startup.py, feature_config_args.py, feature_presegwit_node_upgrade.py, feature_settings.py, rpc_mempool_info.py, rpc_help.py, feature_dirsymlinks.py, p2p_ibd_txrelay.py]
200/246 - rpc_mempool_info.py passed, Duration: 14 s
Remaining jobs: [wallet_backup.py --descriptors, feature_block.py, mempool_updatefromblock.py, p2p_dns_seeds.py, wallet_address_types.py --descriptors, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, wallet_groups.py --descriptors, rpc_blockchain.py, p2p_addr_relay.py, p2p_getaddr_caching.py, rpc_net.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, feature_rbf.py --descriptors, mempool_packages.py, rpc_createmultisig.py, feature_versionbits_warning.py, wallet_importdescriptors.py --descriptors, mining_basic.py, wallet_bumpfee.py --descriptors, wallet_listsinceblock.py --descriptors, feature_minchainwork.py, wallet_send.py --descriptors, wallet_sendall.py --descriptors, wallet_create_tx.py --descriptors, wallet_taproot.py, feature_init.py, feature_loadblock.py, p2p_add_connections.py, p2p_unrequested_blocks.py, p2p_blockfilters.py, feature_asmap.py, mempool_accept_wtxid.py, feature_logging.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py, wallet_startup.py, feature_config_args.py, feature_presegwit_node_upgrade.py, feature_settings.py, rpc_help.py, feature_dirsymlinks.py, p2p_ibd_txrelay.py]
201/246 - p2p_add_connections.py passed, Duration: 53 s
202/246 - feature_presegwit_node_upgrade.py passed, Duration: 24 s
Remaining jobs: [wallet_backup.py --descriptors, feature_block.py, mempool_updatefromblock.py, p2p_dns_seeds.py, wallet_address_types.py --descriptors, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, wallet_groups.py --descriptors, rpc_blockchain.py, p2p_addr_relay.py, p2p_getaddr_caching.py, rpc_net.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, feature_rbf.py --descriptors, mempool_packages.py, rpc_createmultisig.py, feature_versionbits_warning.py, wallet_importdescriptors.py --descriptors, mining_basic.py, wallet_bumpfee.py --descriptors, wallet_listsinceblock.py --descriptors, feature_minchainwork.py, wallet_send.py --descriptors, wallet_sendall.py --descriptors, wallet_create_tx.py --descriptors, wallet_taproot.py, feature_init.py, feature_loadblock.py, p2p_unrequested_blocks.py, p2p_blockfilters.py, feature_asmap.py, mempool_accept_wtxid.py, feature_logging.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py, wallet_startup.py, feature_config_args.py, feature_settings.py, rpc_help.py, feature_dirsymlinks.py, p2p_ibd_txrelay.py]
203/246 - wallet_backup.py --descriptors passed, Duration: 189 s
Remaining jobs: [feature_block.py, mempool_updatefromblock.py, p2p_dns_seeds.py, wallet_address_types.py --descriptors, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, wallet_groups.py --descriptors, rpc_blockchain.py, p2p_addr_relay.py, p2p_getaddr_caching.py, rpc_net.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, feature_rbf.py --descriptors, mempool_packages.py, rpc_createmultisig.py, feature_versionbits_warning.py, wallet_importdescriptors.py --descriptors, mining_basic.py, wallet_bumpfee.py --descriptors, wallet_listsinceblock.py --descriptors, feature_minchainwork.py, wallet_send.py --descriptors, wallet_sendall.py --descriptors, wallet_create_tx.py --descriptors, wallet_taproot.py, feature_init.py, feature_loadblock.py, p2p_unrequested_blocks.py, p2p_blockfilters.py, feature_asmap.py, mempool_accept_wtxid.py, feature_logging.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py, wallet_startup.py, feature_config_args.py, feature_settings.py, rpc_help.py, feature_dirsymlinks.py, p2p_ibd_txrelay.py]
204/246 - feature_dirsymlinks.py passed, Duration: 15 s
Remaining jobs: [feature_block.py, mempool_updatefromblock.py, p2p_dns_seeds.py, wallet_address_types.py --descriptors, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, wallet_groups.py --descriptors, rpc_blockchain.py, p2p_addr_relay.py, p2p_getaddr_caching.py, rpc_net.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, feature_rbf.py --descriptors, mempool_packages.py, rpc_createmultisig.py, feature_versionbits_warning.py, wallet_importdescriptors.py --descriptors, mining_basic.py, wallet_bumpfee.py --descriptors, wallet_listsinceblock.py --descriptors, feature_minchainwork.py, wallet_send.py --descriptors, wallet_sendall.py --descriptors, wallet_create_tx.py --descriptors, wallet_taproot.py, feature_init.py, feature_loadblock.py, p2p_unrequested_blocks.py, p2p_blockfilters.py, feature_asmap.py, mempool_accept_wtxid.py, feature_logging.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py, wallet_startup.py, feature_config_args.py, feature_settings.py, rpc_help.py, p2p_ibd_txrelay.py]
205/246 - p2p_ibd_txrelay.py passed, Duration: 14 s
Remaining jobs: [feature_block.py, mempool_updatefromblock.py, p2p_dns_seeds.py, wallet_address_types.py --descriptors, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, wallet_groups.py --descriptors, rpc_blockchain.py, p2p_addr_relay.py, p2p_getaddr_caching.py, rpc_net.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, feature_rbf.py --descriptors, mempool_packages.py, rpc_createmultisig.py, feature_versionbits_warning.py, wallet_importdescriptors.py --descriptors, mining_basic.py, wallet_bumpfee.py --descriptors, wallet_listsinceblock.py --descriptors, feature_minchainwork.py, wallet_send.py --descriptors, wallet_sendall.py --descriptors, wallet_create_tx.py --descriptors, wallet_taproot.py, feature_init.py, feature_loadblock.py, p2p_unrequested_blocks.py, p2p_blockfilters.py, feature_asmap.py, mempool_accept_wtxid.py, feature_logging.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py, wallet_startup.py, feature_config_args.py, feature_settings.py, rpc_help.py]
206/246 - feature_logging.py passed, Duration: 38 s
Remaining jobs: [feature_block.py, mempool_updatefromblock.py, p2p_dns_seeds.py, wallet_address_types.py --descriptors, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, wallet_groups.py --descriptors, rpc_blockchain.py, p2p_addr_relay.py, p2p_getaddr_caching.py, rpc_net.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, feature_rbf.py --descriptors, mempool_packages.py, rpc_createmultisig.py, feature_versionbits_warning.py, wallet_importdescriptors.py --descriptors, mining_basic.py, wallet_bumpfee.py --descriptors, wallet_listsinceblock.py --descriptors, feature_minchainwork.py, wallet_send.py --descriptors, wallet_sendall.py --descriptors, wallet_create_tx.py --descriptors, wallet_taproot.py, feature_init.py, feature_loadblock.py, p2p_unrequested_blocks.py, p2p_blockfilters.py, feature_asmap.py, mempool_accept_wtxid.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py, wallet_startup.py, feature_config_args.py, feature_settings.py, rpc_help.py]
207/246 - mempool_accept_wtxid.py passed, Duration: 47 s
Remaining jobs: [feature_block.py, mempool_updatefromblock.py, p2p_dns_seeds.py, wallet_address_types.py --descriptors, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, wallet_groups.py --descriptors, rpc_blockchain.py, p2p_addr_relay.py, p2p_getaddr_caching.py, rpc_net.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, feature_rbf.py --descriptors, mempool_packages.py, rpc_createmultisig.py, feature_versionbits_warning.py, wallet_importdescriptors.py --descriptors, mining_basic.py, wallet_bumpfee.py --descriptors, wallet_listsinceblock.py --descriptors, feature_minchainwork.py, wallet_send.py --descriptors, wallet_sendall.py --descriptors, wallet_create_tx.py --descriptors, wallet_taproot.py, feature_init.py, feature_loadblock.py, p2p_unrequested_blocks.py, p2p_blockfilters.py, feature_asmap.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py, wallet_startup.py, feature_config_args.py, feature_settings.py, rpc_help.py]
208/246 - feature_config_args.py failed, Duration: 30 s

stdout:
2022-08-07T19:06:56.552000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/feature_config_args_9
2022-08-07T19:07:08.687000Z TestFramework (INFO): Test config args logging
2022-08-07T19:07:12.077000Z TestFramework (INFO): Test seed peers
2022-08-07T19:07:23.554000Z TestFramework (ERROR): Assertion failed
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/feature_config_args.py", line 229, in run_test
    self.test_seed_peers()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/feature_config_args.py", line 191, in test_seed_peers
    self.start_node(0, extra_args=['-dnsseed=0', '-fixedseeds=1'])
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/contextlib.py", line 120, in __exit__
    next(self.gen)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 423, in assert_debug_log
    self._raise_assertion_error('Expected messages "{}" does not partially match log:\n\n{}\n\n'.format(str(expected_msgs), print_log))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 167, in _raise_assertion_error
    raise AssertionError(self._node_msg(msg))
AssertionError: [node 0] Expected messages "['Loaded 0 addresses from peers.dat', 'DNS seeding disabled', 'Adding fixed seeds as -dnsseed=0, -addnode is not provided and all -seednode(s) attempted\n']" does not partially match log:

 - 
 - 
 - 
 - 
 - 
 - 2022-08-07T19:07:21.291067Z [init] [init/common.cpp:127] [LogPackageVersion] Bitcoin Core version v23.99.0-b1a2021f7809 (release build)
 - 2022-08-07T19:07:21.291881Z [init] [init.cpp:661] [InitParameterInteraction] InitParameterInteraction: parameter interaction: -bind set -> setting -listen=1
 - 2022-08-07T19:07:21.291967Z [init] [init.cpp:926] [AppInitParameterInteraction] Validating signatures for all blocks.
 - 2022-08-07T19:07:21.291971Z [init] [init.cpp:937] [AppInitParameterInteraction] Setting nMinimumChainWork=0000000000000000000000000000000000000000000000000000000000000000
 - 2022-08-07T19:07:21.291993Z [init] [kernel/context.cpp:21] [Context] Using the 'standard' SHA256 implementation
 - 2022-08-07T19:07:21.361422Z [init] [init/common.cpp:98] [StartLogging] Default data directory /Users/mehul/Library/Application Support/Bitcoin
 - 2022-08-07T19:07:21.361438Z [init] [init/common.cpp:99] [StartLogging] Using data directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/feature_config_args_9/node0/regtest
 - 2022-08-07T19:07:21.361455Z [init] [init/common.cpp:104] [StartLogging] Config file: /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/feature_config_args_9/node0/bitcoin.conf
 - 2022-08-07T19:07:21.361476Z [init] [util/system.cpp:1118] [logArgsPrefix] Config file arg: regtest="1"
 - 2022-08-07T19:07:21.361491Z [init] [util/system.cpp:1118] [logArgsPrefix] Config file arg: [regtest] bind="127.0.0.1"
 - 2022-08-07T19:07:21.361498Z [init] [util/system.cpp:1118] [logArgsPrefix] Config file arg: [regtest] discover="0"
 - 2022-08-07T19:07:21.361506Z [init] [util/system.cpp:1118] [logArgsPrefix] Config file arg: [regtest] dnsseed="0"
 - 2022-08-07T19:07:21.361519Z [init] [util/system.cpp:1118] [logArgsPrefix] Config file arg: [regtest] fallbackfee="0.0002"
 - 2022-08-07T19:07:21.361527Z [init] [util/system.cpp:1118] [logArgsPrefix] Config file arg: [regtest] fixedseeds="0"
 - 2022-08-07T19:07:21.361540Z [init] [util/system.cpp:1118] [logArgsPrefix] Config file arg: [regtest] keypool="1"
 - 2022-08-07T19:07:21.361549Z [init] [util/system.cpp:1118] [logArgsPrefix] Config file arg: [regtest] listenonion="0"
 - 2022-08-07T19:07:21.361561Z [init] [util/system.cpp:1118] [logArgsPrefix] Config file arg: [regtest] natpmp="0"
 - 2022-08-07T19:07:21.361576Z [init] [util/system.cpp:1118] [logArgsPrefix] Config file arg: [regtest] peertimeout="999999999"
 - 2022-08-07T19:07:21.361596Z [init] [util/system.cpp:1118] [logArgsPrefix] Config file arg: [regtest] port="11108"
 - 2022-08-07T19:07:21.361605Z [init] [util/system.cpp:1118] [logArgsPrefix] Config file arg: [regtest] printtoconsole="0"
 - 2022-08-07T19:07:21.361628Z [init] [util/system.cpp:1118] [logArgsPrefix] Config file arg: [regtest] rpcdoccheck="1"
 - 2022-08-07T19:07:21.361648Z [init] [util/system.cpp:1118] [logArgsPrefix] Config file arg: [regtest] rpcport="16108"
 - 2022-08-07T19:07:21.361657Z [init] [util/system.cpp:1118] [logArgsPrefix] Config file arg: [regtest] server="1"
 - 2022-08-07T19:07:21.361664Z [init] [util/system.cpp:1118] [logArgsPrefix] Config file arg: [regtest] shrinkdebugfile="0"
 - 2022-08-07T19:07:21.365004Z [init] [util/system.cpp:1118] [logArgsPrefix] Config file arg: [regtest] unsafesqlitesync="1"
 - 2022-08-07T19:07:21.366289Z [init] [util/system.cpp:1118] [logArgsPrefix] Config file arg: [regtest] upnp="0"
 - 2022-08-07T19:07:21.369399Z [init] [util/system.cpp:1118] [logArgsPrefix] Command-line arg: datadir="/var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/feature_config_args_9/node0"
 - 2022-08-07T19:07:21.403180Z [init] [util/system.cpp:1118] [logArgsPrefix] Command-line arg: debug=""
 - 2022-08-07T19:07:21.424552Z [init] [util/system.cpp:1118] [logArgsPrefix] Command-line arg: debugexclude="libevent"
 - 2022-08-07T19:07:21.445636Z [init] [util/system.cpp:1118] [logArgsPrefix] Command-line arg: debugexclude="leveldb"
 - 2022-08-07T19:07:21.498278Z [init] [util/system.cpp:1118] [logArgsPrefix] Command-line arg: dnsseed="0"
 - 2022-08-07T19:07:21.534265Z [init] [util/system.cpp:1118] [logArgsPrefix] Command-line arg: fixedseeds="1"
 - 2022-08-07T19:07:21.555808Z [init] [util/system.cpp:1118] [logArgsPrefix] Command-line arg: logsourcelocations=""
 - 2022-08-07T19:07:21.590497Z [init] [util/system.cpp:1118] [logArgsPrefix] Command-line arg: logthreadnames=""
 - 2022-08-07T19:07:21.592928Z [init] [util/system.cpp:1118] [logArgsPrefix] Command-line arg: logtimemicros=""
 - 2022-08-07T19:07:21.628609Z [init] [util/system.cpp:1118] [logArgsPrefix] Command-line arg: uacomment="testnode0"
 - 2022-08-07T19:07:21.649340Z [init] [init.cpp:1111] [AppInitMain] Using at most 125 automatic connections (285 file descriptors available)
 - 2022-08-07T19:07:21.708830Z [init] [script/sigcache.cpp:102] [InitSignatureCache] Using 16 MiB out of 16 MiB requested for signature cache, able to store 524288 elements
 - 2022-08-07T19:07:21.744865Z [init] [validation.cpp:1673] [InitScriptExecutionCache] Using 16 MiB out of 16 MiB requested for script execution cache, able to store 524288 elements
 - 2022-08-07T19:07:21.762896Z [init] [init.cpp:1143] [AppInitMain] Script verification uses 7 additional threads
 - 2022-08-07T19:07:21.783348Z [scheduler] [util/thread.cpp:18] [TraceThread] scheduler thread start
 - 2022-08-07T19:07:21.804947Z [init] [httpserver.cpp:184] [InitHTTPAllowList] [http] Allowing HTTP connections from: 127.0.0.0/8 ::1/128 
 - 2022-08-07T19:07:21.822539Z [init] [httpserver.cpp:321] [HTTPBindAddresses] [http] Binding RPC on address ::1 port 16108
 - 2022-08-07T19:07:21.823860Z [init] [httpserver.cpp:321] [HTTPBindAddresses] [http] Binding RPC on address 127.0.0.1 port 16108
 - 2022-08-07T19:07:21.844517Z [init] [httpserver.cpp:401] [InitHTTPServer] [http] Initialized HTTP server
 - 2022-08-07T19:07:21.878584Z [init] [httpserver.cpp:403] [InitHTTPServer] [http] creating work queue of depth 16
 - 2022-08-07T19:07:21.900310Z [init] [rpc/server.cpp:291] [StartRPC] [rpc] Starting RPC
 - 2022-08-07T19:07:21.919808Z [init] [httprpc.cpp:296] [StartHTTPRPC] [rpc] Starting HTTP RPC server
 - 2022-08-07T19:07:21.941409Z [init] [httprpc.cpp:245] [InitRPCAuthentication] Using random cookie authentication.
 - 2022-08-07T19:07:22.018237Z [init] [rpc/request.cpp:106] [GenerateAuthCookie] Generated RPC authentication cookie /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/feature_config_args_9/node0/regtest/.cookie
 - 2022-08-07T19:07:22.018259Z [init] [httpserver.cpp:676] [RegisterHTTPHandler] [http] Registering HTTP handler for / (exactmatch 1)
 - 2022-08-07T19:07:22.018273Z [init] [httpserver.cpp:676] [RegisterHTTPHandler] [http] Registering HTTP handler for /wallet/ (exactmatch 0)
 - 2022-08-07T19:07:22.018286Z [init] [httpserver.cpp:425] [StartHTTPServer] [http] Starting HTTP server
 - 2022-08-07T19:07:22.018298Z [init] [httpserver.cpp:427] [StartHTTPServer] [http] starting 4 worker threads
 - 2022-08-07T19:07:22.018371Z [init] [wallet/load.cpp:51] [VerifyWallets] Using wallet directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/feature_config_args_9/node0/regtest/wallets
 - 2022-08-07T19:07:22.019586Z [init] [noui.cpp:56] [noui_InitMessage] init message: Verifying wallet(s)…
 - 2022-08-07T19:07:22.054014Z [init] [init.cpp:1229] [AppInitMain] Using /16 prefix for IP bucketing
 - 2022-08-07T19:07:22.074526Z [init] [noui.cpp:56] [noui_InitMessage] init message: Loading P2P addresses…
 - 2022-08-07T19:07:22.109424Z [init] [logging/timer.h:57] [Log] [addrman] CheckAddrman: new 0, tried 0, total 0 started
 - 2022-08-07T19:07:22.112189Z [init] [logging/timer.h:57] [Log] [addrman] CheckAddrman: completed (0.14ms)
 - 2022-08-07T19:07:22.148637Z [init] [addrdb.cpp:194] [LoadAddrman] Loaded 0 addresses from peers.dat  39ms
 - 2022-08-07T19:07:22.185579Z [init] [noui.cpp:56] [noui_InitMessage] init message: Loading banlist…
 - 2022-08-07T19:07:22.220249Z [init] [banman.cpp:38] [LoadBanlist] [net] Loaded 0 banned node addresses/subnets  0ms
 - 2022-08-07T19:07:22.223184Z [init] [net.cpp:1523] [SetTryNewOutboundPeer] [net] setting try another outbound peer=false
 - 2022-08-07T19:07:22.256694Z [init] [net.cpp:2170] [SetNetworkActive] SetNetworkActive: true
 - 2022-08-07T19:07:22.261115Z [http] [httpserver.cpp:287] [ThreadHTTP] [http] Entering http event loop
 - 2022-08-07T19:07:22.295259Z [http] [httpserver.cpp:240] [http_request_cb] [http] Received a POST request for / from 127.0.0.1:61232
 - 2022-08-07T19:07:22.297851Z [init] [policy/fees.cpp:455] [Read] [estimatefee] Reading estimates: 190 buckets counting confirms up to 48 blocks
 - 2022-08-07T19:07:22.332620Z [init] [policy/fees.cpp:455] [Read] [estimatefee] Reading estimates: 190 buckets counting confirms up to 12 blocks
 - 2022-08-07T19:07:22.332883Z [httpworker.0] [rpc/request.cpp:179] [parse] [rpc] ThreadRPCServer method=getblockcount user=__cookie__
 - 2022-08-07T19:07:22.336556Z [init] [policy/fees.cpp:455] [Read] [estimatefee] Reading estimates: 190 buckets counting confirms up to 1008 blocks
 - 2022-08-07T19:07:22.391450Z [init] [init.cpp:1371] [AppInitMain] Cache configuration:
 - 2022-08-07T19:07:22.427790Z [init] [init.cpp:1372] [AppInitMain] * Using 2.0 MiB for block index database
 - 2022-08-07T19:07:22.462190Z [init] [init.cpp:1380] [AppInitMain] * Using 8.0 MiB for chain state database
 - 2022-08-07T19:07:22.462210Z [init] [init.cpp:1398] [AppInitMain] * Using 440.0 MiB for in-memory UTXO set (plus up to 286.1 MiB of unused mempool space)
 - 2022-08-07T19:07:22.462232Z [init] [noui.cpp:56] [noui_InitMessage] init message: Loading block index…
 - 2022-08-07T19:07:22.462244Z [init] [validation.cpp:4716] [InitializeChainstate] Switching active chainstate to Chainstate [ibd] @ height -1 (null)
 - 2022-08-07T19:07:22.462283Z [init] [dbwrapper.cpp:150] [CDBWrapper] Opening LevelDB in /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/feature_config_args_9/node0/regtest/blocks/index
 - 2022-08-07T19:07:22.588464Z [http] [httpserver.cpp:240] [http_request_cb] [http] Received a POST request for / from 127.0.0.1:61235
 - 2022-08-07T19:07:22.610268Z [httpworker.1] [rpc/request.cpp:179] [parse] [rpc] ThreadRPCServer method=getblockcount user=__cookie__
 - 2022-08-07T19:07:22.765097Z [init] [dbwrapper.cpp:158] [CDBWrapper] Opened LevelDB successfully
 - 2022-08-07T19:07:22.765123Z [init] [dbwrapper.cpp:183] [CDBWrapper] Using obfuscation key for /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/feature_config_args_9/node0/regtest/blocks/index: 0000000000000000
 - 2022-08-07T19:07:22.765329Z [init] [node/blockstorage.cpp:331] [LoadBlockIndexDB] LoadBlockIndexDB: last block file = 0
 - 2022-08-07T19:07:22.766220Z [init] [node/blockstorage.cpp:335] [LoadBlockIndexDB] LoadBlockIndexDB: last block file info: CBlockFileInfo(blocks=1, size=293, heights=0...0, time=2011-02-02...2011-02-02)
 - 2022-08-07T19:07:22.766235Z [init] [node/blockstorage.cpp:346] [LoadBlockIndexDB] Checking all blk files are present...
 - 2022-08-07T19:07:22.766286Z [init] [dbwrapper.cpp:150] [CDBWrapper] Opening LevelDB in /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/feature_config_args_9/node0/regtest/chainstate
 - 2022-08-07T19:07:22.884488Z [http] [httpserver.cpp:240] [http_request_cb] [http] Received a POST request for / from 127.0.0.1:61237
 - 2022-08-07T19:07:22.893064Z [httpworker.3] [rpc/request.cpp:179] [parse] [rpc] ThreadRPCServer method=getblockcount user=__cookie__
 - 2022-08-07T19:07:23.148555Z [http] [httpserver.cpp:240] [http_request_cb] [http] Received a POST request for / from 127.0.0.1:61238
 - 2022-08-07T19:07:23.157933Z [init] [dbwrapper.cpp:158] [CDBWrapper] Opened LevelDB successfully
 - 2022-08-07T19:07:23.191643Z [init] [dbwrapper.cpp:183] [CDBWrapper] Using obfuscation key for /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/feature_config_args_9/node0/regtest/chainstate: 778f4a81aaf45152
 - 2022-08-07T19:07:23.192937Z [init] [validation.cpp:3900] [LoadChainTip] Loaded best chain: hashBestChain=0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206 height=0 date=2011-02-02T23:16:42Z progress=1.000000
 - 2022-08-07T19:07:23.213525Z [init] [noui.cpp:56] [noui_InitMessage] init message: Verifying blocks…
 - 2022-08-07T19:07:23.248490Z [init] [init.cpp:1444] [AppInitMain]  block index             786ms
 - 2022-08-07T19:07:23.248854Z [init] [init.cpp:1601] [AppInitMain] block tree size = 1
 - 2022-08-07T19:07:23.285137Z [init] [init.cpp:1613] [AppInitMain] nBestHeight = 0
 - 2022-08-07T19:07:23.306838Z [init] [net.cpp:2103] [BindListenPort] Bound to 127.0.0.1:11108
 - 2022-08-07T19:07:23.342786Z [init] [net.cpp:2100] [BindListenPort] [net:error] Unable to bind to 127.0.0.1:18445 on this computer. Bitcoin Core is probably already running.
 - 2022-08-07T19:07:23.363855Z [init] [addrdb.cpp:228] [ReadAnchors] Loaded 0 addresses from "anchors.dat"
 - 2022-08-07T19:07:23.398717Z [init] [net.cpp:2277] [Start] 0 block-relay-only anchors will be tried for connections.
 - 2022-08-07T19:07:23.398742Z [init] [noui.cpp:56] [noui_InitMessage] init message: Starting network threads…
 - 2022-08-07T19:07:23.398795Z [init] [net.cpp:2312] [Start] DNS seeding disabled
 - 2022-08-07T19:07:23.398867Z [init] [noui.cpp:56] [noui_InitMessage] init message: Done loading
 - 2022-08-07T19:07:23.400803Z [httpworker.2] [rpc/request.cpp:179] [parse] [rpc] ThreadRPCServer method=getblockcount user=__cookie__
 - 2022-08-07T19:07:23.403830Z [loadblk] [util/thread.cpp:18] [TraceThread] loadblk thread start
 - 2022-08-07T19:07:23.437182Z [net] [util/thread.cpp:18] [TraceThread] net thread start
 - 2022-08-07T19:07:23.437826Z [loadblk] [kernel/mempool_persist.cpp:121] [LoadMempool] Imported mempool transactions from disk: 0 succeeded, 0 failed, 0 expired, 0 already there, 0 waiting for initial broadcast
 - 2022-08-07T19:07:23.437918Z [loadblk] [util/thread.cpp:20] [TraceThread] loadblk thread exit
 - 2022-08-07T19:07:23.440293Z [opencon] [util/thread.cpp:18] [TraceThread] opencon thread start
 - 2022-08-07T19:07:23.443720Z [msghand] [util/thread.cpp:18] [TraceThread] msghand thread start
 - 2022-08-07T19:07:23.477787Z [http] [httpserver.cpp:240] [http_request_cb] [http] Received a POST request for / from 127.0.0.1:61238
 - 2022-08-07T19:07:23.480168Z [addcon] [util/thread.cpp:18] [TraceThread] addcon thread start
 - 2022-08-07T19:07:23.516061Z [httpworker.0] [rpc/request.cpp:179] [parse] [rpc] ThreadRPCServer method=getmempoolinfo user=__cookie__


2022-08-07T19:07:23.704000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:07:26.271000Z TestFramework (WARNING): Not cleaning up dir /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/feature_config_args_9
2022-08-07T19:07:26.360000Z TestFramework (ERROR): Test failed. Test logging available at /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/feature_config_args_9/test_framework.log
2022-08-07T19:07:26.361000Z TestFramework (ERROR): 
2022-08-07T19:07:26.361000Z TestFramework (ERROR): Hint: Call /Users/mehul/Development/Bitcoin/bitcoin/test/functional/combine_logs.py '/var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/feature_config_args_9' to consolidate all logs
2022-08-07T19:07:26.361000Z TestFramework (ERROR): 
2022-08-07T19:07:26.361000Z TestFramework (ERROR): If this failure happened unexpectedly or intermittently, please file a bug and provide a link or upload of the combined log.
2022-08-07T19:07:26.361000Z TestFramework (ERROR): https://github.com/bitcoin/bitcoin/issues
2022-08-07T19:07:26.361000Z TestFramework (ERROR): 


stderr:


Remaining jobs: [feature_block.py, mempool_updatefromblock.py, p2p_dns_seeds.py, wallet_address_types.py --descriptors, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, wallet_groups.py --descriptors, rpc_blockchain.py, p2p_addr_relay.py, p2p_getaddr_caching.py, rpc_net.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, feature_rbf.py --descriptors, mempool_packages.py, rpc_createmultisig.py, feature_versionbits_warning.py, wallet_importdescriptors.py --descriptors, mining_basic.py, wallet_bumpfee.py --descriptors, wallet_listsinceblock.py --descriptors, feature_minchainwork.py, wallet_send.py --descriptors, wallet_sendall.py --descriptors, wallet_create_tx.py --descriptors, wallet_taproot.py, feature_init.py, feature_loadblock.py, p2p_unrequested_blocks.py, p2p_blockfilters.py, feature_asmap.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py, wallet_startup.py, feature_settings.py, rpc_help.py]
209/246 - p2p_dns_seeds.py passed, Duration: 194 s
210/246 - feature_settings.py passed, Duration: 29 s
Remaining jobs: [feature_block.py, mempool_updatefromblock.py, wallet_address_types.py --descriptors, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, wallet_groups.py --descriptors, rpc_blockchain.py, p2p_addr_relay.py, p2p_getaddr_caching.py, rpc_net.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, feature_rbf.py --descriptors, mempool_packages.py, rpc_createmultisig.py, feature_versionbits_warning.py, wallet_importdescriptors.py --descriptors, mining_basic.py, wallet_bumpfee.py --descriptors, wallet_listsinceblock.py --descriptors, feature_minchainwork.py, wallet_send.py --descriptors, wallet_sendall.py --descriptors, wallet_create_tx.py --descriptors, wallet_taproot.py, feature_init.py, feature_loadblock.py, p2p_unrequested_blocks.py, p2p_blockfilters.py, feature_asmap.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py, wallet_startup.py, rpc_help.py]
211/246 - feature_asmap.py passed, Duration: 51 s
Remaining jobs: [feature_block.py, mempool_updatefromblock.py, wallet_address_types.py --descriptors, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, wallet_groups.py --descriptors, rpc_blockchain.py, p2p_addr_relay.py, p2p_getaddr_caching.py, rpc_net.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, feature_rbf.py --descriptors, mempool_packages.py, rpc_createmultisig.py, feature_versionbits_warning.py, wallet_importdescriptors.py --descriptors, mining_basic.py, wallet_bumpfee.py --descriptors, wallet_listsinceblock.py --descriptors, feature_minchainwork.py, wallet_send.py --descriptors, wallet_sendall.py --descriptors, wallet_create_tx.py --descriptors, wallet_taproot.py, feature_init.py, feature_loadblock.py, p2p_unrequested_blocks.py, p2p_blockfilters.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py, wallet_startup.py, rpc_help.py]
212/246 - wallet_address_types.py --descriptors passed, Duration: 196 s
Remaining jobs: [feature_block.py, mempool_updatefromblock.py, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, wallet_groups.py --descriptors, rpc_blockchain.py, p2p_addr_relay.py, p2p_getaddr_caching.py, rpc_net.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, feature_rbf.py --descriptors, mempool_packages.py, rpc_createmultisig.py, feature_versionbits_warning.py, wallet_importdescriptors.py --descriptors, mining_basic.py, wallet_bumpfee.py --descriptors, wallet_listsinceblock.py --descriptors, feature_minchainwork.py, wallet_send.py --descriptors, wallet_sendall.py --descriptors, wallet_create_tx.py --descriptors, wallet_taproot.py, feature_init.py, feature_loadblock.py, p2p_unrequested_blocks.py, p2p_blockfilters.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py, wallet_startup.py, rpc_help.py]
213/246 - rpc_createmultisig.py failed, Duration: 98 s

stdout:
2022-08-07T19:05:51.601000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/rpc_createmultisig_103
2022-08-07T19:05:58.153000Z TestFramework (INFO): Generating blocks ...
2022-08-07T19:06:28.187000Z TestFramework (ERROR): JSONRPC error
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 166, in _get_response
    http_response = self.__conn.getresponse()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1344, in getresponse
    response.begin()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
socket.timeout: timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/rpc_createmultisig.py", line 56, in run_test
    self.generate(self.wallet, 149)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 648, in generate
    blocks = generator.generate(*args, invalid_call=False, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/wallet.py", line 163, in generate
    blocks = self._test_node.generatetodescriptor(num_blocks, self.get_descriptor(), **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 315, in generatetodescriptor
    return self.__getattr__('generatetodescriptor')(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 108, in _request
    return self._get_response()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 168, in _get_response
    raise JSONRPCException({
test_framework.authproxy.JSONRPCException: 'generatetodescriptor' RPC took longer than 30.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)
2022-08-07T19:06:28.392000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:06:28.449000Z TestFramework.node0 (ERROR): Unable to stop node.
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 336, in stop_node
    self.stop(wait=wait)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 107, in _request
    self.__conn.request(method, path, postdata, headers)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1252, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1263, in _send_request
    self.putrequest(method, url, **skips)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1089, in putrequest
    raise CannotSendRequest(self.__state)
http.client.CannotSendRequest: Request-sent
2022-08-07T19:07:29.363000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
'''
[node 2] Cleaning up leftover process
[node 1] Cleaning up leftover process
[node 0] Cleaning up leftover process


stderr:
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/rpc_createmultisig.py", line 248, in <module>
    RpcCreateMultiSigTest().main()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 156, in main
    exit_code = self.shutdown()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 311, in shutdown
    self.stop_nodes()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 571, in stop_nodes
    node.wait_until_stopped()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 382, in wait_until_stopped
    wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/util.py", line 281, in wait_until_helper
    raise AssertionError("Predicate {} not true after {} seconds".format(predicate_source, timeout))
AssertionError: Predicate ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
''' not true after 60.0 seconds


214/246 - feature_minchainwork.py passed, Duration: 71 s
Remaining jobs: [feature_block.py, mempool_updatefromblock.py, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, wallet_groups.py --descriptors, rpc_blockchain.py, p2p_addr_relay.py, p2p_getaddr_caching.py, rpc_net.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, feature_rbf.py --descriptors, mempool_packages.py, feature_versionbits_warning.py, wallet_importdescriptors.py --descriptors, mining_basic.py, wallet_bumpfee.py --descriptors, wallet_listsinceblock.py --descriptors, wallet_send.py --descriptors, wallet_sendall.py --descriptors, wallet_create_tx.py --descriptors, wallet_taproot.py, feature_init.py, feature_loadblock.py, p2p_unrequested_blocks.py, p2p_blockfilters.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py, wallet_startup.py, rpc_help.py]
215/246 - feature_loadblock.py passed, Duration: 64 s
216/246 - wallet_startup.py passed, Duration: 37 s
Remaining jobs: [feature_block.py, mempool_updatefromblock.py, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, wallet_groups.py --descriptors, rpc_blockchain.py, p2p_addr_relay.py, p2p_getaddr_caching.py, rpc_net.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, feature_rbf.py --descriptors, mempool_packages.py, feature_versionbits_warning.py, wallet_importdescriptors.py --descriptors, mining_basic.py, wallet_bumpfee.py --descriptors, wallet_listsinceblock.py --descriptors, wallet_send.py --descriptors, wallet_sendall.py --descriptors, wallet_create_tx.py --descriptors, wallet_taproot.py, feature_init.py, p2p_unrequested_blocks.py, p2p_blockfilters.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py, rpc_help.py]
217/246 - mempool_packages.py failed, Duration: 103 s

stdout:
2022-08-07T19:05:50.127000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/mempool_packages_105
2022-08-07T19:06:32.684000Z TestFramework (ERROR): JSONRPC error
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 166, in _get_response
    http_response = self.__conn.getresponse()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1344, in getresponse
    response.begin()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
socket.timeout: timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/mempool_packages.py", line 48, in run_test
    self.generate(self.nodes[0], COINBASE_MATURITY + 1)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 648, in generate
    blocks = generator.generate(*args, invalid_call=False, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 303, in generate
    return self.generatetoaddress(nblocks=nblocks, address=self.get_deterministic_priv_key().address, maxtries=maxtries, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 311, in generatetoaddress
    return self.__getattr__('generatetoaddress')(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 108, in _request
    return self._get_response()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 168, in _get_response
    raise JSONRPCException({
test_framework.authproxy.JSONRPCException: 'generatetoaddress' RPC took longer than 30.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)
2022-08-07T19:06:32.789000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:06:32.803000Z TestFramework.node0 (ERROR): Unable to stop node.
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 336, in stop_node
    self.stop(wait=wait)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 107, in _request
    self.__conn.request(method, path, postdata, headers)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1252, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1263, in _send_request
    self.putrequest(method, url, **skips)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1089, in putrequest
    raise CannotSendRequest(self.__state)
http.client.CannotSendRequest: Request-sent
2022-08-07T19:07:33.139000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
'''
[node 1] Cleaning up leftover process
[node 0] Cleaning up leftover process


stderr:
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/mempool_packages.py", line 345, in <module>
    MempoolPackagesTest().main()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 156, in main
    exit_code = self.shutdown()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 311, in shutdown
    self.stop_nodes()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 571, in stop_nodes
    node.wait_until_stopped()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 382, in wait_until_stopped
    wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/util.py", line 281, in wait_until_helper
    raise AssertionError("Predicate {} not true after {} seconds".format(predicate_source, timeout))
AssertionError: Predicate ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
''' not true after 60.0 seconds


Remaining jobs: [feature_block.py, mempool_updatefromblock.py, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, wallet_groups.py --descriptors, rpc_blockchain.py, p2p_addr_relay.py, p2p_getaddr_caching.py, rpc_net.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, feature_rbf.py --descriptors, feature_versionbits_warning.py, wallet_importdescriptors.py --descriptors, mining_basic.py, wallet_bumpfee.py --descriptors, wallet_listsinceblock.py --descriptors, wallet_send.py --descriptors, wallet_sendall.py --descriptors, wallet_create_tx.py --descriptors, wallet_taproot.py, feature_init.py, p2p_unrequested_blocks.py, p2p_blockfilters.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py, rpc_help.py]
218/246 - rpc_help.py passed, Duration: 27 s
Remaining jobs: [feature_block.py, mempool_updatefromblock.py, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, wallet_groups.py --descriptors, rpc_blockchain.py, p2p_addr_relay.py, p2p_getaddr_caching.py, rpc_net.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, feature_rbf.py --descriptors, feature_versionbits_warning.py, wallet_importdescriptors.py --descriptors, mining_basic.py, wallet_bumpfee.py --descriptors, wallet_listsinceblock.py --descriptors, wallet_send.py --descriptors, wallet_sendall.py --descriptors, wallet_create_tx.py --descriptors, wallet_taproot.py, feature_init.py, p2p_unrequested_blocks.py, p2p_blockfilters.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py]
219/246 - wallet_importdescriptors.py --descriptors passed, Duration: 95 s
220/246 - wallet_sendall.py --descriptors passed, Duration: 76 s
Remaining jobs: [feature_block.py, mempool_updatefromblock.py, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, wallet_groups.py --descriptors, rpc_blockchain.py, p2p_addr_relay.py, p2p_getaddr_caching.py, rpc_net.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, feature_rbf.py --descriptors, feature_versionbits_warning.py, mining_basic.py, wallet_bumpfee.py --descriptors, wallet_listsinceblock.py --descriptors, wallet_send.py --descriptors, wallet_create_tx.py --descriptors, wallet_taproot.py, feature_init.py, p2p_unrequested_blocks.py, p2p_blockfilters.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py]
221/246 - wallet_send.py --descriptors passed, Duration: 81 s
Remaining jobs: [feature_block.py, mempool_updatefromblock.py, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, wallet_groups.py --descriptors, rpc_blockchain.py, p2p_addr_relay.py, p2p_getaddr_caching.py, rpc_net.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, feature_rbf.py --descriptors, feature_versionbits_warning.py, mining_basic.py, wallet_bumpfee.py --descriptors, wallet_listsinceblock.py --descriptors, wallet_create_tx.py --descriptors, wallet_taproot.py, feature_init.py, p2p_unrequested_blocks.py, p2p_blockfilters.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py]
222/246 - wallet_groups.py --descriptors passed, Duration: 175 s
Remaining jobs: [feature_block.py, mempool_updatefromblock.py, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, rpc_blockchain.py, p2p_addr_relay.py, p2p_getaddr_caching.py, rpc_net.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, feature_rbf.py --descriptors, feature_versionbits_warning.py, mining_basic.py, wallet_bumpfee.py --descriptors, wallet_listsinceblock.py --descriptors, wallet_create_tx.py --descriptors, wallet_taproot.py, feature_init.py, p2p_unrequested_blocks.py, p2p_blockfilters.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py]
223/246 - feature_versionbits_warning.py passed, Duration: 112 s
Remaining jobs: [feature_block.py, mempool_updatefromblock.py, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, rpc_blockchain.py, p2p_addr_relay.py, p2p_getaddr_caching.py, rpc_net.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, feature_rbf.py --descriptors, mining_basic.py, wallet_bumpfee.py --descriptors, wallet_listsinceblock.py --descriptors, wallet_create_tx.py --descriptors, wallet_taproot.py, feature_init.py, p2p_unrequested_blocks.py, p2p_blockfilters.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py]
224/246 - wallet_bumpfee.py --descriptors failed, Duration: 99 s

stdout:
2022-08-07T19:06:05.919000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/wallet_bumpfee_76
2022-08-07T19:06:14.185000Z TestFramework (INFO): Mining blocks...
2022-08-07T19:06:44.295000Z TestFramework (ERROR): JSONRPC error
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 166, in _get_response
    http_response = self.__conn.getresponse()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1344, in getresponse
    response.begin()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
socket.timeout: timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/wallet_bumpfee.py", line 75, in run_test
    self.generate(peer_node, 110)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 648, in generate
    blocks = generator.generate(*args, invalid_call=False, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 303, in generate
    return self.generatetoaddress(nblocks=nblocks, address=self.get_deterministic_priv_key().address, maxtries=maxtries, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 311, in generatetoaddress
    return self.__getattr__('generatetoaddress')(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 108, in _request
    return self._get_response()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 168, in _get_response
    raise JSONRPCException({
test_framework.authproxy.JSONRPCException: 'generatetoaddress' RPC took longer than 30.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)
2022-08-07T19:06:44.364000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:06:44.382000Z TestFramework.node0 (ERROR): Unable to stop node.
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 336, in stop_node
    self.stop(wait=wait)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 107, in _request
    self.__conn.request(method, path, postdata, headers)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1252, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1263, in _send_request
    self.putrequest(method, url, **skips)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1089, in putrequest
    raise CannotSendRequest(self.__state)
http.client.CannotSendRequest: Request-sent
2022-08-07T19:07:44.528000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
'''
[node 1] Cleaning up leftover process
[node 0] Cleaning up leftover process


stderr:
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/wallet_bumpfee.py", line 613, in <module>
    BumpFeeTest().main()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 156, in main
    exit_code = self.shutdown()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 311, in shutdown
    self.stop_nodes()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 571, in stop_nodes
    node.wait_until_stopped()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 382, in wait_until_stopped
    wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/util.py", line 281, in wait_until_helper
    raise AssertionError("Predicate {} not true after {} seconds".format(predicate_source, timeout))
AssertionError: Predicate ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
''' not true after 60.0 seconds


Remaining jobs: [feature_block.py, mempool_updatefromblock.py, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, rpc_blockchain.py, p2p_addr_relay.py, p2p_getaddr_caching.py, rpc_net.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, feature_rbf.py --descriptors, mining_basic.py, wallet_listsinceblock.py --descriptors, wallet_create_tx.py --descriptors, wallet_taproot.py, feature_init.py, p2p_unrequested_blocks.py, p2p_blockfilters.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py]
225/246 - p2p_unrequested_blocks.py passed, Duration: 76 s
Remaining jobs: [feature_block.py, mempool_updatefromblock.py, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, rpc_blockchain.py, p2p_addr_relay.py, p2p_getaddr_caching.py, rpc_net.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, feature_rbf.py --descriptors, mining_basic.py, wallet_listsinceblock.py --descriptors, wallet_create_tx.py --descriptors, wallet_taproot.py, feature_init.py, p2p_blockfilters.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py]
226/246 - feature_init.py passed, Duration: 87 s
Remaining jobs: [feature_block.py, mempool_updatefromblock.py, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, rpc_blockchain.py, p2p_addr_relay.py, p2p_getaddr_caching.py, rpc_net.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, feature_rbf.py --descriptors, mining_basic.py, wallet_listsinceblock.py --descriptors, wallet_create_tx.py --descriptors, wallet_taproot.py, p2p_blockfilters.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py]
227/246 - p2p_addr_relay.py passed, Duration: 173 s
Remaining jobs: [feature_block.py, mempool_updatefromblock.py, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, rpc_blockchain.py, p2p_getaddr_caching.py, rpc_net.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, feature_rbf.py --descriptors, mining_basic.py, wallet_listsinceblock.py --descriptors, wallet_create_tx.py --descriptors, wallet_taproot.py, p2p_blockfilters.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py]
228/246 - wallet_listsinceblock.py --descriptors failed, Duration: 107 s

stdout:
2022-08-07T19:06:10.299000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/wallet_listsinceblock_69
2022-08-07T19:06:52.580000Z TestFramework (ERROR): JSONRPC error
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 166, in _get_response
    http_response = self.__conn.getresponse()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1344, in getresponse
    response.begin()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
socket.timeout: timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/wallet_listsinceblock.py", line 33, in run_test
    self.generate(self.nodes[2], COINBASE_MATURITY + 1)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 648, in generate
    blocks = generator.generate(*args, invalid_call=False, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 303, in generate
    return self.generatetoaddress(nblocks=nblocks, address=self.get_deterministic_priv_key().address, maxtries=maxtries, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 311, in generatetoaddress
    return self.__getattr__('generatetoaddress')(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 108, in _request
    return self._get_response()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 168, in _get_response
    raise JSONRPCException({
test_framework.authproxy.JSONRPCException: 'generatetoaddress' RPC took longer than 30.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)
2022-08-07T19:06:52.691000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:06:53.776000Z TestFramework.node2 (ERROR): Unable to stop node.
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 336, in stop_node
    self.stop(wait=wait)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 107, in _request
    self.__conn.request(method, path, postdata, headers)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1252, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1263, in _send_request
    self.putrequest(method, url, **skips)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1089, in putrequest
    raise CannotSendRequest(self.__state)
http.client.CannotSendRequest: Request-sent
2022-08-07T19:07:57.362000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
'''
[node 3] Cleaning up leftover process
[node 2] Cleaning up leftover process


stderr:
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/wallet_listsinceblock.py", line 387, in <module>
    ListSinceBlockTest().main()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 156, in main
    exit_code = self.shutdown()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 311, in shutdown
    self.stop_nodes()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 571, in stop_nodes
    node.wait_until_stopped()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 382, in wait_until_stopped
    wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/util.py", line 281, in wait_until_helper
    raise AssertionError("Predicate {} not true after {} seconds".format(predicate_source, timeout))
AssertionError: Predicate ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
''' not true after 60.0 seconds


Remaining jobs: [feature_block.py, mempool_updatefromblock.py, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, rpc_blockchain.py, p2p_getaddr_caching.py, rpc_net.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, feature_rbf.py --descriptors, mining_basic.py, wallet_create_tx.py --descriptors, wallet_taproot.py, p2p_blockfilters.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py]
229/246 - wallet_create_tx.py --descriptors failed, Duration: 97 s

stdout:
2022-08-07T19:06:21.946000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/wallet_create_tx_47
2022-08-07T19:06:28.393000Z TestFramework (INFO): Create some old blocks
2022-08-07T19:06:58.567000Z TestFramework (ERROR): JSONRPC error
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 166, in _get_response
    http_response = self.__conn.getresponse()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1344, in getresponse
    response.begin()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
socket.timeout: timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/wallet_create_tx.py", line 27, in run_test
    self.generate(self.nodes[0], 200)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 648, in generate
    blocks = generator.generate(*args, invalid_call=False, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 303, in generate
    return self.generatetoaddress(nblocks=nblocks, address=self.get_deterministic_priv_key().address, maxtries=maxtries, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 311, in generatetoaddress
    return self.__getattr__('generatetoaddress')(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 108, in _request
    return self._get_response()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 168, in _get_response
    raise JSONRPCException({
test_framework.authproxy.JSONRPCException: 'generatetoaddress' RPC took longer than 30.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)
2022-08-07T19:06:58.688000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:06:58.763000Z TestFramework.node0 (ERROR): Unable to stop node.
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 336, in stop_node
    self.stop(wait=wait)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 107, in _request
    self.__conn.request(method, path, postdata, headers)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1252, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1263, in _send_request
    self.putrequest(method, url, **skips)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1089, in putrequest
    raise CannotSendRequest(self.__state)
http.client.CannotSendRequest: Request-sent
2022-08-07T19:07:58.822000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
'''
[node 0] Cleaning up leftover process


stderr:
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/wallet_create_tx.py", line 82, in <module>
    CreateTxWalletTest().main()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 156, in main
    exit_code = self.shutdown()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 311, in shutdown
    self.stop_nodes()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 571, in stop_nodes
    node.wait_until_stopped()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 382, in wait_until_stopped
    wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/util.py", line 281, in wait_until_helper
    raise AssertionError("Predicate {} not true after {} seconds".format(predicate_source, timeout))
AssertionError: Predicate ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
''' not true after 60.0 seconds


Remaining jobs: [feature_block.py, mempool_updatefromblock.py, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, rpc_blockchain.py, p2p_getaddr_caching.py, rpc_net.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, feature_rbf.py --descriptors, mining_basic.py, wallet_taproot.py, p2p_blockfilters.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py]
230/246 - feature_rbf.py --descriptors passed, Duration: 133 s
Remaining jobs: [feature_block.py, mempool_updatefromblock.py, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, rpc_blockchain.py, p2p_getaddr_caching.py, rpc_net.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, mining_basic.py, wallet_taproot.py, p2p_blockfilters.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py]
231/246 - mining_basic.py passed, Duration: 119 s
Remaining jobs: [feature_block.py, mempool_updatefromblock.py, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, rpc_blockchain.py, p2p_getaddr_caching.py, rpc_net.py, feature_assumevalid.py, feature_rbf.py --legacy-wallet, wallet_taproot.py, p2p_blockfilters.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py]
232/246 - feature_rbf.py --legacy-wallet passed, Duration: 135 s
Remaining jobs: [feature_block.py, mempool_updatefromblock.py, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, rpc_blockchain.py, p2p_getaddr_caching.py, rpc_net.py, feature_assumevalid.py, wallet_taproot.py, p2p_blockfilters.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py]
233/246 - rpc_blockchain.py passed, Duration: 189 s
Remaining jobs: [feature_block.py, mempool_updatefromblock.py, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, p2p_getaddr_caching.py, rpc_net.py, feature_assumevalid.py, wallet_taproot.py, p2p_blockfilters.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py]
234/246 - feature_assumevalid.py passed, Duration: 158 s
Remaining jobs: [feature_block.py, mempool_updatefromblock.py, feature_fee_estimation.py, wallet_transactiontime_rescan.py --descriptors, p2p_getaddr_caching.py, rpc_net.py, wallet_taproot.py, p2p_blockfilters.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py]
235/246 - wallet_transactiontime_rescan.py --descriptors failed, Duration: 204 s

stdout:
2022-08-07T19:04:46.001000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/wallet_transactiontime_rescan_149
2022-08-07T19:05:13.021000Z TestFramework (INFO): Prepare nodes and wallet
2022-08-07T19:05:15.342000Z TestFramework (INFO): Start transactions
2022-08-07T19:05:45.743000Z TestFramework (INFO): Send 10 btc to user
2022-08-07T19:06:01.616000Z TestFramework (INFO): Send 5 btc to user
2022-08-07T19:06:37.850000Z TestFramework (INFO): Send 1 btc to user
2022-08-07T19:07:08.484000Z TestFramework (ERROR): JSONRPC error
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 166, in _get_response
    http_response = self.__conn.getresponse()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1344, in getresponse
    response.begin()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
socket.timeout: timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/wallet_transactiontime_rescan.py", line 98, in run_test
    self.generatetoaddress(minernode, COINBASE_MATURITY, m1)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 658, in generatetoaddress
    blocks = generator.generatetoaddress(*args, invalid_call=False, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 311, in generatetoaddress
    return self.__getattr__('generatetoaddress')(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 108, in _request
    return self._get_response()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 168, in _get_response
    raise JSONRPCException({
test_framework.authproxy.JSONRPCException: 'generatetoaddress' RPC took longer than 30.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)
2022-08-07T19:07:08.624000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:07:08.686000Z TestFramework.node0 (ERROR): Unable to stop node.
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 336, in stop_node
    self.stop(wait=wait)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 107, in _request
    self.__conn.request(method, path, postdata, headers)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1252, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1263, in _send_request
    self.putrequest(method, url, **skips)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1089, in putrequest
    raise CannotSendRequest(self.__state)
http.client.CannotSendRequest: Request-sent
2022-08-07T19:08:09.716000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
'''
[node 2] Cleaning up leftover process
[node 1] Cleaning up leftover process
[node 0] Cleaning up leftover process


stderr:
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/wallet_transactiontime_rescan.py", line 162, in <module>
    TransactionTimeRescanTest().main()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 156, in main
    exit_code = self.shutdown()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 311, in shutdown
    self.stop_nodes()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 571, in stop_nodes
    node.wait_until_stopped()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 382, in wait_until_stopped
    wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/util.py", line 281, in wait_until_helper
    raise AssertionError("Predicate {} not true after {} seconds".format(predicate_source, timeout))
AssertionError: Predicate ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
''' not true after 60.0 seconds


236/246 - rpc_net.py passed, Duration: 183 s
Remaining jobs: [feature_block.py, mempool_updatefromblock.py, feature_fee_estimation.py, p2p_getaddr_caching.py, wallet_taproot.py, p2p_blockfilters.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py]
237/246 - mempool_updatefromblock.py passed, Duration: 237 s
Remaining jobs: [feature_block.py, feature_fee_estimation.py, p2p_getaddr_caching.py, wallet_taproot.py, p2p_blockfilters.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py]
238/246 - p2p_getaddr_caching.py passed, Duration: 190 s
Remaining jobs: [feature_block.py, feature_fee_estimation.py, wallet_taproot.py, p2p_blockfilters.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py]
239/246 - p2p_blockfilters.py passed, Duration: 104 s
Remaining jobs: [feature_block.py, feature_fee_estimation.py, wallet_taproot.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py]
240/246 - wallet_taproot.py passed, Duration: 113 s
Remaining jobs: [feature_block.py, feature_fee_estimation.py, feature_coinstatsindex.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py]
241/246 - feature_coinstatsindex.py failed, Duration: 98 s

stdout:
2022-08-07T19:06:47.372000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/feature_coinstatsindex_17
2022-08-07T19:07:24.828000Z TestFramework (ERROR): JSONRPC error
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 166, in _get_response
    http_response = self.__conn.getresponse()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1344, in getresponse
    response.begin()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
socket.timeout: timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/feature_coinstatsindex.py", line 51, in run_test
    self._test_coin_stats_index()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/feature_coinstatsindex.py", line 70, in _test_coin_stats_index
    self.generate(self.wallet, COINBASE_MATURITY + 1)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 648, in generate
    blocks = generator.generate(*args, invalid_call=False, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/wallet.py", line 163, in generate
    blocks = self._test_node.generatetodescriptor(num_blocks, self.get_descriptor(), **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 315, in generatetodescriptor
    return self.__getattr__('generatetodescriptor')(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 108, in _request
    return self._get_response()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 168, in _get_response
    raise JSONRPCException({
test_framework.authproxy.JSONRPCException: 'generatetodescriptor' RPC took longer than 30.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)
2022-08-07T19:07:24.923000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:07:24.966000Z TestFramework.node0 (ERROR): Unable to stop node.
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 336, in stop_node
    self.stop(wait=wait)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 107, in _request
    self.__conn.request(method, path, postdata, headers)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1252, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1263, in _send_request
    self.putrequest(method, url, **skips)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1089, in putrequest
    raise CannotSendRequest(self.__state)
http.client.CannotSendRequest: Request-sent
2022-08-07T19:08:25.183000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
'''
[node 1] Cleaning up leftover process
[node 0] Cleaning up leftover process


stderr:
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/feature_coinstatsindex.py", line 300, in <module>
    CoinStatsIndexTest().main()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 156, in main
    exit_code = self.shutdown()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 311, in shutdown
    self.stop_nodes()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 571, in stop_nodes
    node.wait_until_stopped()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 382, in wait_until_stopped
    wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/util.py", line 281, in wait_until_helper
    raise AssertionError("Predicate {} not true after {} seconds".format(predicate_source, timeout))
AssertionError: Predicate ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
''' not true after 60.0 seconds


Remaining jobs: [feature_block.py, feature_fee_estimation.py, wallet_orphanedreward.py, p2p_node_network_limited.py, p2p_permissions.py]
242/246 - p2p_permissions.py failed, Duration: 98 s

stdout:
2022-08-07T19:06:49.487000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/p2p_permissions_13
2022-08-07T19:07:27.097000Z TestFramework (ERROR): JSONRPC error
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 166, in _get_response
    http_response = self.__conn.getresponse()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1344, in getresponse
    response.begin()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
socket.timeout: timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/p2p_permissions.py", line 34, in run_test
    self.check_tx_relay()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/p2p_permissions.py", line 97, in check_tx_relay
    block_op_true = self.nodes[0].getblock(self.generatetoaddress(self.nodes[0], 100, ADDRESS_BCRT1_P2WSH_OP_TRUE)[0])
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 658, in generatetoaddress
    blocks = generator.generatetoaddress(*args, invalid_call=False, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 311, in generatetoaddress
    return self.__getattr__('generatetoaddress')(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 108, in _request
    return self._get_response()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 168, in _get_response
    raise JSONRPCException({
test_framework.authproxy.JSONRPCException: 'generatetoaddress' RPC took longer than 30.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)
2022-08-07T19:07:27.201000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:07:27.209000Z TestFramework.node0 (ERROR): Unable to stop node.
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 336, in stop_node
    self.stop(wait=wait)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 107, in _request
    self.__conn.request(method, path, postdata, headers)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1252, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1263, in _send_request
    self.putrequest(method, url, **skips)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1089, in putrequest
    raise CannotSendRequest(self.__state)
http.client.CannotSendRequest: Request-sent
2022-08-07T19:08:27.481000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
'''
[node 1] Cleaning up leftover process
[node 0] Cleaning up leftover process


stderr:
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/p2p_permissions.py", line 166, in <module>
    P2PPermissionsTests().main()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 156, in main
    exit_code = self.shutdown()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 311, in shutdown
    self.stop_nodes()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 571, in stop_nodes
    node.wait_until_stopped()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 382, in wait_until_stopped
    wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/util.py", line 281, in wait_until_helper
    raise AssertionError("Predicate {} not true after {} seconds".format(predicate_source, timeout))
AssertionError: Predicate ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
''' not true after 60.0 seconds


Remaining jobs: [feature_block.py, feature_fee_estimation.py, wallet_orphanedreward.py, p2p_node_network_limited.py]
243/246 - feature_block.py passed, Duration: 255 s
244/246 - wallet_orphanedreward.py failed, Duration: 101 s

stdout:
2022-08-07T19:06:47.466000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/wallet_orphanedreward_16
2022-08-07T19:07:27.451000Z TestFramework (ERROR): JSONRPC error
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 166, in _get_response
    http_response = self.__conn.getresponse()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1344, in getresponse
    response.begin()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
socket.timeout: timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/wallet_orphanedreward.py", line 21, in run_test
    self.generate(self.nodes[0], 150)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 648, in generate
    blocks = generator.generate(*args, invalid_call=False, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 303, in generate
    return self.generatetoaddress(nblocks=nblocks, address=self.get_deterministic_priv_key().address, maxtries=maxtries, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 311, in generatetoaddress
    return self.__getattr__('generatetoaddress')(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 108, in _request
    return self._get_response()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 168, in _get_response
    raise JSONRPCException({
test_framework.authproxy.JSONRPCException: 'generatetoaddress' RPC took longer than 30.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)
2022-08-07T19:07:27.578000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:07:27.652000Z TestFramework.node0 (ERROR): Unable to stop node.
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 336, in stop_node
    self.stop(wait=wait)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 107, in _request
    self.__conn.request(method, path, postdata, headers)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1252, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1263, in _send_request
    self.putrequest(method, url, **skips)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1089, in putrequest
    raise CannotSendRequest(self.__state)
http.client.CannotSendRequest: Request-sent
2022-08-07T19:08:28.079000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
'''
[node 1] Cleaning up leftover process
[node 0] Cleaning up leftover process


stderr:
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/wallet_orphanedreward.py", line 59, in <module>
    OrphanedBlockRewardTest().main()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 156, in main
    exit_code = self.shutdown()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 311, in shutdown
    self.stop_nodes()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 571, in stop_nodes
    node.wait_until_stopped()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 382, in wait_until_stopped
    wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/util.py", line 281, in wait_until_helper
    raise AssertionError("Predicate {} not true after {} seconds".format(predicate_source, timeout))
AssertionError: Predicate ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
''' not true after 60.0 seconds


Remaining jobs: [feature_fee_estimation.py, p2p_node_network_limited.py]
245/246 - p2p_node_network_limited.py failed, Duration: 101 s

stdout:
2022-08-07T19:06:49.266000Z TestFramework (INFO): Initializing test directory /var/folders/11/pzs50dmx7w3_b1r1l7rqtgjr0000gn/T/test_runner_₿_🏃_20220808_003410/p2p_node_network_limited_14
2022-08-07T19:06:56.762000Z TestFramework (INFO): Check that node has signalled expected services.
2022-08-07T19:06:56.833000Z TestFramework (INFO): Check that the localservices is as expected.
2022-08-07T19:06:56.949000Z TestFramework (INFO): Mine enough blocks to reach the NODE_NETWORK_LIMITED range.
2022-08-07T19:07:27.948000Z TestFramework (ERROR): JSONRPC error
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 166, in _get_response
    http_response = self.__conn.getresponse()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1344, in getresponse
    response.begin()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
socket.timeout: timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 133, in main
    self.run_test()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/p2p_node_network_limited.py", line 62, in run_test
    blocks = self.generate(self.nodes[1], 292, sync_fun=lambda: self.sync_blocks([self.nodes[0], self.nodes[1]]))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 648, in generate
    blocks = generator.generate(*args, invalid_call=False, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 303, in generate
    return self.generatetoaddress(nblocks=nblocks, address=self.get_deterministic_priv_key().address, maxtries=maxtries, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 311, in generatetoaddress
    return self.__getattr__('generatetoaddress')(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 108, in _request
    return self._get_response()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 168, in _get_response
    raise JSONRPCException({
test_framework.authproxy.JSONRPCException: 'generatetoaddress' RPC took longer than 30.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)
2022-08-07T19:07:28.049000Z TestFramework (INFO): Stopping nodes
2022-08-07T19:07:28.491000Z TestFramework.node1 (ERROR): Unable to stop node.
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 336, in stop_node
    self.stop(wait=wait)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/coverage.py", line 49, in __call__
    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 142, in __call__
    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/authproxy.py", line 107, in _request
    self.__conn.request(method, path, postdata, headers)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1252, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1263, in _send_request
    self.putrequest(method, url, **skips)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/http/client.py", line 1089, in putrequest
    raise CannotSendRequest(self.__state)
http.client.CannotSendRequest: Request-sent
2022-08-07T19:08:30.062000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
'''
[node 2] Cleaning up leftover process
[node 1] Cleaning up leftover process


stderr:
Traceback (most recent call last):
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/p2p_node_network_limited.py", line 112, in <module>
    NodeNetworkLimitedTest().main()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 156, in main
    exit_code = self.shutdown()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 311, in shutdown
    self.stop_nodes()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_framework.py", line 571, in stop_nodes
    node.wait_until_stopped()
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/test_node.py", line 382, in wait_until_stopped
    wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)
  File "/Users/mehul/Development/Bitcoin/bitcoin/test/functional/test_framework/util.py", line 281, in wait_until_helper
    raise AssertionError("Predicate {} not true after {} seconds".format(predicate_source, timeout))
AssertionError: Predicate ''''
    def is_node_stopped(self):
        """Checks whether the node has stopped.

        Returns True if the node has stopped. False otherwise.
        This method is responsible for freeing resources (self.process)."""
        if not self.running:
            return True
        return_code = self.process.poll()
        if return_code is None:
            return False

        # process has stopped. Assert that it didn't return an error code.
        assert return_code == 0, self._node_msg(
            "Node returned non-zero exit code (%d) when stopping" % return_code)
        self.running = False
        self.process = None
        self.rpc_connected = False
        self.rpc = None
        self.log.debug("Node stopped")
        return True
''' not true after 60.0 seconds


Remaining jobs: [feature_fee_estimation.py]
246/246 - feature_fee_estimation.py passed, Duration: 291 s        

TEST                                                   | STATUS    | DURATION

example_test.py                                        | ✓ Passed  | 18 s
feature_abortnode.py                                   | ✓ Passed  | 53 s
feature_addrman.py                                     | ✓ Passed  | 40 s
feature_anchors.py                                     | ✓ Passed  | 24 s
feature_asmap.py                                       | ✓ Passed  | 51 s
feature_assumevalid.py                                 | ✓ Passed  | 158 s
feature_block.py                                       | ✓ Passed  | 255 s
feature_blocksdir.py                                   | ✓ Passed  | 21 s
feature_cltv.py                                        | ✓ Passed  | 44 s
feature_dersig.py                                      | ✓ Passed  | 45 s
feature_dirsymlinks.py                                 | ✓ Passed  | 15 s
feature_fee_estimation.py                              | ✓ Passed  | 291 s
feature_filelock.py                                    | ✓ Passed  | 11 s
feature_help.py                                        | ✓ Passed  | 2 s
feature_includeconf.py                                 | ✓ Passed  | 20 s
feature_init.py                                        | ✓ Passed  | 87 s
feature_loadblock.py                                   | ✓ Passed  | 64 s
feature_logging.py                                     | ✓ Passed  | 38 s
feature_maxtipage.py                                   | ✓ Passed  | 129 s
feature_minchainwork.py                                | ✓ Passed  | 71 s
feature_notifications.py                               | ✓ Passed  | 62 s
feature_nulldummy.py                                   | ✓ Passed  | 27 s
feature_presegwit_node_upgrade.py                      | ✓ Passed  | 24 s
feature_proxy.py                                       | ✓ Passed  | 55 s
feature_rbf.py --descriptors                           | ✓ Passed  | 133 s
feature_rbf.py --legacy-wallet                         | ✓ Passed  | 135 s
feature_reindex.py                                     | ✓ Passed  | 57 s
feature_settings.py                                    | ✓ Passed  | 29 s
feature_shutdown.py                                    | ✓ Passed  | 10 s
feature_signet.py                                      | ✓ Passed  | 25 s
feature_startupnotify.py                               | ✓ Passed  | 12 s
feature_uacomment.py                                   | ✓ Passed  | 25 s
feature_utxo_set_hash.py                               | ✓ Passed  | 31 s
feature_versionbits_warning.py                         | ✓ Passed  | 112 s
interface_http.py                                      | ✓ Passed  | 27 s
interface_rest.py                                      | ✓ Passed  | 45 s
interface_rpc.py                                       | ✓ Passed  | 19 s
mempool_accept.py                                      | ✓ Passed  | 18 s
mempool_accept_wtxid.py                                | ✓ Passed  | 47 s
mempool_expiry.py                                      | ✓ Passed  | 64 s
mempool_package_limits.py                              | ✓ Passed  | 81 s
mempool_package_onemore.py                             | ✓ Passed  | 13 s
mempool_persist.py                                     | ✓ Passed  | 86 s
mempool_reorg.py                                       | ✓ Passed  | 34 s
mempool_spend_coinbase.py                              | ✓ Passed  | 16 s
mempool_unbroadcast.py                                 | ✓ Passed  | 39 s
mempool_updatefromblock.py                             | ✓ Passed  | 237 s
mining_basic.py                                        | ✓ Passed  | 119 s
mining_prioritisetransaction.py                        | ✓ Passed  | 51 s
p2p_add_connections.py                                 | ✓ Passed  | 53 s
p2p_addr_relay.py                                      | ✓ Passed  | 173 s
p2p_addrfetch.py                                       | ✓ Passed  | 10 s
p2p_addrv2_relay.py                                    | ✓ Passed  | 13 s
p2p_block_sync.py                                      | ✓ Passed  | 20 s
p2p_blockfilters.py                                    | ✓ Passed  | 104 s
p2p_blocksonly.py                                      | ✓ Passed  | 27 s
p2p_compactblocks_blocksonly.py                        | ✓ Passed  | 35 s
p2p_compactblocks_hb.py                                | ✓ Passed  | 104 s
p2p_disconnect_ban.py                                  | ✓ Passed  | 32 s
p2p_dns_seeds.py                                       | ✓ Passed  | 194 s
p2p_dos_header_tree.py                                 | ✓ Passed  | 16 s
p2p_eviction.py                                        | ✓ Passed  | 43 s
p2p_filter.py                                          | ✓ Passed  | 28 s
p2p_fingerprint.py                                     | ✓ Passed  | 15 s
p2p_getaddr_caching.py                                 | ✓ Passed  | 190 s
p2p_getdata.py                                         | ✓ Passed  | 12 s
p2p_i2p_ports.py                                       | ✓ Passed  | 14 s
p2p_ibd_txrelay.py                                     | ✓ Passed  | 14 s
p2p_invalid_block.py                                   | ✓ Passed  | 25 s
p2p_invalid_locator.py                                 | ✓ Passed  | 32 s
p2p_invalid_messages.py                                | ✓ Passed  | 31 s
p2p_invalid_tx.py                                      | ✓ Passed  | 50 s
p2p_leak.py                                            | ✓ Passed  | 15 s
p2p_leak_tx.py                                         | ✓ Passed  | 25 s
p2p_message_capture.py                                 | ✓ Passed  | 8 s
p2p_nobloomfilter_messages.py                          | ✓ Passed  | 11 s
p2p_ping.py                                            | ✓ Passed  | 10 s
p2p_sendheaders.py                                     | ✓ Passed  | 155 s
p2p_timeouts.py                                        | ✓ Passed  | 10 s
p2p_tx_download.py                                     | ✓ Passed  | 185 s
p2p_unrequested_blocks.py                              | ✓ Passed  | 76 s
rpc_blockchain.py                                      | ✓ Passed  | 189 s
rpc_decodescript.py                                    | ✓ Passed  | 15 s
rpc_deprecated.py                                      | ✓ Passed  | 10 s
rpc_deriveaddresses.py                                 | ✓ Passed  | 8 s
rpc_deriveaddresses.py --usecli                        | ✓ Passed  | 9 s
rpc_dumptxoutset.py                                    | ✓ Passed  | 30 s
rpc_estimatefee.py                                     | ✓ Passed  | 10 s
rpc_generate.py                                        | ✓ Passed  | 14 s
rpc_getblockfilter.py                                  | ✓ Passed  | 16 s
rpc_getblockfrompeer.py                                | ✓ Passed  | 14 s
rpc_getblockstats.py                                   | ✓ Passed  | 50 s
rpc_getchaintips.py                                    | ✓ Passed  | 69 s
rpc_getdescriptorinfo.py                               | ✓ Passed  | 11 s
rpc_help.py                                            | ✓ Passed  | 27 s
rpc_invalid_address_message.py                         | ✓ Passed  | 14 s
rpc_invalidateblock.py                                 | ✓ Passed  | 22 s
rpc_mempool_info.py                                    | ✓ Passed  | 14 s
rpc_misc.py                                            | ✓ Passed  | 35 s
rpc_named_arguments.py                                 | ✓ Passed  | 8 s
rpc_net.py                                             | ✓ Passed  | 183 s
rpc_preciousblock.py                                   | ✓ Passed  | 31 s
rpc_psbt.py --descriptors                              | ✓ Passed  | 163 s
rpc_scantxoutset.py                                    | ✓ Passed  | 36 s
rpc_setban.py                                          | ✓ Passed  | 35 s
rpc_signer.py                                          | ✓ Passed  | 34 s
rpc_signmessagewithprivkey.py                          | ✓ Passed  | 6 s
rpc_uptime.py                                          | ✓ Passed  | 7 s
rpc_users.py                                           | ✓ Passed  | 47 s
rpc_whitelist.py                                       | ✓ Passed  | 16 s
tool_signet_miner.py --descriptors                     | ✓ Passed  | 15 s
tool_wallet.py --descriptors                           | ✓ Passed  | 76 s
wallet_address_types.py --descriptors                  | ✓ Passed  | 196 s
wallet_backup.py --descriptors                         | ✓ Passed  | 189 s
wallet_balance.py --descriptors                        | ✓ Passed  | 77 s
wallet_coinbase_category.py --descriptors              | ✓ Passed  | 42 s
wallet_createwallet.py --descriptors                   | ✓ Passed  | 38 s
wallet_createwallet.py --usecli                        | ✓ Passed  | 41 s
wallet_crosschain.py                                   | ✓ Passed  | 8 s
wallet_descriptor.py --descriptors                     | ✓ Passed  | 99 s
wallet_disable.py                                      | ✓ Passed  | 8 s
wallet_encryption.py --descriptors                     | ✓ Passed  | 16 s
wallet_fallbackfee.py --descriptors                    | ✓ Passed  | 40 s
wallet_groups.py --descriptors                         | ✓ Passed  | 175 s
wallet_importdescriptors.py --descriptors              | ✓ Passed  | 95 s
wallet_importprunedfunds.py --descriptors              | ✓ Passed  | 50 s
wallet_keypool.py --descriptors                        | ✓ Passed  | 22 s
wallet_listdescriptors.py --descriptors                | ✓ Passed  | 16 s
wallet_listreceivedby.py --descriptors                 | ✓ Passed  | 96 s
wallet_listtransactions.py --descriptors               | ✓ Passed  | 89 s
wallet_miniscript.py                                   | ✓ Passed  | 16 s
wallet_multisig_descriptor_psbt.py                     | ✓ Passed  | 42 s
wallet_multiwallet.py --descriptors                    | ✓ Passed  | 170 s
wallet_multiwallet.py --usecli                         | ✓ Passed  | 172 s
wallet_reorgsrestore.py                                | ✓ Passed  | 78 s
wallet_resendwallettransactions.py --descriptors       | ✓ Passed  | 21 s
wallet_send.py --descriptors                           | ✓ Passed  | 81 s
wallet_sendall.py --descriptors                        | ✓ Passed  | 76 s
wallet_signer.py --descriptors                         | ✓ Passed  | 46 s
wallet_signmessagewithaddress.py                       | ✓ Passed  | 8 s
wallet_simulaterawtx.py --descriptors                  | ✓ Passed  | 37 s
wallet_startup.py                                      | ✓ Passed  | 37 s
wallet_taproot.py                                      | ✓ Passed  | 113 s
wallet_timelock.py                                     | ✓ Passed  | 17 s
wallet_txn_clone.py                                    | ✓ Passed  | 49 s
wallet_txn_clone.py --mineblock                        | ✓ Passed  | 23 s
wallet_txn_clone.py --segwit                           | ✓ Passed  | 43 s
wallet_txn_doublespend.py --descriptors                | ✓ Passed  | 21 s
wallet_txn_doublespend.py --mineblock                  | ✓ Passed  | 53 s
feature_backwards_compatibility.py --descriptors       | ○ Skipped | 0 s
feature_backwards_compatibility.py --legacy-wallet     | ○ Skipped | 0 s
feature_bind_extra.py                                  | ○ Skipped | 1 s
feature_bind_port_discover.py                          | ○ Skipped | 1 s
feature_bind_port_externalip.py                        | ○ Skipped | 0 s
feature_segwit.py --legacy-wallet                      | ○ Skipped | 2 s
feature_syscall_sandbox.py                             | ○ Skipped | 1 s
feature_txindex_compatibility.py                       | ○ Skipped | 0 s
feature_unsupported_utxo_db.py                         | ○ Skipped | 1 s
interface_usdt_coinselection.py                        | ○ Skipped | 1 s
interface_usdt_net.py                                  | ○ Skipped | 1 s
interface_usdt_utxocache.py                            | ○ Skipped | 1 s
interface_usdt_validation.py                           | ○ Skipped | 1 s
interface_zmq.py                                       | ○ Skipped | 2 s
mempool_compatibility.py                               | ○ Skipped | 0 s
rpc_bind.py --ipv4                                     | ○ Skipped | 1 s
rpc_bind.py --ipv6                                     | ○ Skipped | 1 s
rpc_bind.py --nonloopback                              | ○ Skipped | 0 s
rpc_fundrawtransaction.py --legacy-wallet              | ○ Skipped | 2 s
rpc_psbt.py --legacy-wallet                            | ○ Skipped | 1 s
tool_signet_miner.py --legacy-wallet                   | ○ Skipped | 1 s
tool_wallet.py --legacy-wallet                         | ○ Skipped | 1 s
wallet_abandonconflict.py --legacy-wallet              | ○ Skipped | 2 s
wallet_address_types.py --legacy-wallet                | ○ Skipped | 2 s
wallet_avoidreuse.py --legacy-wallet                   | ○ Skipped | 2 s
wallet_backup.py --legacy-wallet                       | ○ Skipped | 2 s
wallet_balance.py --legacy-wallet                      | ○ Skipped | 0 s
wallet_basic.py --legacy-wallet                        | ○ Skipped | 2 s
wallet_bumpfee.py --legacy-wallet                      | ○ Skipped | 0 s
wallet_coinbase_category.py --legacy-wallet            | ○ Skipped | 1 s
wallet_create_tx.py --legacy-wallet                    | ○ Skipped | 1 s
wallet_createwallet.py --legacy-wallet                 | ○ Skipped | 1 s
wallet_dump.py --legacy-wallet                         | ○ Skipped | 2 s
wallet_encryption.py --legacy-wallet                   | ○ Skipped | 0 s
wallet_fallbackfee.py --legacy-wallet                  | ○ Skipped | 1 s
wallet_groups.py --legacy-wallet                       | ○ Skipped | 1 s
wallet_hd.py --legacy-wallet                           | ○ Skipped | 2 s
wallet_implicitsegwit.py --legacy-wallet               | ○ Skipped | 1 s
wallet_import_rescan.py --legacy-wallet                | ○ Skipped | 0 s
wallet_import_with_label.py --legacy-wallet            | ○ Skipped | 0 s
wallet_importmulti.py --legacy-wallet                  | ○ Skipped | 2 s
wallet_importprunedfunds.py --legacy-wallet            | ○ Skipped | 1 s
wallet_inactive_hdchains.py                            | ○ Skipped | 1 s
wallet_keypool.py --legacy-wallet                      | ○ Skipped | 0 s
wallet_keypool_topup.py --legacy-wallet                | ○ Skipped | 2 s
wallet_labels.py --legacy-wallet                       | ○ Skipped | 2 s
wallet_listreceivedby.py --legacy-wallet               | ○ Skipped | 2 s
wallet_listsinceblock.py --legacy-wallet               | ○ Skipped | 0 s
wallet_listtransactions.py --legacy-wallet             | ○ Skipped | 0 s
wallet_multiwallet.py --legacy-wallet                  | ○ Skipped | 1 s
wallet_resendwallettransactions.py --legacy-wallet     | ○ Skipped | 1 s
wallet_send.py --legacy-wallet                         | ○ Skipped | 0 s
wallet_sendall.py --legacy-wallet                      | ○ Skipped | 0 s
wallet_signrawtransactionwithwallet.py --legacy-wallet | ○ Skipped | 1 s
wallet_simulaterawtx.py --legacy-wallet                | ○ Skipped | 1 s
wallet_transactiontime_rescan.py --legacy-wallet       | ○ Skipped | 0 s
wallet_txn_doublespend.py --legacy-wallet              | ○ Skipped | 0 s
wallet_upgradewallet.py --legacy-wallet                | ○ Skipped | 0 s
wallet_watchonly.py --legacy-wallet                    | ○ Skipped | 1 s
wallet_watchonly.py --usecli --legacy-wallet           | ○ Skipped | 1 s
feature_bip68_sequence.py                              | ✖ Failed  | 113 s
feature_coinstatsindex.py                              | ✖ Failed  | 98 s
feature_config_args.py                                 | ✖ Failed  | 30 s
feature_csv_activation.py                              | ✖ Failed  | 98 s
feature_maxuploadtarget.py                             | ✖ Failed  | 93 s
feature_segwit.py --descriptors                        | ✖ Failed  | 137 s
feature_taproot.py                                     | ✖ Failed  | 98 s
interface_bitcoin_cli.py --descriptors                 | ✖ Failed  | 99 s
interface_bitcoin_cli.py --legacy-wallet               | ✖ Failed  | 96 s
mempool_limit.py                                       | ✖ Failed  | 95 s
mempool_packages.py                                    | ✖ Failed  | 103 s
mempool_resurrect.py                                   | ✖ Failed  | 100 s
mining_getblocktemplate_longpoll.py                    | ✖ Failed  | 117 s
p2p_compactblocks.py                                   | ✖ Failed  | 99 s
p2p_feefilter.py                                       | ✖ Failed  | 129 s
p2p_node_network_limited.py                            | ✖ Failed  | 101 s
p2p_permissions.py                                     | ✖ Failed  | 98 s
p2p_segwit.py                                          | ✖ Failed  | 102 s
rpc_createmultisig.py                                  | ✖ Failed  | 98 s
rpc_fundrawtransaction.py --descriptors                | ✖ Failed  | 131 s
rpc_packages.py                                        | ✖ Failed  | 98 s
rpc_rawtransaction.py --legacy-wallet                  | ✖ Failed  | 114 s
rpc_signrawtransactionwithkey.py                       | ✖ Failed  | 98 s
rpc_txoutproof.py                                      | ✖ Failed  | 105 s
wallet_abandonconflict.py --descriptors                | ✖ Failed  | 116 s
wallet_avoid_mixing_output_types.py --descriptors      | ✖ Failed  | 103 s
wallet_avoidreuse.py --descriptors                     | ✖ Failed  | 126 s
wallet_basic.py --descriptors                          | ✖ Failed  | 119 s
wallet_bumpfee.py --descriptors                        | ✖ Failed  | 99 s
wallet_create_tx.py --descriptors                      | ✖ Failed  | 97 s
wallet_hd.py --descriptors                             | ✖ Failed  | 98 s
wallet_keypool_topup.py --descriptors                  | ✖ Failed  | 110 s
wallet_labels.py --descriptors                         | ✖ Failed  | 101 s
wallet_listsinceblock.py --descriptors                 | ✖ Failed  | 107 s
wallet_orphanedreward.py                               | ✖ Failed  | 101 s
wallet_signrawtransactionwithwallet.py --descriptors   | ✖ Failed  | 104 s
wallet_transactiontime_rescan.py --descriptors         | ✖ Failed  | 204 s

ALL                                                    | ✖ Failed  | 12404 s (accumulated) 
Runtime: 291 s
